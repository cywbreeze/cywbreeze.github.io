<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySql扩展</title>
      <link href="/2022/11/04/MySql%E6%89%A9%E5%B1%95/"/>
      <url>/2022/11/04/MySql%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、存储过程与函数"><a href="#一、存储过程与函数" class="headerlink" title="一、存储过程与函数"></a>一、存储过程与函数</h1><blockquote><p>MySQL从5.0版本开始支持存储过程和函数。存储过程和函数能够将复杂的SQL逻辑封装在一起，应用程序无须关注存储过程和函数内部复杂的SQL逻辑，而只需要简单地调用存储过程和函数即可。</p></blockquote><h2 id="1-存储过程概述"><a href="#1-存储过程概述" class="headerlink" title="1. 存储过程概述"></a>1. 存储过程概述</h2><h3 id="1-理解"><a href="#1-理解" class="headerlink" title="1) 理解"></a>1) 理解</h3><p><strong>含义：</strong>存储过程的英文是 Stored Procedure 。它的思想很简单，就是一组经过<strong>预先编译</strong>的 SQL 语句 的封装。</p><p><strong>执行过程</strong>：</p><ul><li>存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</li></ul><p><strong>好处：</strong></p><ul><li>1、简化操作，提高了sql语句的重用性，减少了开发程序员的压力。</li><li>2、减少操作过程中的失误，提高效率。</li><li>3、减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器）。</li><li>4、减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性。</li></ul><p><strong>和视图、函数的对比：</strong></p><ul><li><p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是虚拟表 ，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以 <strong>直接操作底层数据表</strong> ，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。</p></li><li><p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是 <strong>没有返回值</strong> 的。</p></li></ul><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2) 分类"></a>2) 分类</h3><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：</p><p>1、没有参数（无参数无返回） </p><p>2、仅仅带 IN 类型（有参数无返回） </p><p>3、仅仅带 OUT 类型（无参数有返回） </p><p>4、既带 IN 又带 OUT（有参数有返回） </p><p>5、带 INOUT（有参数有返回）</p><p>注意：IN、OUT、INOUT 都可以在一个存储过程中带多个。</p><h2 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2. 创建存储过程"></a>2. 创建存储过程</h2><h3 id="1-语法分析"><a href="#1-语法分析" class="headerlink" title="1) 语法分析"></a>1) 语法分析</h3><p><strong>语法：</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名(<span class="hljs-keyword">IN</span><span class="hljs-operator">|</span><span class="hljs-keyword">OUT</span><span class="hljs-operator">|</span><span class="hljs-keyword">INOUT</span> 参数名 参数类型,...)<br>[characteristics ...]<br><span class="hljs-keyword">BEGIN</span><br> 存储过程体<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1、参数前面的符号的意思</p><ul><li><p>IN ：当前参数为输入参数，也就是表示入参；</p><p>存储过程只是读取这个参数的值。如果没有定义参数种类， 默认就是 IN ，表示输入参数。</p></li><li><p>OUT ：当前参数为输出参数，也就是表示出参；</p><p>执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</p></li><li><p>INOUT ：当前参数既可以为输入参数，也可以为输出参数。</p></li></ul><p>2、形参类型可以是 MySQL数据库中的任意类型。</p><p>3、characteristics 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-operator">|</span> [<span class="hljs-keyword">NOT</span>] <span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-operator">|</span> &#123; <span class="hljs-keyword">CONTAINS</span> <span class="hljs-keyword">SQL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span> <span class="hljs-keyword">SQL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">READS</span> <span class="hljs-keyword">SQL</span> DATA <span class="hljs-operator">|</span> <span class="hljs-keyword">MODIFIES</span> <span class="hljs-keyword">SQL</span> DATA &#125;<br><span class="hljs-operator">|</span> <span class="hljs-keyword">SQL</span> SECURITY &#123; DEFINER <span class="hljs-operator">|</span> INVOKER &#125;<br><span class="hljs-operator">|</span> COMMENT <span class="hljs-string">&#x27;string&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>LANGUAGE SQL ：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</p></li><li><p>[NOT] DETERMINISTIC ：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定 的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定 的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</p></li><li><p>{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } ：指明子程序使 用SQL语句的限制。</p><ul><li>CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li><li>NO SQL表示当前存储过程的子程序中不包含任何SQL语句； </li><li>READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句； </li><li>MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。 </li><li>默认情况下，系统会指定为CONTAINS SQL。</li></ul></li><li><p>SQL SECURITY { DEFINER | INVOKER } ：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。</p><ul><li>DEFINER 表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li><li>INVOKER 表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li></ul></li><li><p>COMMENT ‘string’ ：注释信息，可以用来描述存储过程。</p></li></ul><p>4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span> <span class="hljs-keyword">BEGIN</span>…<span class="hljs-keyword">END</span>：<span class="hljs-keyword">BEGIN</span>…<span class="hljs-keyword">END</span> 中间包含了多个语句，每个语句都以（;）号为结束符。<br><span class="hljs-number">2.</span> <span class="hljs-keyword">DECLARE</span>：<span class="hljs-keyword">DECLARE</span> 用来声明变量，使用的位置在于 <span class="hljs-keyword">BEGIN</span>…<span class="hljs-keyword">END</span> 语句中间，而且需要在其他语句使用之前进<br>行变量的声明。<br><span class="hljs-number">3.</span> <span class="hljs-keyword">SET</span>：赋值语句，用于对变量进行赋值。<br><span class="hljs-number">4.</span> <span class="hljs-keyword">SELECT</span>… <span class="hljs-keyword">INTO</span>：把从数据表中查询的结果存放到变量中，也就是为变量赋值。<br></code></pre></td></tr></table></figure><p>5、需要设置新的结束标记</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER 新的结束标记<br></code></pre></td></tr></table></figure><p>因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用 DELIMITER改变存储过程的结束符。</p><p>比如：“DELIMITER &#x2F;&#x2F;”语句的作用是将MySQL的结束符设置为&#x2F;&#x2F;，并以“END &#x2F;&#x2F;”结束存储过程。存储过程定 义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。</p><p>当使用DELIMITER命令时，应该避免使用反斜杠（‘\’）字符，因为反斜线是MySQL的转义字符。 </p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名(<span class="hljs-keyword">IN</span><span class="hljs-operator">|</span><span class="hljs-keyword">OUT</span><span class="hljs-operator">|</span><span class="hljs-keyword">INOUT</span> 参数名 参数类型,...)<br>[characteristics ...]<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">sql</span>语句<span class="hljs-number">1</span>;<br><span class="hljs-keyword">sql</span>语句<span class="hljs-number">2</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br></code></pre></td></tr></table></figure><h3 id="2-代码举例"><a href="#2-代码举例" class="headerlink" title="2)  代码举例"></a>2)  代码举例</h3><p>举例1：创建存储过程select_all_data()，查看 emps 表的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> select_all_data()<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emps;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> avg_employee_salary ()<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">AS</span> avg_salary <span class="hljs-keyword">FROM</span> emps;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h2 id="3-调用存储过程"><a href="#3-调用存储过程" class="headerlink" title="3. 调用存储过程"></a>3. 调用存储过程</h2><h3 id="1-调用格式"><a href="#1-调用格式" class="headerlink" title="1) 调用格式"></a>1) 调用格式</h3><p>存储过程有多种调用方法。存储过程必须使用CALL语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CALL</span> 存储过程名(实参列表)<br></code></pre></td></tr></table></figure><p><strong>格式：</strong></p><p>1、调用in模式的参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CALL</span> sp1(<span class="hljs-string">&#x27;值&#x27;</span>);<br></code></pre></td></tr></table></figure><p>2、调用out模式的参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@name</span>;<br><span class="hljs-keyword">CALL</span> sp1(<span class="hljs-variable">@name</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@name</span>;<br></code></pre></td></tr></table></figure><p>3、调用inout模式的参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@name</span><span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">CALL</span> sp1(<span class="hljs-variable">@name</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@name</span>;<br></code></pre></td></tr></table></figure><h3 id="2-代码举例-1"><a href="#2-代码举例-1" class="headerlink" title="2) 代码举例"></a>2) 代码举例</h3><p><strong>举例1：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER  $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> CountProc(<span class="hljs-keyword">IN</span> sid <span class="hljs-type">INT</span>,<span class="hljs-keyword">OUT</span> num <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">INTO</span> num <span class="hljs-keyword">FROM</span> fruits<br><span class="hljs-keyword">WHERE</span> s_id <span class="hljs-operator">=</span> sid; <br><span class="hljs-keyword">END</span> $<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CALL</span> CountProc (<span class="hljs-number">101</span>, <span class="hljs-variable">@num</span>);<br></code></pre></td></tr></table></figure><p>查看返回结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@num</span>;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>创建存储过程，实现累加运算，计算 1+2+…+n 等于多少。具体的代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> `add_num`(<span class="hljs-keyword">IN</span> n <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span>; <br><span class="hljs-keyword">DECLARE</span> sum <span class="hljs-type">INT</span>;<br><span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">SET</span> sum <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>WHILE i <span class="hljs-operator">&lt;=</span> n DO<br><span class="hljs-keyword">SET</span> sum <span class="hljs-operator">=</span> sum <span class="hljs-operator">+</span> i;<br><span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">END</span> WHILE;<br><span class="hljs-keyword">SELECT</span> sum;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>直接使用 CALL add_num(50); 即可。这里我传入的参数为 50，也就是统计 1+2+…+50 的积累之和。</p><h3 id="3-如何调试"><a href="#3-如何调试" class="headerlink" title="3) 如何调试"></a>3) 如何调试</h3><ul><li>在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。</li><li>调试 成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样 逐步推进 ，就可以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独 调试。</li></ul><h2 id="4-存储函数的使用"><a href="#4-存储函数的使用" class="headerlink" title="4. 存储函数的使用"></a>4. 存储函数的使用</h2><h3 id="1-语法分析-1"><a href="#1-语法分析-1" class="headerlink" title="1) 语法分析"></a>1) 语法分析</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等</p><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> 函数名(参数名 参数类型,...)<br><span class="hljs-keyword">RETURNS</span> 返回值类型<br>[characteristics ...]<br><span class="hljs-keyword">BEGIN</span><br>函数体 #函数体中肯定有 <span class="hljs-keyword">RETURN</span> 语句<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><ul><li><p>说明：</p><ul><li><p>1、参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。 </p></li><li><p>2、RETURNS type 语句表示函数返回数据的类型； RETURNS子句只能对FUNCTION做指定，对函数而言这是 <strong>强制</strong> 的。它用来指定函数的返回类型，而且函 数体必须包含一个 RETURN value 语句。 </p></li><li><p>3、characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。 </p></li><li><p>4、函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略 BEGIN…END。</p></li></ul></li></ul><h3 id="2-调用存储函数"><a href="#2-调用存储函数" class="headerlink" title="2) 调用存储函数"></a>2) 调用存储函数</h3><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是 用户自己定义 的，而内部函数是MySQL 的 开发者定义 的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 函数名(实参列表)<br></code></pre></td></tr></table></figure><h3 id="3-代码举例"><a href="#3-代码举例" class="headerlink" title="3) 代码举例"></a>3) 代码举例</h3><p><strong>举例1：</strong></p><p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> email_by_name()<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>)<br><span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">CONTAINS</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">RETURN</span> (<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>);<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> email_by_name();<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><p>创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型 为字符串型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> email_by_id(emp_id <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>)<br><span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">CONTAINS</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">RETURN</span> (<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id);<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@emp</span>_id <span class="hljs-operator">=</span> <span class="hljs-number">102</span>;<br><span class="hljs-keyword">SELECT</span> email_by_id(<span class="hljs-variable">@emp</span>_id);<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>若在创建存储函数中报错“ you might want to use the less safe log_bin_trust_function_creators variable ”，有两种处理方法：</p><ul><li><p>方式1：</p><p>加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}”</p></li><li><p>方式2：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> log_bin_trust_function_creators <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="4-对比存储函数与存储过程"><a href="#4-对比存储函数与存储过程" class="headerlink" title="4) 对比存储函数与存储过程"></a>4) 对比存储函数与存储过程</h3><table><thead><tr><th></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td>存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>理解为有0个或多个</td><td>一般用于更新</td></tr><tr><td>存储函数</td><td>FUNCTION</td><td>SELECT 函数 ()</td><td>只能是一个</td><td>一般用于查询结果为一个值并返回时</td></tr></tbody></table><p>此外，<strong>存储函数可以放在查询语句中使用，存储过程不行</strong>。反之，存储过程的功能更加强大，包括能够 执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p><h2 id="5-存储过程和函数的查看、修改、删除"><a href="#5-存储过程和函数的查看、修改、删除" class="headerlink" title="5. 存储过程和函数的查看、修改、删除"></a>5. 存储过程和函数的查看、修改、删除</h2><h3 id="1-查看"><a href="#1-查看" class="headerlink" title="1) 查看"></a>1) 查看</h3><p> 创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p><p>MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查 看，也可直接从系统的information_schema数据库中查询。这里介绍3种方法。</p><ol><li>使用SHOW CREATE语句查看存储过程和函数的创建信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> &#123;<span class="hljs-keyword">PROCEDURE</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">FUNCTION</span>&#125; 存储过程名或函数名<br></code></pre></td></tr></table></figure><ol start="2"><li>使用SHOW STATUS语句查看存储过程和函数的状态信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> &#123;<span class="hljs-keyword">PROCEDURE</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">FUNCTION</span>&#125; STATUS [<span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;pattern&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="3"><li>从information_schema.Routines表中查看存储过程和函数的信息</li></ol><p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。其基本语法形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.Routines<br><span class="hljs-keyword">WHERE</span> ROUTINE_NAME<span class="hljs-operator">=</span><span class="hljs-string">&#x27;存储过程或函数的名&#x27;</span> [<span class="hljs-keyword">AND</span> ROUTINE_TYPE <span class="hljs-operator">=</span> &#123;<span class="hljs-string">&#x27;PROCEDURE|FUNCTION&#x27;</span>&#125;];<br></code></pre></td></tr></table></figure><p>说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来 指明查询的是存储过程还是函数。</p><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2) 修改"></a>2) 修改</h3><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> &#123;<span class="hljs-keyword">PROCEDURE</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">FUNCTION</span>&#125; 存储过程或函数的名 [characteristic ...]<br></code></pre></td></tr></table></figure><p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">&#123; <span class="hljs-keyword">CONTAINS</span> <span class="hljs-keyword">SQL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span> <span class="hljs-keyword">SQL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">READS</span> <span class="hljs-keyword">SQL</span> DATA <span class="hljs-operator">|</span> <span class="hljs-keyword">MODIFIES</span> <span class="hljs-keyword">SQL</span> DATA &#125;<br><span class="hljs-operator">|</span> <span class="hljs-keyword">SQL</span> SECURITY &#123; DEFINER <span class="hljs-operator">|</span> INVOKER &#125;<br><span class="hljs-operator">|</span> COMMENT <span class="hljs-string">&#x27;string&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>CONTAINS SQL ，表示子程序包含SQL语句，但不包含读或写数据的语句。 </p></li><li><p>NO SQL ，表示子程序中不包含SQL语句。 </p></li><li><p>READS SQL DATA ，表示子程序中包含读数据的语句。 </p></li><li><p>MODIFIES SQL DATA ，表示子程序中包含写数据的语句。 </p></li><li><p>SQL SECURITY { DEFINER | INVOKER } ，指明谁有权限来执行。 </p><ul><li>DEFINER ，表示只有定义者自己才能够执行。 </li><li>INVOKER ，表示调用者可以执行。</li></ul></li><li><p>COMMENT ‘string’ ，表示注释信息。</p></li></ul><blockquote><p>修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两 个语句的结构是一样的，语句中的所有参数也是一样的。</p></blockquote><h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3) 删除"></a>3) 删除</h3><p>删除存储过程和函数，可以使用DROP语句，其语法结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> &#123;<span class="hljs-keyword">PROCEDURE</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">FUNCTION</span>&#125; [IF <span class="hljs-keyword">EXISTS</span>] 存储过程或函数的名<br></code></pre></td></tr></table></figure><h2 id="6-关于存储过程使用的争议"><a href="#6-关于存储过程使用的争议" class="headerlink" title="6. 关于存储过程使用的争议"></a>6. 关于存储过程使用的争议</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1) 优点"></a>1) 优点</h3><p>1、<strong>存储过程可以一次编译多次使用</strong>。存储过程只在创建时进行编译，之后的使用都不需要重新编译， 这就提升了 SQL 的执行效率。</p><p>2、<strong>可以减少开发工作量</strong>。将代码封装成模块，实际上是编程的核心思想之一，这样可以把复杂的问题 拆解成不同的模块，然后模块之间可以 重复使用 ，在减少开发工作量的同时，还能保证代码的结构清 晰。 </p><p>3、<strong>存储过程的安全性强</strong>。我们在设定存储过程的时候可以设置对用户的使用权限 ，这样就和视图一样具有较强的安全性。 </p><p>4、<strong>可以减少网络传输量</strong>。因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。 </p><p>5、<strong>良好的封装性</strong>。在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接 多次数据库才能完成的操作，现在变成了一次存储过程，只需要 连接一次即可 。</p><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2) 缺点"></a>2) 缺点</h3><blockquote><p>阿里开发规范 【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></blockquote><p>1、<strong>可移植性差</strong>。存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过 程，在换成其他数据库时都需要重新编写。 </p><p>2、<strong>调试困难</strong>。只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。 </p><p>3、<strong>存储过程的版本管理很困难</strong>。比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发 软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。 </p><p>4、<strong>它不适合高并发的场景</strong>。高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护， 增加数据库的压力 ，显然就不适用了。</p><h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3) 小结"></a>3) 小结</h3><p>存储过程既方便，又有局限性。尽管不同的公司对存储过程的态度不一，但是对于我们开发人员来说， 不论怎样，掌握存储过程都是必备的技能之一。</p><hr><hr><h1 id="二、变量、流程控制与游标"><a href="#二、变量、流程控制与游标" class="headerlink" title="二、变量、流程控制与游标"></a>二、变量、流程控制与游标</h1><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。</p><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终 的结果数据。 </p><p>在 MySQL 数据库中，变量分为 <strong>系统变量</strong> 以及 <strong>用户自定义变量</strong> 。</p><h3 id="1-系统变量"><a href="#1-系统变量" class="headerlink" title="1) 系统变量"></a>1) 系统变量</h3><p><strong>系统变量分类</strong></p><ul><li><p>变量由系统定义，不是用户定义，属于服务器层面。启动MySQL服务，生成MySQL服务实例期间， MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是 编译MySQL时参数 的默认值，要么是 配置文件 （例如my.ini等）中的参数值。大家可以通过网址 <a href="https://dev.mysql.com/doc/refman/8.0/en/server-systemvariables.html">https://dev.mysql.com/doc/refman/8.0/en/server-systemvariables.html</a> 查看MySQL文档的系统变量。</p></li><li><p>系统变量分为<strong>全局系统变量</strong>（需要添加 global 关键字）以及<strong>会话系统变量</strong>（需要添加 session 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。如果不写，默认会话级别。静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p></li><li><p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。如下图：</p></li><li><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/MySQL/2.1.1.5cyr0hq2ej00.webp" alt="2"></p></li></ul><ul><li>全局系统变量针对于所有会话（连接）有效，但<strong>不能跨重启</strong></li><li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。 </li><li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</li></ul><p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p><p><strong>查看系统变量</strong></p><ul><li>查看所有或部分系统变量</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查看所有全局变量<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> variables ;<br>#查看所有会话变量<br><span class="hljs-keyword">SHOW</span> SESSION VARIABLES;<br>或<br><span class="hljs-keyword">SHOW</span> VARIABLES;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查看满足条件的部分系统变量。<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%标识符%&#x27;</span>;<br>#查看满足条件的部分会话变量<br><span class="hljs-keyword">SHOW</span> SESSION VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%标识符%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>查看指定系统变量</strong></p><ul><li><p>作为 MySQL 编码规范，MySQL 中的系统变量以 两个“@” 开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在， 则标记全局系统变量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查看指定的系统变量的值<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@global</span>.变量名;<br>#查看指定的会话变量的值<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@session</span>.变量名;<br>#或者<br><span class="hljs-keyword">SELECT</span> @@变量名;<br></code></pre></td></tr></table></figure></li></ul><p><strong>修改系统变量的值</strong></p><p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、 特征。具体方法：</p><p>方式1：修改MySQL 配置文件 ，继而修改MySQL系统变量的值（该方法需要重启MySQL服务） </p><p>方式2：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">#为某个系统变量赋值<br>#方式<span class="hljs-number">1</span>：<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@global</span>.变量名<span class="hljs-operator">=</span>变量值;<br>#方式<span class="hljs-number">2</span>：<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> 变量名<span class="hljs-operator">=</span>变量值;<br>#为某个会话变量赋值<br>#方式<span class="hljs-number">1</span>：<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.变量名<span class="hljs-operator">=</span>变量值;<br>#方式<span class="hljs-number">2</span>：<br><span class="hljs-keyword">SET</span> SESSION 变量名<span class="hljs-operator">=</span>变量值;<br></code></pre></td></tr></table></figure><h3 id="2-用户变量"><a href="#2-用户变量" class="headerlink" title="2) 用户变量"></a>2) 用户变量</h3><p><strong>用户变量分类</strong></p><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以一个“@” 开头。根据作用范围不同，又分为 <strong>会话用户变量</strong> 和 <strong>局部变量</strong> 。 </p><ul><li>会话用户变量：作用域和会话变量一样，只对 <strong>当前连接</strong> 会话有效。 </li><li>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在 存储过程和函数 中使用。</li></ul><p><strong>会话用户变量</strong></p><ul><li>变量的定义</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#方式<span class="hljs-number">1</span>：“<span class="hljs-operator">=</span>”或“:<span class="hljs-operator">=</span>”<br><span class="hljs-keyword">SET</span> @用户变量 <span class="hljs-operator">=</span> 值;<br><span class="hljs-keyword">SET</span> @用户变量 :<span class="hljs-operator">=</span> 值;<br>#方式<span class="hljs-number">2</span>：“:<span class="hljs-operator">=</span>” 或 <span class="hljs-keyword">INTO</span>关键字<br><span class="hljs-keyword">SELECT</span> @用户变量 :<span class="hljs-operator">=</span> 表达式 [<span class="hljs-keyword">FROM</span> 等子句];<br><span class="hljs-keyword">SELECT</span> 表达式 <span class="hljs-keyword">INTO</span> @用户变量 [<span class="hljs-keyword">FROM</span> 等子句];<br></code></pre></td></tr></table></figure><ul><li>查看用户变量的值 (查看、比较、运算等)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> @用户变量<br></code></pre></td></tr></table></figure><p><strong>局部变量</strong></p><p>定义：可以使用 declare 语句定义一个局部变量 </p><p>作用域：仅仅在定义它的 BEGIN … END 中有效 </p><p>位置：只能放在 BEGIN … END 中，而且只能放在第一句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span><br>#声明局部变量<br><span class="hljs-keyword">DECLARE</span> 变量名<span class="hljs-number">1</span> 变量数据类型 [<span class="hljs-keyword">DEFAULT</span> 变量默认值];<br><span class="hljs-keyword">DECLARE</span> 变量名<span class="hljs-number">2</span>,变量名<span class="hljs-number">3</span>,... 变量数据类型 [<span class="hljs-keyword">DEFAULT</span> 变量默认值];<br>#为局部变量赋值<br><span class="hljs-keyword">SET</span> 变量名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值;<br><span class="hljs-keyword">SELECT</span> 值 <span class="hljs-keyword">INTO</span> 变量名<span class="hljs-number">2</span> [<span class="hljs-keyword">FROM</span> 子句];<br>#查看局部变量的值<br><span class="hljs-keyword">SELECT</span> 变量<span class="hljs-number">1</span>,变量<span class="hljs-number">2</span>,变量<span class="hljs-number">3</span>;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><ol><li>定义变量</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> 变量名 类型 [<span class="hljs-keyword">default</span> 值]; # 如果没有<span class="hljs-keyword">DEFAULT</span>子句，初始值为<span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><ol start="2"><li>变量赋值</li></ol><ul><li><p>方式1：一般用于赋简单的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> 变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SET</span> 变量名:<span class="hljs-operator">=</span>值;<br></code></pre></td></tr></table></figure></li><li><p>方式2：一般用于赋表中的字段值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段名或表达式 <span class="hljs-keyword">INTO</span> 变量名 <span class="hljs-keyword">FROM</span> 表;<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>使用变量 (查看、比较、运算等)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 局部变量名;<br></code></pre></td></tr></table></figure><p>举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> set_value()<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> emp_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>);<br><span class="hljs-keyword">DECLARE</span> sal <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">SELECT</span> last_name, salary <span class="hljs-keyword">INTO</span> emp_name,sal<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">102</span>;<br><span class="hljs-keyword">SELECT</span> emp_name, sal;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#方式<span class="hljs-number">1</span>：使用用户变量<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@m</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@n</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@sum</span><span class="hljs-operator">=</span><span class="hljs-variable">@m</span><span class="hljs-operator">+</span><span class="hljs-variable">@n</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@sum</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">#方式<span class="hljs-number">2</span>：使用局部变量<br>DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> add_value()<br><span class="hljs-keyword">BEGIN</span><br>#局部变量<br><span class="hljs-keyword">DECLARE</span> m <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">DECLARE</span> n <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">DECLARE</span> SUM <span class="hljs-type">INT</span>;<br><span class="hljs-keyword">SET</span> SUM <span class="hljs-operator">=</span> m<span class="hljs-operator">+</span>n;<br><span class="hljs-keyword">SELECT</span> SUM;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>对比会话用户变量与局部变量</strong></p><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>会话用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><h2 id="2-定义条件与处理程序"><a href="#2-定义条件与处理程序" class="headerlink" title="2. 定义条件与处理程序"></a>2. 定义条件与处理程序</h2><blockquote><p><strong>定义条件</strong>是事先定义程序执行过程中可能遇到的问题， <strong>处理程序</strong> 定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p><p>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p></blockquote><h3 id="1-案例分析"><a href="#1-案例分析" class="headerlink" title="1) 案例分析"></a>1) 案例分析</h3><p>案例分析：创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> UpdateDataNoCondition()<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> email <span class="hljs-operator">=</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;aabbel&#x27;</span> <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CALL</span> UpdateDataNoCondition();<br>ERROR <span class="hljs-number">1048</span> (<span class="hljs-number">23000</span>): <span class="hljs-keyword">Column</span> <span class="hljs-string">&#x27;email&#x27;</span> cannot be <span class="hljs-keyword">null</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@x</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+</span><br><span class="hljs-operator">|</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件 和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑， 不再向下继续执行。</p><h3 id="2-定义条件"><a href="#2-定义条件" class="headerlink" title="2) 定义条件"></a>2) 定义条件</h3><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个 <strong>错误名字</strong> 和 指定的 <strong>错误条件</strong> 关联起来。这个名字可以随后被用在定义处理程序的<strong>declare handler</strong>语句中。</p><p>定义条件使用DECLARE语句，语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> 错误名称 <span class="hljs-keyword">CONDITION</span> <span class="hljs-keyword">FOR</span> 错误码（或错误条件）<br></code></pre></td></tr></table></figure><p>错误码的说明：</p><ul><li><strong>MySQL_error_code</strong> 和 <strong>sqlstate_value</strong> 都可以表示MySQL的错误。<ul><li>MySQL_error_code是数值类型错误代码。 </li><li>sqlstate_value是长度为5的字符串类型错误代码。</li></ul></li></ul><p>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。 </p><p>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value。</p><p>举例1：定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#使用MySQL_error_code<br><span class="hljs-keyword">DECLARE</span> Field_Not_Be_NULL <span class="hljs-keyword">CONDITION</span> <span class="hljs-keyword">FOR</span> <span class="hljs-number">1048</span>;<br>#使用sqlstate_value<br><span class="hljs-keyword">DECLARE</span> Field_Not_Be_NULL <span class="hljs-keyword">CONDITION</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SQLSTATE</span> <span class="hljs-string">&#x27;23000&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="3-定义处理程序"><a href="#3-定义处理程序" class="headerlink" title="3) 定义处理程序"></a>3) 定义处理程序</h3><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句 的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> 处理方式 HANDLER <span class="hljs-keyword">FOR</span> 错误类型 处理语句<br></code></pre></td></tr></table></figure><ul><li><strong>处理方式</strong>：处理方式有3个取值：CONTINUE、EXIT、UNDO。<ul><li>CONTINUE ：表示遇到错误不处理，继续执行。</li><li>EXIT ：表示遇到错误马上退出。</li><li>UNDO ：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li></ul></li><li><strong>错误类型</strong>（即条件）可以有如下取值：<ul><li>SQLSTATE ‘字符串错误码’ ：表示长度为5的sqlstate_value类型的错误代码； </li><li>MySQL_error_code ：匹配数值类型错误代码； </li><li><strong>错误名称</strong> ：表示DECLARE … CONDITION定义的错误条件名称。 </li><li>SQLWARNING ：匹配所有以01开头的SQLSTATE错误代码； </li><li>NOT FOUND ：匹配所有以02开头的SQLSTATE错误代码； </li><li>SQLEXCEPTION ：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li></ul></li><li>处理语句：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是 像“ SET 变量 &#x3D; 值 ”这样的简单语句，也可以是使用 BEGIN … END 编写的复合语句。</li></ul><p>定义处理程序的几种方式，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">#方法<span class="hljs-number">1</span>：捕获sqlstate_value<br><span class="hljs-keyword">DECLARE</span> CONTINUE HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SQLSTATE</span> <span class="hljs-string">&#x27;42S02&#x27;</span> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NO_SUCH_TABLE&#x27;</span>;<br>#方法<span class="hljs-number">2</span>：捕获mysql_error_value<br><span class="hljs-keyword">DECLARE</span> CONTINUE HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-number">1146</span> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NO_SUCH_TABLE&#x27;</span>;<br>#方法<span class="hljs-number">3</span>：先定义条件，再调用<br><span class="hljs-keyword">DECLARE</span> no_such_table <span class="hljs-keyword">CONDITION</span> <span class="hljs-keyword">FOR</span> <span class="hljs-number">1146</span>;<br><span class="hljs-keyword">DECLARE</span> CONTINUE HANDLER <span class="hljs-keyword">FOR</span> NO_SUCH_TABLE <span class="hljs-keyword">SET</span> <span class="hljs-variable">@info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NO_SUCH_TABLE&#x27;</span>;<br>#方法<span class="hljs-number">4</span>：使用<span class="hljs-keyword">SQLWARNING</span><br><span class="hljs-keyword">DECLARE</span> EXIT HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SQLWARNING</span> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ERROR&#x27;</span>;<br>#方法<span class="hljs-number">5</span>：使用<span class="hljs-keyword">NOT</span> FOUND<br><span class="hljs-keyword">DECLARE</span> EXIT HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">NOT</span> FOUND <span class="hljs-keyword">SET</span> <span class="hljs-variable">@info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NO_SUCH_TABLE&#x27;</span>;<br>#方法<span class="hljs-number">6</span>：使用<span class="hljs-keyword">SQLEXCEPTION</span><br><span class="hljs-keyword">DECLARE</span> EXIT HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SQLEXCEPTION</span> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ERROR&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-案例解决"><a href="#4-案例解决" class="headerlink" title="4) 案例解决"></a>4) 案例解决</h3><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行 CONTINUE操作，并且将@proc_value的值设置为-1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> UpdateDataNoCondition()<br><span class="hljs-keyword">BEGIN</span><br>    #定义处理程序<br>    <span class="hljs-keyword">DECLARE</span> CONTINUE HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-number">1048</span> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@proc</span>_value <span class="hljs-operator">=</span> <span class="hljs-number">-1</span>;  <br>    <span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> email <span class="hljs-operator">=</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br>    <span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;aabbel&#x27;</span> <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br>    <span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h2 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3. 流程控制"></a>3. 流程控制</h2><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控 制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：</p><ul><li>顺序结构 ：程序从上往下依次执行 </li><li>分支结构 ：程序按条件进行选择执行，从两条或多条路径中选择一条执行 </li><li>循环结构 ：程序满足一定条件下，重复执行一组语句</li></ul><p>针对于MySQL 的流程控制语句主要有 3 类。注意：<strong>只能用于存储程序</strong>。</p><ul><li>条件判断语句 ：IF 语句和 CASE 语句 </li><li>循环语句 ：LOOP、WHILE 和 REPEAT 语句 </li><li>跳转语句 ：ITERATE 和 LEAVE 语句</li></ul><h3 id="1-分支结构之-IF"><a href="#1-分支结构之-IF" class="headerlink" title="1) 分支结构之 IF"></a>1) 分支结构之 IF</h3><ul><li>IF 语句的语法结构是：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF 表达式<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 操作<span class="hljs-number">1</span><br>[ELSEIF 表达式<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 操作<span class="hljs-number">2</span>]……<br>[<span class="hljs-keyword">ELSE</span> 操作N]<br><span class="hljs-keyword">END</span> IF<br></code></pre></td></tr></table></figure><p>根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。</p><ul><li><p>特点：① 不同的表达式对应不同的操作 ② 使用在begin end中</p></li><li><p>举例1：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF val <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;val is null&#x27;</span>;<br><span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;val is not null&#x27;</span>;<br><span class="hljs-keyword">END</span> IF;<br></code></pre></td></tr></table></figure><ul><li>举例2：声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> update_salary_by_eid1(<span class="hljs-keyword">IN</span> emp_id <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> emp_salary <span class="hljs-keyword">DOUBLE</span>;<br>    <span class="hljs-keyword">DECLARE</span> hire_year <span class="hljs-keyword">DOUBLE</span>;<br>    <span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">INTO</span> emp_salary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date)<span class="hljs-operator">/</span><span class="hljs-number">365</span> <span class="hljs-keyword">INTO</span> hire_year<br>    <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    IF emp_salary <span class="hljs-operator">&lt;</span> <span class="hljs-number">8000</span> <span class="hljs-keyword">AND</span> hire_year <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span><br>    <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary <span class="hljs-operator">=</span> salary <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="2-分支结构之-CASE"><a href="#2-分支结构之-CASE" class="headerlink" title="2) 分支结构之 CASE"></a>2) 分支结构之 CASE</h3><ul><li>CASE 语句的语法结构1：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#情况一：类似于switch<br><span class="hljs-keyword">CASE</span> 表达式<br><span class="hljs-keyword">WHEN</span> 值<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 结果<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span>(如果是语句，需要加分号)<br><span class="hljs-keyword">WHEN</span> 值<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 结果<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span>(如果是语句，需要加分号)<br>...<br><span class="hljs-keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)<br><span class="hljs-keyword">END</span> [<span class="hljs-keyword">case</span>]（如果是放在<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>中需要加上<span class="hljs-keyword">case</span>，如果放在<span class="hljs-keyword">select</span>后面不需要）<br></code></pre></td></tr></table></figure><ul><li>CASE 语句的语法结构2：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#情况二：类似于多重if<br><span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 结果<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span>(如果是语句，需要加分号)<br><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 结果<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span>(如果是语句，需要加分号)<br>...<br><span class="hljs-keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)<br><span class="hljs-keyword">END</span> [<span class="hljs-keyword">case</span>]（如果是放在<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>中需要加上<span class="hljs-keyword">case</span>，如果放在<span class="hljs-keyword">select</span>后面不需要）<br></code></pre></td></tr></table></figure><ul><li>举例1：使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> val<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;val is 1&#x27;</span>;<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;val is 2&#x27;</span>;<br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;val is not 1 or 2&#x27;</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br></code></pre></td></tr></table></figure><ul><li>举例2：声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工 薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例 为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> update_salary_by_eid4(<span class="hljs-keyword">IN</span> emp_id <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> emp_sal <span class="hljs-keyword">DOUBLE</span>;<br>    <span class="hljs-keyword">DECLARE</span> bonus <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">INTO</span> emp_sal <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">SELECT</span> commission_pct <span class="hljs-keyword">INTO</span> bonus <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> emp_sal<span class="hljs-operator">&lt;</span><span class="hljs-number">9000</span><br>    <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span><span class="hljs-number">9000</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">WHEN</span> emp_sal<span class="hljs-operator">&lt;</span><span class="hljs-number">10000</span> <span class="hljs-keyword">AND</span> bonus <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br>    <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> commission_pct<span class="hljs-operator">=</span><span class="hljs-number">0.01</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">ELSE</span><br>    <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><ul><li>举例3：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的 入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年， 薪资涨300；如果是4年，薪资涨400；其他的涨薪500。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> update_salary_by_eid5(<span class="hljs-keyword">IN</span> emp_id <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> emp_sal <span class="hljs-keyword">DOUBLE</span>;<br>    <span class="hljs-keyword">DECLARE</span> hire_year <span class="hljs-keyword">DOUBLE</span>;<br>    <span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">INTO</span> emp_sal <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">SELECT</span> ROUND(DATEDIFF(CURDATE(),hire_date)<span class="hljs-operator">/</span><span class="hljs-number">365</span>) <span class="hljs-keyword">INTO</span> hire_year <span class="hljs-keyword">FROM</span> employees<br>    <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">CASE</span> hire_year<br>        <span class="hljs-keyword">WHEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">50</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>        <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>        <span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">200</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>        <span class="hljs-keyword">WHEN</span> <span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">300</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>        <span class="hljs-keyword">WHEN</span> <span class="hljs-number">4</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">400</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>        <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> emp_id;<br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-循环结构之LOOP"><a href="#3-循环结构之LOOP" class="headerlink" title="3) 循环结构之LOOP"></a>3) 循环结构之LOOP</h3><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子 句），跳出循环过程。</p><p>LOOP语句的基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">[loop_label:] LOOP<br>循环执行的语句<br><span class="hljs-keyword">END</span> LOOP [loop_label]<br></code></pre></td></tr></table></figure><p>其中，loop_label表示LOOP语句的标注名称，该参数可以省略。</p><p>举例1：使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> id <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>add_loop:LOOP<br>    <span class="hljs-keyword">SET</span> id <span class="hljs-operator">=</span> id <span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>    IF id <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10</span> <span class="hljs-keyword">THEN</span> LEAVE add_loop;<br>    <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span> LOOP add_loop;<br></code></pre></td></tr></table></figure><p>举例2：当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程 “update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为 原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> update_salary_loop(<span class="hljs-keyword">OUT</span> num <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> avg_salary <span class="hljs-keyword">DOUBLE</span>;<br><span class="hljs-keyword">DECLARE</span> loop_count <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_salary <span class="hljs-keyword">FROM</span> employees;<br>label_loop:LOOP<br>        IF avg_salary <span class="hljs-operator">&gt;=</span> <span class="hljs-number">12000</span> <span class="hljs-keyword">THEN</span> LEAVE label_loop;<br>        <span class="hljs-keyword">END</span> IF;<br>        <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary <span class="hljs-operator">=</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.1</span>;<br>        <span class="hljs-keyword">SET</span> loop_count <span class="hljs-operator">=</span> loop_count <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_salary <span class="hljs-keyword">FROM</span> employees;<br>    <span class="hljs-keyword">END</span> LOOP label_loop;<br>    <span class="hljs-keyword">SET</span> num <span class="hljs-operator">=</span> loop_count;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="4-循环结构之WHILE"><a href="#4-循环结构之WHILE" class="headerlink" title="4) 循环结构之WHILE"></a>4) 循环结构之WHILE</h3><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如 果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">[while_label:] WHILE 循环条件 DO<br>循环体<br><span class="hljs-keyword">END</span> WHILE [while_label];<br></code></pre></td></tr></table></figure><p>while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直 至循环条件为假，退出循环。</p><ul><li>举例1：WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> test_while()<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>    WHILE i <span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span> DO<br>    <span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">END</span> WHILE;<br>    <span class="hljs-keyword">SELECT</span> i;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br>#调用<br><span class="hljs-keyword">CALL</span> test_while();<br></code></pre></td></tr></table></figure><ul><li>举例2：市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程 “update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降 为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> update_salary_while(<span class="hljs-keyword">OUT</span> num <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> avg_sal <span class="hljs-keyword">DOUBLE</span> ;<br>    <span class="hljs-keyword">DECLARE</span> while_count <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_sal <span class="hljs-keyword">FROM</span> employees;<br>    WHILE avg_sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">5000</span> DO<br>        <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary <span class="hljs-operator">=</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">0.9</span>;<br>        <span class="hljs-keyword">SET</span> while_count <span class="hljs-operator">=</span> while_count <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_sal <span class="hljs-keyword">FROM</span> employees;<br>    <span class="hljs-keyword">END</span> WHILE;<br>    <span class="hljs-keyword">SET</span> num <span class="hljs-operator">=</span> while_count;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="5-循环结构之REPEAT"><a href="#5-循环结构之REPEAT" class="headerlink" title="5) 循环结构之REPEAT"></a>5) 循环结构之REPEAT</h3><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。</p><p>REPEAT语句的基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[repeat_label:] REPEAT<br>循环体的语句<br>UNTIL 结束循环的条件表达式<br><span class="hljs-keyword">END</span> REPEAT [repeat_label]<br></code></pre></td></tr></table></figure><p>repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至 expr_condition为真。</p><p>举例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> test_repeat()<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>    REPEAT<br>    <span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>    UNTIL i <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10</span><br>    <span class="hljs-keyword">END</span> REPEAT;<br>    <span class="hljs-keyword">SELECT</span> i;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2：当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程 “update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨 为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> update_salary_repeat(<span class="hljs-keyword">OUT</span> num <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> avg_sal <span class="hljs-keyword">DOUBLE</span> ;<br>    <span class="hljs-keyword">DECLARE</span> repeat_count <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_sal <span class="hljs-keyword">FROM</span> employees;<br>    REPEAT<br>    <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary <span class="hljs-operator">=</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.15</span>;<br>    <span class="hljs-keyword">SET</span> repeat_count <span class="hljs-operator">=</span> repeat_count <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_sal <span class="hljs-keyword">FROM</span> employees;<br>    UNTIL avg_sal <span class="hljs-operator">&gt;=</span> <span class="hljs-number">13000</span><br>    <span class="hljs-keyword">END</span> REPEAT;<br>    <span class="hljs-keyword">SET</span> num <span class="hljs-operator">=</span> repeat_count;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>对比三种循环结构：</strong></p><ol><li><p>这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名称。 </p></li><li><p>LOOP：一般用于实现简单的”死”循环 WHILE：先判断后执行 </p></li><li><p>REPEAT：先执行后判断，无条件至少执行一次</p></li></ol><h3 id="6-跳转语句之LEAVE语句"><a href="#6-跳转语句之LEAVE语句" class="headerlink" title="6) 跳转语句之LEAVE语句"></a>6) 跳转语句之LEAVE语句</h3><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出 程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p><p>基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">LEAVE 标记名<br></code></pre></td></tr></table></figure><p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p><p>举例1：创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在 BEGIN…END中使用IF语句判断num参数的值。</p><p>如果num&lt;&#x3D;0，则使用LEAVE语句退出BEGIN…END； 如果num&#x3D;1，则查询“employees”表的平均薪资； 如果num&#x3D;2，则查询“employees”表的最低薪资； 如果num&gt;2，则查询“employees”表的最高薪资。</p><p>IF语句结束后查询“employees”表的总人数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> leave_begin(<span class="hljs-keyword">IN</span> num <span class="hljs-type">INT</span>)<br>    begin_label: <span class="hljs-keyword">BEGIN</span><br>        IF num<span class="hljs-operator">&lt;=</span><span class="hljs-number">0</span><br>        <span class="hljs-keyword">THEN</span> LEAVE begin_label;<br>        ELSEIF num<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>        <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">FROM</span> employees;<br>        ELSEIF num<span class="hljs-operator">=</span><span class="hljs-number">2</span><br>        <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-keyword">FROM</span> employees;<br>        <span class="hljs-keyword">ELSE</span><br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary) <span class="hljs-keyword">FROM</span> employees;<br>        <span class="hljs-keyword">END</span> IF;<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> employees;<br>    <span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2： 当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明 OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于10000，并统计循环次数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> leave_while(<span class="hljs-keyword">OUT</span> num <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> avg_sal <span class="hljs-keyword">DOUBLE</span>;#记录平均工资<br>    <span class="hljs-keyword">DECLARE</span> while_count <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>; #记录循环次数<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_sal <span class="hljs-keyword">FROM</span> employees; #① 初始化条件<br>    while_label:WHILE <span class="hljs-literal">TRUE</span> DO #② 循环条件<br>    #③ 循环体<br>    IF avg_sal <span class="hljs-operator">&lt;=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span><br>    LEAVE while_label;<br>    <span class="hljs-keyword">END</span> IF;<br>    <span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> salary <span class="hljs-operator">=</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">0.9</span>;<br>    <span class="hljs-keyword">SET</span> while_count <span class="hljs-operator">=</span> while_count <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>    #④ 迭代条件<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">INTO</span> avg_sal <span class="hljs-keyword">FROM</span> employees;<br>    <span class="hljs-keyword">END</span> WHILE;<br>    #赋值<br>    <span class="hljs-keyword">SET</span> num <span class="hljs-operator">=</span> while_count;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="7-跳转语句之ITERATE语句"><a href="#7-跳转语句之ITERATE语句" class="headerlink" title="7) 跳转语句之ITERATE语句"></a>7) 跳转语句之ITERATE语句</h3><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。</p><p>语句基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ITERATE label<br></code></pre></td></tr></table></figure><p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p><p>举例： 定义局部变量num，初始值为0。循环结构中执行num + 1操作。</p><ul><li>如果num &lt; 10，则继续执行循环；</li><li>如果num &gt; 15，则退出循环结构；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> test_iterate()<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> num <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>    my_loop:LOOP<br>    <span class="hljs-keyword">SET</span> num <span class="hljs-operator">=</span> num <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>        IF num <span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span><br>        <span class="hljs-keyword">THEN</span> ITERATE my_loop;<br>        ELSEIF num <span class="hljs-operator">&gt;</span> <span class="hljs-number">15</span><br>        <span class="hljs-keyword">THEN</span> LEAVE my_loop;<br>        <span class="hljs-keyword">END</span> IF;<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;MySQL&#x27;</span>;<br>    <span class="hljs-keyword">END</span> LOOP my_loop;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h2 id="4-游标"><a href="#4-游标" class="headerlink" title="4. 游标"></a>4. 游标</h2><h3 id="1-什么是游标（或光标）"><a href="#1-什么是游标（或光标）" class="headerlink" title="1)  什么是游标（或光标）"></a>1)  什么是游标（或光标）</h3><ul><li><p>虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录， 但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是随意定位到某一 条记录 ，并对记录的数据进行处理。</p></li><li><p>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。游标让 SQL 这种面向集合的语言有了面向过程开发的能力。</p></li><li><p>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标 <strong>充当了</strong> 指针的作用 ，我们可以通过操作游标来对数据行进行操作。</p></li><li><p>MySQL中游标可以在存储过程和函数中使用。</p></li></ul><h3 id="2-使用游标步骤"><a href="#2-使用游标步骤" class="headerlink" title="2) 使用游标步骤"></a>2) 使用游标步骤</h3><ul><li><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。 </p></li><li><p>如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p></li><li><p>cursor：游标</p></li></ul><p><strong>第一步，声明游标</strong></p><p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> cursor_name <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> select_statement; <br></code></pre></td></tr></table></figure><p>上面这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。</p><p>如果是用 Oracle 或者 PostgreSQL，需要写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> cursor_name <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">IS</span> select_statement;<br></code></pre></td></tr></table></figure><p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是 SELECT 语句，返回一个用于创建游标的结果集。</p><p>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> cur_emp <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br><span class="hljs-keyword">SELECT</span> employee_id,salary <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p><strong>第二步，打开游标</strong></p><p>打开游标的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">OPEN</span> cursor_name<br></code></pre></td></tr></table></figure><p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的 <strong>逐条读取</strong> 结果集中的记录做准备。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">OPEN</span> cur_emp;<br></code></pre></td></tr></table></figure><p><strong>第三步，使用游标（从游标中取得数据）</strong></p><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FETCH</span> cursor_name <span class="hljs-keyword">INTO</span> var_name [, var_name] ...<br></code></pre></td></tr></table></figure><p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。</p><p>注意：var_name必须在声明游标之前就定义好。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FETCH</span> cur_emp <span class="hljs-keyword">INTO</span> emp_id, emp_sal ;<br></code></pre></td></tr></table></figure><p>注意：<strong>游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致</strong>，否则，在存储过程执行的时 候，MySQL 会提示错误。</p><p><strong>第四步，关闭游标</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CLOSE</span> cursor_name<br></code></pre></td></tr></table></figure><p>有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会 占用系统资源 ，如果不及时关闭，游标会一直保持到存储过程结束，影响系统运行的效率。而关闭游标 的操作，会释放游标占用的系统资源。</p><p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CLOSE</span> cur_emp;<br></code></pre></td></tr></table></figure><h3 id="3-举例"><a href="#3-举例" class="headerlink" title="3) 举例"></a>3) 举例</h3><p>创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明 OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> get_count_by_limit_total_salary(<span class="hljs-keyword">IN</span> limit_total_salary <span class="hljs-keyword">DOUBLE</span>, <span class="hljs-keyword">OUT</span> total_count <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> sum_salary <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>; # 记录累加的总工资<br><span class="hljs-keyword">DECLARE</span> cursor_salary <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>; # 记录某一个工资值<br><span class="hljs-keyword">DECLARE</span> emp_count <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>; # 记录循环个数<br># 定义游标<br><span class="hljs-keyword">DECLARE</span> emp_cursor <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span>;<br># 打开游标<br><span class="hljs-keyword">OPEN</span> emp_cursor;<br><br>REPEAT<br># 使用游标(从游标中获取数据)<br><span class="hljs-keyword">FETCH</span> emp_cursor <span class="hljs-keyword">INTO</span> cursor_salary;<br><span class="hljs-keyword">SET</span> sum_salary <span class="hljs-operator">=</span> sum_salary <span class="hljs-operator">+</span> cursor_salary;<br><span class="hljs-keyword">SET</span> emp_count <span class="hljs-operator">=</span> emp_count <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>UNTIL sum_salary <span class="hljs-operator">&gt;=</span> limit_total_salary<br><span class="hljs-keyword">END</span> REPEAT;<br><span class="hljs-keyword">set</span> total_count <span class="hljs-operator">=</span> emp_count;<br># 关闭游标<br><span class="hljs-keyword">CLOSE</span> emp_cursor;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER;<br></code></pre></td></tr></table></figure><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4) 小结"></a>4) 小结</h3><ul><li><p>游标是 MySQL 的一个重要的功能，为 逐条读取 结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。 </p></li><li><p>但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行 <strong>加锁</strong> ，这样在业务并发量大 的时候，不仅会影响业务之间的效率，还会 消耗系统资源 ，造成内存不足，这是因为游标是在内存中进行的处理。 </p></li><li><p>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p></li></ul><h2 id="补充：MySQL-8-0的新特性—全局变量的持久化"><a href="#补充：MySQL-8-0的新特性—全局变量的持久化" class="headerlink" title="补充：MySQL 8.0的新特性—全局变量的持久化"></a>补充：MySQL 8.0的新特性—全局变量的持久化</h2><p>在MySQL数据库中，全局变量可以通过SET GLOBAL语句来设置。例如，设置服务器语句超时的限制，可 以通过设置系统变量max_execution_time来实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> MAX_EXECUTION_TIME<span class="hljs-operator">=</span><span class="hljs-number">2000</span>;<br></code></pre></td></tr></table></figure><p>使用SET GLOBAL语句设置的变量值只会 临时生效 。 数据库重启 后，服务器又会从MySQL配置文件中读取 变量的默认值。 MySQL 8.0版本新增了 SET PERSIST 命令。例如，设置服务器的最大连接数为1000：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> PERSIST <span class="hljs-keyword">global</span> max_connections <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p>MySQL会将该命令的配置保存到数据目录下的 mysqld-auto.cnf 文件中，下次启动时会读取该文件，用其中的配置来覆盖默认的配置文件。</p><hr><hr><h1 id="三、触发器"><a href="#三、触发器" class="headerlink" title="三、触发器"></a>三、触发器</h1><p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如 商品信息 和 库存信息 分 别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时 在库存表中添加一条库存记录。 </p><p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用 事务 包裹起来，确保这两个操 作成为一个 原子操作 ，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很 容易忘记其中的一步 ，导致数据缺失。 </p><p>这个时候，咱们可以使用触发器。你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作。这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p><h2 id="1-触发器概述"><a href="#1-触发器概述" class="headerlink" title="1. 触发器概述"></a>1. 触发器概述</h2><p>触发器是由 事件来触发 某个操作，这些事件包括 INSERT 、 UPDATE 、 DELETE 事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生 了，就会 自动 激发触发器执行相应的操作。</p><p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p><h2 id="2-触发器的创建"><a href="#2-触发器的创建" class="headerlink" title="2. 触发器的创建"></a>2. 触发器的创建</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1) 语法"></a>1) 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> 触发器名称<br>&#123;BEFORE<span class="hljs-operator">|</span>AFTER&#125; &#123;<span class="hljs-keyword">INSERT</span><span class="hljs-operator">|</span><span class="hljs-keyword">UPDATE</span><span class="hljs-operator">|</span><span class="hljs-keyword">DELETE</span>&#125; <span class="hljs-keyword">ON</span> 表名<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br>触发器执行的语句块<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>表名 ：表示触发器监控的对象。 </li><li>BEFORE|AFTER ：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。 </li><li>INSERT|UPDATE|DELETE ：表示触发的事件。<ul><li>INSERT 表示插入记录时触发； </li><li>UPDATE 表示更新记录时触发； </li><li>DELETE 表示删除记录时触发。</li></ul></li><li>触发器执行的语句块 ：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。</li></ul><h3 id="2-代码举例-2"><a href="#2-代码举例-2" class="headerlink" title="2) 代码举例"></a>2) 代码举例</h3><p><strong>举例1：</strong></p><ol><li>创建数据表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test_trigger (<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>t_note <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test_trigger_log (<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>t_log <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)<br>);<br></code></pre></td></tr></table></figure><ol start="2"><li>创建触发器：创建名称为before_insert的触发器，向test_trigger数据表插入数据之前，向 test_trigger_log数据表中插入before_insert的日志信息。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> before_insert<br>BEFORE <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> test_trigger<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test_trigger_log (t_log)<br>    <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;before_insert&#x27;</span>);<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><ol start="3"><li>向test_trigger数据表中插入数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test_trigger (t_note) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;测试 BEFORE INSERT 触发器&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="4"><li>查看test_trigger_log数据表中的数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test_trigger_log;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> t_log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span> before_insert <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><p>定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，在INSERT之前检查 将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，则报sqlstate_value为’HY000’的错 误，从而使得添加失败。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> salary_check_trigger<br>BEFORE <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> employees <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> mgrsalary <span class="hljs-keyword">DOUBLE</span>;<br>    <span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">INTO</span> mgrsalary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> NEW.manager_id;<br>    IF NEW.salary <span class="hljs-operator">&gt;</span> mgrsalary <span class="hljs-keyword">THEN</span><br>    SIGNAL <span class="hljs-keyword">SQLSTATE</span> <span class="hljs-string">&#x27;HY000&#x27;</span> <span class="hljs-keyword">SET</span> MESSAGE_TEXT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;薪资高于领导薪资错误&#x27;</span>;<br>    <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>上面触发器声明过程中的NEW关键字代表INSERT添加语句的新记录。</p><h2 id="3-查看、删除触发器"><a href="#3-查看、删除触发器" class="headerlink" title="3. 查看、删除触发器"></a>3. 查看、删除触发器</h2><h3 id="1-查看触发器"><a href="#1-查看触发器" class="headerlink" title="1)  查看触发器"></a>1)  查看触发器</h3><p>查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。</p><p>方式1：查看当前数据库的所有触发器的定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TRIGGERS\G<br></code></pre></td></tr></table></figure><p>方式2：查看当前数据库中某个触发器的定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> 触发器名<br></code></pre></td></tr></table></figure><p>方式3：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.TRIGGERS;<br></code></pre></td></tr></table></figure><h3 id="2-删除触发器"><a href="#2-删除触发器" class="headerlink" title="2) 删除触发器"></a>2) 删除触发器</h3><p>触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> IF <span class="hljs-keyword">EXISTS</span> 触发器名称;<br></code></pre></td></tr></table></figure><h2 id="4-触发器的优缺点"><a href="#4-触发器的优缺点" class="headerlink" title="4. 触发器的优缺点"></a>4. 触发器的优缺点</h2><h3 id="1-优点-1"><a href="#1-优点-1" class="headerlink" title="1) 优点"></a>1) 优点</h3><p><strong>1、触发器可以确保数据的完整性。</strong></p><p>假设我们用 进货单头表 （demo.importhead）来保存进货单的总体信息，包括进货单编号、供货商编号、仓库编号、总计进货数量、总计进货金额和验收日期。</p><table><thead><tr><th>listnumber                  (进货单编号)</th><th>supplierid                 (进货商编号)</th><th>stockid             (参库编号)</th><th>quantity            (总计数量)</th><th>importvalue           (总计金额)</th><th>confirmationdate        （验收日期)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>用进货单明细表 （demo.importdetails）来保存进货商品的明细，包括进货单编号、商品编号、进货数 量、进货价格和进货金额。</p><table><thead><tr><th>listnumber                          (进货单编号)</th><th>itemnumber                      (商品编号)</th><th>quantity                     (进货数量)</th><th>importprice                     (进货价格)</th><th>importvalue                   （进货金额)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>每当我们录入、删除和修改一条进货单明细数据的时候，进货单明细表里的数据就会发生变动。这个时候，在进货单头表中的总计数量和总计金额就必须重新计算，否则，进货单头表中的总计数量和总计金 额就不等于进货单明细表中数量合计和金额合计了，这就是数据不一致。</p><p>为了解决这个问题，我们就可以使用触发器，规定每当进货单明细表有数据插入、修改和删除的操作 时，自动触发 2 步操作：</p><p>1）重新计算进货单明细表中的数量合计和金额合计；</p><p>2）用第一步中计算出来的值更新进货单头表中的合计数量与合计金额。</p><p>这样一来，进货单头表中的合计数量与合计金额的值，就始终与进货单明细表中计算出来的合计数量与 合计金额的值相同，数据就是一致的，不会互相矛盾。</p><p><strong>2、触发器可以帮助我们记录操作日志。</strong></p><ul><li>利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。</li></ul><p><strong>3、触发器还可以用在操作数据前，对数据进行合法性检查。</strong></p><ul><li>比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏…… 这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。</li></ul><h3 id="2-缺点-1"><a href="#2-缺点-1" class="headerlink" title="2) 缺点"></a>2) 缺点</h3><p><strong>1、触发器最大的一个问题就是可读性差。</strong></p><ul><li>因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能不受应用层的控制 。这对系统维护是非常有挑战的。</li></ul><p><strong>2、相关数据的变更，可能会导致触发器出错。</strong></p><ul><li>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。</li></ul><h3 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3) 注意点"></a>3) 注意点</h3><p>注意，如果在子表中定义了外键约束，并且外键指定了ON UPDATE&#x2F;DELETE CASCADE&#x2F;SET NULL子句，此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子表的UPDATE和DELETE语句定义的触发器并不会被激活。</p><p>例如：基于子表员工表（t_employee）的DELETE语句定义了触发器t1，而子表的部门编号（did）字段定义了外键约束引用了父表部门表（t_department）的主键列部门编号（did），并且该外键加了“ON DELETE SET NULL”子句，那么如果此时删除父表部门表（t_department）在子表员工表（t_employee） 有匹配记录的部门记录时，会引起子表员工表（t_employee）匹配记录的部门编号（did）修改为NULL， mysql&gt; update demo.membermaster set memberdeposit&#x3D;20 where memberid &#x3D; 2; ERROR 1054 (42S22): Unknown column ‘aa’ in ‘field list’ 但是此时不会激活触发器t1。只有直接对子表员工表（t_employee）执行DELETE语句时才会激活触发器 t1。</p><h1 id="四、MySQL8其他新特性"><a href="#四、MySQL8其他新特性" class="headerlink" title="四、MySQL8其他新特性"></a>四、MySQL8其他新特性</h1><h2 id="1-MySQL8新特性概述"><a href="#1-MySQL8新特性概述" class="headerlink" title="1. MySQL8新特性概述"></a>1. MySQL8新特性概述</h2><blockquote><p>MySQL从5.7版本直接跳跃发布了8.0版本 ，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p></blockquote><h3 id="1-MySQL8-0-新增特性"><a href="#1-MySQL8-0-新增特性" class="headerlink" title="1) MySQL8.0 新增特性"></a>1) MySQL8.0 新增特性</h3><ol><li><p><strong>更简便的NoSQL支持 NoSQL泛指非关系型数据库和数据存储</strong>。</p><ul><li>随着互联网平台的规模飞速发展，传统 的关系型数据库已经越来越不能满足需求。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。 MySQL 8对这一功能做了优化，以更灵活的方式实现NoSQL功能，不再依赖模式（schema）。</li></ul></li><li><p><strong>更好的索引</strong>。</p><ul><li><p>在查询中，正确地使用索引可以提高查询的效率。MySQL 8中新增了 <strong>隐藏索引</strong> 和 <strong>降序索引</strong> 。</p><ul><li><p>隐藏索引可以用来测试去掉索引对查询性能的影响。</p></li><li><p>在查询中混合存在多列索引时，使用降序索引可以提高查询的性能。</p></li></ul></li></ul></li><li><p><strong>更完善的JSON支持</strong> </p><ul><li>MySQL从5.7开始支持原生JSON数据的存储，MySQL 8对这一功能做了优化，增加 了聚合函数 <strong>JSON_ARRAYAGG()</strong> 和 <strong>JSON_OBJECTAGG()</strong> ，将参数聚合为JSON数组或对象，新增了行内 操作符 -&gt;&gt;，是列路径运算符 -&gt;的增强，对JSON排序做了提升，并优化了JSON的更新操作。</li></ul></li><li><p><strong>安全和账户管理</strong></p><ul><li>MySQL 8中新增了 <strong>caching_sha2_password</strong> 授权插件、角色、密码历史记录和FIPS 模式支持，这些特性提高了数据库的安全性和性能，使数据库管理员能够更灵活地进行账户管理工作。</li></ul></li><li><p><strong>InnoDB的变化</strong></p><ul><li><strong>InnoDB是MySQL默认的存储引擎</strong> ，是事务型数据库的首选引擎，支持事务安全表 （ACID），支持行锁定和外键。在MySQL 8 版本中，InnoDB在自增、索引、加密、死锁、共享锁等方面 做了大量的 改进和优化 ，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的支持。</li></ul></li><li><p><strong>数据字典</strong> </p><ul><li>在之前的MySQL版本中，字典数据都存储在元数据文件和非事务表中。从MySQL 8开始新增了事务数据字典，在这个字典里存储着数据库对象信息，这些数据字典存储在内部事务表中。</li></ul></li><li><p><strong>原子数据定义语句</strong> </p><ul><li>MySQL 8开始支持原子数据定义语句（Automic DDL），即<strong>原子DDL</strong> 。目前，只有 InnoDB存储引擎支持原子DDL。原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎 操作、二进制日志写入结合到一个单独的原子事务中，这使得即使服务器崩溃，事务也会提交或回滚。 使用支持原子操作的存储引擎所创建的表，在执行DROP TABLE、CREATE TABLE、ALTER TABLE、 RENAME TABLE、TRUNCATE TABLE、CREATE TABLESPACE、DROP TABLESPACE等操作时，都支持原子操 作，即事务要么完全操作成功，要么失败后回滚，不再进行部分提交。 对于从MySQL 5.7复制到MySQL 8 版本中的语句，可以添加 IF EXISTS 或 IF NOT EXISTS 语句来避免发生错误。</li></ul></li><li><p><strong>资源管理</strong> </p><ul><li>MySQL 8开始支持创建和管理资源组，允许将服务器内运行的线程分配给特定的分组，以便 线程根据组内可用资源执行。组属性能够控制组内资源，启用或限制组内资源消耗。数据库管理员能够 根据不同的工作负载适当地更改这些属性。 目前，CPU时间是可控资源，由“虚拟CPU”这个概念来表 示，此术语包含CPU的核心数，超线程，硬件线程等等。服务器在启动时确定可用的虚拟CPU数量。拥有 对应权限的数据库管理员可以将这些CPU与资源组关联，并为资源组分配线程。 资源组组件为MySQL中的资源组管理提供了SQL接口。资源组的属性用于定义资源组。</li><li>MySQL中存在两个默认组，<strong>系统组和用户组</strong>，默认的组不能被删除，其属性也不能被更改。对于用户自定义的组，资源组创建时可初始化所有的 属性，除去名字和类型，其他属性都可在创建之后进行更改。 在一些平台下，或进行了某些MySQL的配 置时，资源管理的功能将受到限制，甚至不可用。例如，如果安装了线程池插件，或者使用的是macOS 系统，资源管理将处于不可用状态。在FreeBSD和Solaris系统中，资源线程优先级将失效。在Linux系统 中，只有配置了CAP_SYS_NICE属性，资源管理优先级才能发挥作用。</li></ul></li><li><p><strong>字符集支持</strong> </p><ul><li>MySQL 8中默认的字符集由 latin1 更改为 utf8mb4 ，并首次增加了日语所特定使用的集合，utf8mb4_ja_0900_as_cs。</li></ul></li><li><p><strong>优化器增强</strong></p><ul><li>MySQL优化器开始支持<strong>隐藏索引和降序索引</strong>。隐藏索引不会被优化器使用，验证索引的必要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许优化器对多个列进行排序，并且允许排序顺序不一致。</li></ul></li><li><p><strong>公用表表达式</strong> </p><ul><li><p>公用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持递归和非递 归两种形式的CTE。CTE通过在SELECT语句或其他特定语句前 使用WITH语句对临时结果集 进行命名。</p></li><li><p>基础语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WITH</span> cte_name (col_name1,col_name2 ...) <span class="hljs-keyword">AS</span> (Subquery)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> cte_name;<br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li>Subquery代表子查询，子查询前使用WITH语句将结果集命名为cte_name，在后续的查询中即可使用 cte_name进行查询。</li></ul><ol start="12"><li><p><strong>窗口函数</strong></p><ul><li><p>MySQL 8开始支持窗口函数。在之前的版本中已存在的大部分 <strong>聚合函数</strong>， 在MySQL 8中也可以 作为窗口函数来使用。</p></li><li><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/MySQL/4.1.4539u1vlahc.webp" alt="4"></p></li></ul></li><li><p><strong>正则表达式支持</strong> </p><ul><li>MySQL在8.0.4以后的版本中采用支持Unicode的国际化组件库实现正则表达式操作， 这种方式不仅能提供完全的Unicode支持，而且是多字节安全编码。MySQL增加了REGEXP_LIKE()、 EGEXP_INSTR()、REGEXP_REPLACE()和 REGEXP_SUBSTR()等函数来提升性能。另外，regexp_stack_limit和 regexp_time_limit 系统变量能够通过匹配引擎来控制资源消耗。</li></ul></li><li><p><strong>内部临时表</strong> </p><ul><li><code>TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎</code> 。TempTable存储 引擎为VARCHAR和VARBINARY列提供高效存储。internal_tmp_mem_storage_engine会话变量定义了内部 临时表的存储引擎，可选的值有两个，TempTable和MEMORY，其中TempTable为默认的存储引擎。 temptable_max_ram系统配置项定义了TempTable存储引擎可使用的最大内存数量。</li></ul></li><li><p><strong>日志记录</strong></p><ul><li>在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量 log_error_services来配置，能够实现日志事件的过滤和写入。 WITH cte_name (col_name1,col_name2 …) AS (Subquery) SELECT * FROM cte_name;</li></ul></li><li><p><strong>备份锁</strong></p><ul><li>新的备份锁允许在线备份期间执行数据操作语句，同时阻止可能造成快照不一致的操作。新 备份锁由 LOCK INSTANCE FOR BACKUP 和 UNLOCK INSTANCE 语法提供支持，执行这些操作需要备份管理 员特权。</li></ul></li><li><p><strong>增强的MySQL复制</strong> </p><ul><li>MySQL 8复制支持对 JSON文档 进行部分更新的 二进制日志记录 ，该记录 <strong>使用紧凑</strong> 的二进制格式 ，从而节省记录完整JSON文档的空间。当使用基于语句的日志记录时，这种紧凑的日志记 录会自动完成，并且可以通过将新的binlog_row_value_options系统变量值设置为PARTIAL_JSON来启用。</li></ul></li></ol><h3 id="2-MySQL8-0-移除的旧特性"><a href="#2-MySQL8-0-移除的旧特性" class="headerlink" title="2) MySQL8.0 移除的旧特性"></a>2) MySQL8.0 移除的旧特性</h3><blockquote><p>MySQL 5.7版本上开发的应用程序如果使用了MySQL8.0 移除的特性，语句可能会失败，或者产生不同 的执行结果。为了避免这些问题，对于使用了移除特性的应用，应当尽力修正避免使用这些特性，并尽 可能使用替代方法。</p></blockquote><ol><li><p><strong>查询缓存</strong></p><ul><li><p>查询缓存已被移除 ，删除的项有： </p><ul><li><p>1）语句：FLUSH QUERY CACHE和RESET QUERY CACHE。 </p></li><li><p>2）系统变量：query_cache_limit、query_cache_min_res_unit、query_cache_size、 query_cache_type、query_cache_wlock_invalidate。 </p></li><li><p>3）状态变量：Qcache_free_blocks、 Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、 Qcache_queries_in_cache、Qcache_total_blocks。 </p></li><li><p>4）线程状态：checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。</p></li></ul></li></ul></li><li><p><strong>加密相关</strong></p><ul><li>删除的加密相关的内容有：ENCODE()、DECODE()、ENCRYPT()、DES_ENCRYPT()和 DES_DECRYPT()函数，配置项des-key-file，系统变量have_crypt，FLUSH语句的DES_KEY_FILE选项， HAVE_CRYPT CMake选项。 对于移除的ENCRYPT()函数，考虑使用SHA2()替代，对于其他移除的函数，使 用AES_ENCRYPT()和AES_DECRYPT()替代。</li></ul></li><li><p><strong>空间函数相关</strong> </p><ul><li>在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在MySQL 8中都已被 移除，只保留了对应的ST_和MBR函数。</li></ul></li><li><p>\N和NULL 在SQL语句中，解析器不再将\N视为NULL，所以在<strong>SQL语句中应使用NULL代替\N</strong>。这项变化 不会影响使用LOAD DATA INFILE或者SELECT…INTO OUTFILE操作文件的导入和导出。在这类操作中，NULL 仍等同于\N。 </p></li><li><p>mysql_install_db 在MySQL分布中，<strong>已移除了mysql_install_db程序</strong>，数据字典初始化需要调用带着– initialize或者–initialize-insecure选项的mysqld来代替实现。另外，–bootstrap和INSTALL_SCRIPTDIR CMake也已被删除</p></li><li><p><strong>通用分区处理程序</strong> </p><ul><li>通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存 储引擎需要自有的分区处理程序。 提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在 MySQL 8中只支持InnoDB。</li></ul></li><li><p><strong>系统和状态变量信息</strong> </p><ul><li>在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。 GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS表都已被删除。</li><li>另外，系统变量show_compatibility_56也已被删除。</li><li>被删除的状态变量有Slave_heartbeat_period、 Slave_last_heartbeat,Slave_received_heartbeats、Slave_retried_transactions、Slave_running。以上被删除 的内容都可使用性能模式中对应的内容进行替代。</li></ul></li><li><p><strong>mysql_plugin工具</strong> </p><ul><li>mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用–plugin-load或- -plugin-load-add选项在服务器启动时加载插件或者在运行时使用INSTALL PLUGIN语句加载插件来替代该 工具。</li></ul></li></ol><h2 id="2-新特性1：窗口函数"><a href="#2-新特性1：窗口函数" class="headerlink" title="2. 新特性1：窗口函数"></a>2. 新特性1：窗口函数</h2><h3 id="1-使用窗口函数前后对比"><a href="#1-使用窗口函数前后对比" class="headerlink" title="1) 使用窗口函数前后对比"></a>1) 使用窗口函数前后对比</h3><p>假设我现在有这样一个数据表，它显示了某购物网站在每个城市每个区的销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sales(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>city <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br>county <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br>sales_value <span class="hljs-type">DECIMAL</span><br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> sales(city,county,sales_value)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;海淀&#x27;</span>,<span class="hljs-number">10.00</span>), (<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;朝阳&#x27;</span>,<span class="hljs-number">20.00</span>),(<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;黄埔&#x27;</span>,<span class="hljs-number">30.00</span>),(<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;长宁&#x27;</span>,<span class="hljs-number">10.00</span>);<br></code></pre></td></tr></table></figure><p>查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sales;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> city <span class="hljs-operator">|</span> county <span class="hljs-operator">|</span> sales_value <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+-------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 北京  <span class="hljs-operator">|</span>  海淀   <span class="hljs-operator">|</span>      <span class="hljs-number">10</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 北京  <span class="hljs-operator">|</span>  朝阳   <span class="hljs-operator">|</span>      <span class="hljs-number">20</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 上海  <span class="hljs-operator">|</span>  黄埔   <span class="hljs-operator">|</span>      <span class="hljs-number">30</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 上海  <span class="hljs-operator">|</span>  长宁   <span class="hljs-operator">|</span>      <span class="hljs-number">10</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+-------------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>需求：现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售额中的比率，以及占总销售额中的比率。</p><p>如果用分组和聚合函数，就需要分好几步来计算。</p><p>第一步，计算总销售金额，并存入临时表 a：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">TABLE</span> a <span class="hljs-comment">-- 创建临时表</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(sales_value) <span class="hljs-keyword">AS</span> sales_value <span class="hljs-comment">-- 计算总计金额</span><br><span class="hljs-keyword">FROM</span> sales;<br></code></pre></td></tr></table></figure><p>查看一下临时表 a ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> a;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> sales_value <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>第二步，计算每个城市的销售总额并存入临时表 b：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">TABLE</span> b <span class="hljs-comment">-- 创建临时表</span><br><span class="hljs-keyword">SELECT</span> city, <span class="hljs-built_in">SUM</span>(sales_value) <span class="hljs-keyword">AS</span> sales_value <span class="hljs-comment">-- 计算城市销售合计</span><br><span class="hljs-keyword">FROM</span> sales<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;<br></code></pre></td></tr></table></figure><p>查看临时表 b ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> b;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+-------------+</span><br><span class="hljs-operator">|</span> city <span class="hljs-operator">|</span> sales_value <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+-------------+</span><br><span class="hljs-operator">|</span> 北京  <span class="hljs-operator">|</span>     <span class="hljs-number">30</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 上海  <span class="hljs-operator">|</span>     <span class="hljs-number">40</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+-------------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>第三步，计算各区的销售占所在城市的总计金额的比例，和占全部销售总计金额的比例。我们可以通过下面的连接查询获得需要的结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> s.city <span class="hljs-keyword">AS</span> 城市,s.county <span class="hljs-keyword">AS</span> 区,s.sales_value <span class="hljs-keyword">AS</span> 区销售额,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> b.sales_value <span class="hljs-keyword">AS</span> 市销售额,s.sales_value<span class="hljs-operator">/</span>b.sales_value <span class="hljs-keyword">AS</span> 市比率,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> a.sales_value <span class="hljs-keyword">AS</span> 总销售额,s.sales_value<span class="hljs-operator">/</span>a.sales_value <span class="hljs-keyword">AS</span> 总比率<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> sales s<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">JOIN</span> b <span class="hljs-keyword">ON</span> (s.city<span class="hljs-operator">=</span>b.city) <span class="hljs-comment">-- 连接市统计结果临时表</span><br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">JOIN</span> a <span class="hljs-comment">-- 连接总计金额临时表</span><br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> s.city,s.county;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----------+----------+--------+----------+--------+</span><br><span class="hljs-operator">|</span> 城市 <span class="hljs-operator">|</span> 区 <span class="hljs-operator">|</span> 区销售额 <span class="hljs-operator">|</span> 市销售额 <span class="hljs-operator">|</span> 市比率 <span class="hljs-operator">|</span> 总销售额 <span class="hljs-operator">|</span> 总比率 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----------+----------+--------+----------+--------+</span><br><span class="hljs-operator">|</span> 上海 <span class="hljs-operator">|</span> 长宁 <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-number">40</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.2500</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.1429</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 上海 <span class="hljs-operator">|</span> 黄埔 <span class="hljs-operator">|</span> <span class="hljs-number">30</span> <span class="hljs-operator">|</span> <span class="hljs-number">40</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.7500</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.4286</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 北京 <span class="hljs-operator">|</span> 朝阳 <span class="hljs-operator">|</span> <span class="hljs-number">20</span> <span class="hljs-operator">|</span> <span class="hljs-number">30</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.6667</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.2857</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 北京 <span class="hljs-operator">|</span> 海淀 <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-number">30</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.3333</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.1429</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----------+----------+--------+----------+--------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>结果显示：市销售金额、市销售占比、总销售金额、总销售占比都计算出来了。</p><p>同样的查询，如果用窗口函数，就简单多了。我们可以用下面的代码来实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> city <span class="hljs-keyword">AS</span> 城市,county <span class="hljs-keyword">AS</span> 区,sales_value <span class="hljs-keyword">AS</span> 区销售额,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">SUM</span>(sales_value) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> city) <span class="hljs-keyword">AS</span> 市销售额, <span class="hljs-comment">-- 计算市销售额</span><br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> sales_value<span class="hljs-operator">/</span><span class="hljs-built_in">SUM</span>(sales_value) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> city) <span class="hljs-keyword">AS</span> 市比率,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">SUM</span>(sales_value) <span class="hljs-keyword">OVER</span>() <span class="hljs-keyword">AS</span> 总销售额, <span class="hljs-comment">-- 计算总销售额</span><br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> sales_value<span class="hljs-operator">/</span><span class="hljs-built_in">SUM</span>(sales_value) <span class="hljs-keyword">OVER</span>() <span class="hljs-keyword">AS</span> 总比率<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> sales<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> city,county;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----------+----------+--------+----------+--------+</span><br><span class="hljs-operator">|</span> 城市 <span class="hljs-operator">|</span> 区 <span class="hljs-operator">|</span> 区销售额 <span class="hljs-operator">|</span> 市销售额 <span class="hljs-operator">|</span> 市比率 <span class="hljs-operator">|</span> 总销售额 <span class="hljs-operator">|</span> 总比率 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----------+----------+--------+----------+--------+</span><br><span class="hljs-operator">|</span> 上海 <span class="hljs-operator">|</span> 长宁 <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-number">40</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.2500</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.1429</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 上海 <span class="hljs-operator">|</span> 黄埔 <span class="hljs-operator">|</span> <span class="hljs-number">30</span> <span class="hljs-operator">|</span> <span class="hljs-number">40</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.7500</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.4286</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 北京 <span class="hljs-operator">|</span> 朝阳 <span class="hljs-operator">|</span> <span class="hljs-number">20</span> <span class="hljs-operator">|</span> <span class="hljs-number">30</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.6667</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.2857</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 北京 <span class="hljs-operator">|</span> 海淀 <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-number">30</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.3333</span> <span class="hljs-operator">|</span> <span class="hljs-number">70</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.1429</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----------+-----------+--------+----------+--------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>结果显示，我们得到了与上面那种查询同样的结果。 </p><p>使用窗口函数，只用了一步就完成了查询。而且，由于没有用到临时表，执行的效率也更高了。很显 然，在这种需要用到分组统计的结果对每一条记录进行计算的场景下，使用窗口函数更好。</p><h3 id="2-窗口函数分类"><a href="#2-窗口函数分类" class="headerlink" title="2) 窗口函数分类"></a>2) 窗口函数分类</h3><p>MySQL从8.0版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</p><p>窗口函数可以分为 <strong>静态窗口函数</strong> 和 <strong>动态窗口函数</strong> 。</p><ul><li>静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；</li><li>动态窗口函数的窗口大小会随着记录的不同而变化。</li></ul><p>MySQL官方网站窗口函数的网址为<a href="https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptio">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptio</a> ns.html#function_row-number。 </p><p>窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下表：</p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/MySQL/4.2.5pob950ekmo0.webp" alt="4"></li></ul><h3 id="3-语法结构"><a href="#3-语法结构" class="headerlink" title="3) 语法结构"></a>3) 语法结构</h3><p>窗口函数的语法结构是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">函数 <span class="hljs-keyword">OVER</span>（[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> 字段名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 字段名 <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>]）<br></code></pre></td></tr></table></figure><p>或者是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">函数 <span class="hljs-keyword">OVER</span> 窗口名 … <span class="hljs-keyword">WINDOW</span> 窗口名 <span class="hljs-keyword">AS</span> （[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> 字段名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 字段名 <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>]）<br></code></pre></td></tr></table></figure><ul><li>OVER 关键字指定函数窗口的范围。<ul><li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。</li><li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li></ul></li><li>窗口名：为窗口设置一个别名，用来标识窗口。</li><li>PARTITION BY子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分别执行。</li><li>ORDER BY子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号。</li><li>FRAME子句：为分区中的某个子集定义规则，可以用来作为滑动窗口使用。</li></ul><h3 id="4-分类讲解"><a href="#4-分类讲解" class="headerlink" title="4) 分类讲解"></a>4) 分类讲解</h3><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> goods(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>category_id <span class="hljs-type">INT</span>,<br>category <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>stock <span class="hljs-type">INT</span>,<br>upper_time DATETIME<br>);<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> goods(category_id,category,NAME,price,stock,upper_time)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;女装/女士精品&#x27;</span>, <span class="hljs-string">&#x27;T恤&#x27;</span>, <span class="hljs-number">39.90</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;女装/女士精品&#x27;</span>, <span class="hljs-string">&#x27;连衣裙&#x27;</span>, <span class="hljs-number">79.90</span>, <span class="hljs-number">2500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;女装/女士精品&#x27;</span>, <span class="hljs-string">&#x27;卫衣&#x27;</span>, <span class="hljs-number">89.90</span>, <span class="hljs-number">1500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;女装/女士精品&#x27;</span>, <span class="hljs-string">&#x27;牛仔裤&#x27;</span>, <span class="hljs-number">89.90</span>, <span class="hljs-number">3500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;女装/女士精品&#x27;</span>, <span class="hljs-string">&#x27;百褶裙&#x27;</span>, <span class="hljs-number">29.90</span>, <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;女装/女士精品&#x27;</span>, <span class="hljs-string">&#x27;呢绒外套&#x27;</span>, <span class="hljs-number">399.90</span>, <span class="hljs-number">1200</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;户外运动&#x27;</span>, <span class="hljs-string">&#x27;自行车&#x27;</span>, <span class="hljs-number">399.90</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;户外运动&#x27;</span>, <span class="hljs-string">&#x27;山地自行车&#x27;</span>, <span class="hljs-number">1399.90</span>, <span class="hljs-number">2500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;户外运动&#x27;</span>, <span class="hljs-string">&#x27;登山杖&#x27;</span>, <span class="hljs-number">59.90</span>, <span class="hljs-number">1500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;户外运动&#x27;</span>, <span class="hljs-string">&#x27;骑行装备&#x27;</span>, <span class="hljs-number">399.90</span>, <span class="hljs-number">3500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;户外运动&#x27;</span>, <span class="hljs-string">&#x27;运动外套&#x27;</span>, <span class="hljs-number">799.90</span>, <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;户外运动&#x27;</span>, <span class="hljs-string">&#x27;滑板&#x27;</span>, <span class="hljs-number">499.90</span>, <span class="hljs-number">1200</span>, <span class="hljs-string">&#x27;2020-11-10 00:00:00&#x27;</span>);<br></code></pre></td></tr></table></figure><p>下面针对goods表中的数据来验证每个窗口函数的功能。</p><h4 id="1-序号函数"><a href="#1-序号函数" class="headerlink" title="1) 序号函数"></a>1) 序号函数</h4><p><strong>1. ROW_NUMBER()函数</strong></p><ul><li>ROW_NUMBER()函数能够对数据中的序号进行顺序显示。</li></ul><p>举例：查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">ROW_NUMBER</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span><br>row_num, id, category_id, category, NAME, price, stock<br><span class="hljs-keyword">FROM</span> goods;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span> row_num <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category_id <span class="hljs-operator">|</span>    category   <span class="hljs-operator">|</span>     NAME   <span class="hljs-operator">|</span>  price  <span class="hljs-operator">|</span> stock <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span>  女装<span class="hljs-operator">/</span>女士精品  <span class="hljs-operator">|</span> 呢绒外套     <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1200</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span>  女装<span class="hljs-operator">/</span>女士精品  <span class="hljs-operator">|</span> 卫衣        <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span>  女装<span class="hljs-operator">/</span>女士精品  <span class="hljs-operator">|</span> 牛仔裤       <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">3500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span>  女装<span class="hljs-operator">/</span>女士精品  <span class="hljs-operator">|</span> 连衣裙       <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">2500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">5</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span>  女装<span class="hljs-operator">/</span>女士精品  <span class="hljs-operator">|</span> T恤         <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1000</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">6</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span>  女装<span class="hljs-operator">/</span>女士精品  <span class="hljs-operator">|</span> 百褶裙       <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span>     户外运动   <span class="hljs-operator">|</span> 山地自行车    <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span>    <span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span>     户外运动   <span class="hljs-operator">|</span> 运动外套      <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span>    <span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span>     户外运动   <span class="hljs-operator">|</span> 滑板         <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1200</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span>     户外运动   <span class="hljs-operator">|</span> 自行车       <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1000</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">5</span>    <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span>     户外运动   <span class="hljs-operator">|</span> 骑行装备     <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">3500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">6</span>    <span class="hljs-operator">|</span>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span>     户外运动   <span class="hljs-operator">|</span> 登山杖       <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>举例：查询 goods 数据表中每个商品分类下价格最高的3种商品信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> (<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">ROW_NUMBER</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span><br>row_num,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> id, category_id, category, NAME, price, stock<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods) t<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> row_num <span class="hljs-operator">&lt;=</span> <span class="hljs-number">3</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span> row_num <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category_id <span class="hljs-operator">|</span>     category  <span class="hljs-operator">|</span>      NAME  <span class="hljs-operator">|</span>  price  <span class="hljs-operator">|</span> stock <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">1</span>   <span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套     <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1200</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">2</span>   <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣        <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">3</span>   <span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤      <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>    <span class="hljs-operator">|</span> <span class="hljs-number">3500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">1</span>   <span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车   <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">2500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">2</span>   <span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套     <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">3</span>   <span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板        <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1200</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+----------+-------+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>在名称为“女装&#x2F;女士精品”的商品类别中，有两款商品的价格为89.90元，分别是卫衣和牛仔裤。两款商品 的序号都应该为2，而不是一个为2，另一个为3。此时，可以使用RANK()函数和DENSE_RANK()函数解 决。</p><p><strong>2．RANK()函数</strong></p><ul><li>使用RANK()函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为1、1、3。</li></ul><p>举例：使用RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">RANK</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> row_num,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> id, category_id, category, NAME, price, stock<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span> row_num <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category_id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME       <span class="hljs-operator">|</span> price   <span class="hljs-operator">|</span> stock <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">1</span>   <span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套     <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1200</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">2</span>   <span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣        <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">2</span>   <span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤      <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">3500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">4</span>   <span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 连衣裙      <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">2500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">5</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> T恤        <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1000</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">6</span>   <span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">1</span>       <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 百褶裙      <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">500</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">1</span>   <span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车   <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">2</span>   <span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套     <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">3</span>   <span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板        <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1200</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">4</span>   <span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 自行车      <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1000</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">4</span>   <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 骑行装备    <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">3500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">6</span>   <span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span>     <span class="hljs-number">2</span>       <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 登山杖      <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>3．DENSE_RANK()函数</strong></p><p>DENSE_RANK()函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为1、1、2。 举例：使用DENSE_RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">DENSE_RANK</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span><br>row_num,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> id, category_id, category, NAME, price, stock<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span> row_num <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category_id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME       <span class="hljs-operator">|</span> price   <span class="hljs-operator">|</span> stock <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span>    <span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>     呢绒外套 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1200</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span>    <span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>     卫衣    <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span>    <span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>     牛仔裤  <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">3500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span>    <span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>     连衣裙  <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">2500</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span>    <span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>     T恤    <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">1000</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">5</span>    <span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span>      <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>     百褶裙  <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span>   <span class="hljs-operator">|</span> <span class="hljs-number">500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span>    <span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span>    山地自行车<span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span>    <span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span>    运动外套  <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">500</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span>    <span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span>    滑板     <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1200</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span>    <span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span>    自行车    <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1000</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span>    <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span>    骑行装备  <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">3500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">5</span>    <span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span>      <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span>    登山杖    <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----+-------------+---------------+------------+---------+-------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="2-分布函数"><a href="#2-分布函数" class="headerlink" title="2) 分布函数"></a>2) 分布函数</h4><p><strong>1．PERCENT_RANK()函数</strong></p><ul><li>PERCENT_RANK()函数是等级值百分比函数。按照如下方式进行计算。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">(rank <span class="hljs-operator">-</span> <span class="hljs-number">1</span>) <span class="hljs-operator">/</span> (<span class="hljs-keyword">rows</span> <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>其中，rank的值为使用RANK()函数产生的序号，rows的值为当前窗口的总记录数。</p><p>举例：计算 goods 数据表中名称为“女装&#x2F;女士精品”的类别下的商品的PERCENT_RANK值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">#写法一：<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">RANK</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> r,<br><span class="hljs-built_in">PERCENT_RANK</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> pr,<br>id, category_id, category, NAME, price, stock<br><span class="hljs-keyword">FROM</span> goods<br><span class="hljs-keyword">WHERE</span> category_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>#写法二：<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">RANK</span>() <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> r,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">PERCENT_RANK</span>() <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> pr,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> id, category_id, category, NAME, price, stock<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> category_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price<br><span class="hljs-keyword">DESC</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---+-----+----+-------------+---------------+----------+--------+-------+</span><br><span class="hljs-operator">|</span> r <span class="hljs-operator">|</span> pr  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category_id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME     <span class="hljs-operator">|</span> price  <span class="hljs-operator">|</span> stock <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---+-----+----+-------------+---------------+----------+--------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">0</span>   <span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span>          <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>   呢绒外套 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1200</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.2</span> <span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span>          <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>   卫衣    <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.2</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span>          <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>   牛仔裤  <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">3500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.6</span> <span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span>          <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>   连衣裙  <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.8</span> <span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span>          <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>   T恤    <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span> <span class="hljs-operator">|</span> <span class="hljs-number">1</span>   <span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span>          <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span>   百褶裙  <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---+-----+----+-------------+---------------+----------+--------+-------+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>2．CUME_DIST()函数</strong></p><p>CUME_DIST()函数主要用于查询小于或等于某个值的比例。 </p><p>举例：查询goods数据表中小于或等于当前价格的比例。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CUME_DIST</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">AS</span> cd,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> id, category, NAME, price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+----+---------------+------------+---------+</span><br><span class="hljs-operator">|</span>                cd   <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME       <span class="hljs-operator">|</span> price   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+----+---------------+------------+---------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.16666666666666666</span> <span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 百褶裙      <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.3333333333333333</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> T恤        <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.5</span>                 <span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 连衣裙      <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.8333333333333334</span>  <span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣       <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.8333333333333334</span>  <span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤     <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>                   <span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套    <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.16666666666666666</span> <span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 登山杖      <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.5</span>                 <span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 自行车      <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.5</span>                 <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 骑行装备     <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.6666666666666666</span>  <span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板        <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.8333333333333334</span>  <span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套     <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>                   <span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车   <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+----+---------------+------------+---------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="3-前后函数"><a href="#3-前后函数" class="headerlink" title="3) 前后函数"></a>3) 前后函数</h4><p><strong>1．LAG(expr,n)函数</strong></p><ul><li>LAG(expr,n)函数返回当前行的前n行的expr的值。</li></ul><p>举例：查询goods数据表中前一个商品价格与当前商品价格的差值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> id, category, NAME, price, pre_price, price <span class="hljs-operator">-</span> pre_price <span class="hljs-keyword">AS</span> diff_price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> (<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> id, category, NAME, price,<span class="hljs-built_in">LAG</span>(price,<span class="hljs-number">1</span>) <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> pre_price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price)) t;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-----------+------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category <span class="hljs-operator">|</span> NAME <span class="hljs-operator">|</span> price <span class="hljs-operator">|</span> pre_price <span class="hljs-operator">|</span> diff_price <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-----------+------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span> <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品 <span class="hljs-operator">|</span> 百褶裙 <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品 <span class="hljs-operator">|</span> T恤 <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品 <span class="hljs-operator">|</span> 连衣裙 <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">40.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品 <span class="hljs-operator">|</span> 卫衣 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品 <span class="hljs-operator">|</span> 牛仔裤 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span> <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品 <span class="hljs-operator">|</span> 呢绒外套 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">310.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">9</span> <span class="hljs-operator">|</span> 户外运动 <span class="hljs-operator">|</span> 登山杖 <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">7</span> <span class="hljs-operator">|</span> 户外运动 <span class="hljs-operator">|</span> 自行车 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">340.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 户外运动 <span class="hljs-operator">|</span> 骑行装备 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span> 户外运动 <span class="hljs-operator">|</span> 滑板 <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> 户外运动 <span class="hljs-operator">|</span> 运动外套 <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">300.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">8</span> <span class="hljs-operator">|</span> 户外运动 <span class="hljs-operator">|</span> 山地自行车 <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">600.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-----------+------------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>2．LEAD(expr,n)函数</strong></p><ul><li>LEAD(expr,n)函数返回当前行的后n行的expr的值。</li></ul><p>举例：查询goods数据表中后一个商品价格与当前商品价格的差值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> id, category, NAME, behind_price, price,behind_price <span class="hljs-operator">-</span> price <span class="hljs-keyword">AS</span><br>diff_price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span>(<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> id, category, NAME, price,<span class="hljs-built_in">LEAD</span>(price, <span class="hljs-number">1</span>) <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> behind_price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods <span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price)) t;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+--------------+---------+------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME       <span class="hljs-operator">|</span> behind_price <span class="hljs-operator">|</span> price   <span class="hljs-operator">|</span> diff_price <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+--------------+---------+------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 百褶裙       <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span>       <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> T恤         <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span>       <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">40.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 连衣裙      <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>        <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣        <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span>       <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤       <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>     <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">310.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 登山杖       <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>    <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">340.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 自行车       <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span>    <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 骑行装备     <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span>     <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板         <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span>    <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">300.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套     <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span>    <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">600.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+--------------+---------+------------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="4-首尾函数"><a href="#4-首尾函数" class="headerlink" title="4) 首尾函数"></a>4) 首尾函数</h4><p><strong>1．FIRST_VALUE(expr)函数</strong></p><ul><li>FIRST_VALUE(expr)函数返回第一个expr的值。</li></ul><p>举例：按照价格排序，查询第1个商品的价格信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> id, category, NAME, price, stock,<span class="hljs-built_in">FIRST_VALUE</span>(price) <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span><br>first_price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods <span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME <span class="hljs-operator">|</span> price <span class="hljs-operator">|</span> stock <span class="hljs-operator">|</span> first_price <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-------+-------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 百褶裙 <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">500</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> T恤 <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1000</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 连衣裙 <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1500</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">3500</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1200</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 登山杖 <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1500</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 自行车 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1000</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 骑行装备 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">3500</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板 <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1200</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套 <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">500</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车 <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-------+-------------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>LAST_VALUE(expr)函数</strong></p><ul><li>LAST_VALUE(expr)函数返回最后一个expr的值。</li></ul><p>举例：按照价格排序，查询最后一个商品的价格信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> id, category, NAME, price, stock,<span class="hljs-built_in">LAST_VALUE</span>(price) <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> last_price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods <span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-------+------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME <span class="hljs-operator">|</span> price <span class="hljs-operator">|</span> stock <span class="hljs-operator">|</span> last_price <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-------+------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 百褶裙 <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">500</span> <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> T恤 <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1000</span> <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 连衣裙 <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span> <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1500</span> <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">3500</span> <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1200</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 登山杖 <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1500</span> <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 自行车 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1000</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 骑行装备 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">3500</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板 <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">1200</span> <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套 <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">500</span> <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车 <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">2500</span> <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+-------+------------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="5-其他函数"><a href="#5-其他函数" class="headerlink" title="5) 其他函数"></a>5) 其他函数</h4><p><strong>1．NTH_VALUE(expr,n)函数</strong></p><ul><li>NTH_VALUE(expr,n)函数返回第n个expr的值。</li></ul><p>举例：查询goods数据表中排名第2和第3的价格信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> id, category, NAME, price,<span class="hljs-built_in">NTH_VALUE</span>(price,<span class="hljs-number">2</span>) <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> second_price,<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">NTH_VALUE</span>(price,<span class="hljs-number">3</span>) <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> third_price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods <span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+--------------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME       <span class="hljs-operator">|</span> price   <span class="hljs-operator">|</span> second_price <span class="hljs-operator">|</span> third_price <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+--------------+-------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 百褶裙 <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> T恤 <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 连衣裙 <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 登山杖 <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 自行车 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 骑行装备 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板 <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套 <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车 <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+---------------+------------+---------+--------------+-------------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>2．NTILE(n)函数</strong></p><ul><li>NTILE(n)函数将分区中的有序数据分为n个桶，记录桶编号。</li></ul><p>举例：将goods表中的商品按照价格分为3组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">NTILE</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">OVER</span> w <span class="hljs-keyword">AS</span> nt,id, category, NAME, price<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> goods <span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> category_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+----+---------------+------------+---------+</span><br><span class="hljs-operator">|</span> nt <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> category      <span class="hljs-operator">|</span> NAME       <span class="hljs-operator">|</span> price <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----+---------------+------------+---------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 百褶裙 <span class="hljs-operator">|</span> <span class="hljs-number">29.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> T恤 <span class="hljs-operator">|</span> <span class="hljs-number">39.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 连衣裙 <span class="hljs-operator">|</span> <span class="hljs-number">79.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 卫衣 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 牛仔裤 <span class="hljs-operator">|</span> <span class="hljs-number">89.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> <span class="hljs-number">6</span>  <span class="hljs-operator">|</span> 女装<span class="hljs-operator">/</span>女士精品   <span class="hljs-operator">|</span> 呢绒外套 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> <span class="hljs-number">9</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 登山杖 <span class="hljs-operator">|</span> <span class="hljs-number">59.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> <span class="hljs-number">7</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 自行车 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 骑行装备 <span class="hljs-operator">|</span> <span class="hljs-number">399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 滑板 <span class="hljs-operator">|</span> <span class="hljs-number">499.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 运动外套 <span class="hljs-operator">|</span> <span class="hljs-number">799.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> <span class="hljs-number">8</span>  <span class="hljs-operator">|</span> 户外运动       <span class="hljs-operator">|</span> 山地自行车 <span class="hljs-operator">|</span> <span class="hljs-number">1399.90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----+---------------+------------+---------+</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5) 小结"></a>5) 小结</h3><ul><li>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行 数，这对我们在原表数据的基础上进行统计和排序非常有用。</li></ul><h2 id="3-新特性2：公用表表达式"><a href="#3-新特性2：公用表表达式" class="headerlink" title="3. 新特性2：公用表表达式"></a>3. 新特性2：公用表表达式</h2><blockquote><p>公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。CTE是一个命名的临时结果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的， CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。</p></blockquote><ul><li>依据语法结构和执行方式的不同，公用表表达式分为 <strong>普通公用表表达式</strong> 和 <strong>递归公用表表达式</strong> 2 种。</li></ul><h3 id="1-普通公用表表达式"><a href="#1-普通公用表表达式" class="headerlink" title="1) 普通公用表表达式"></a>1) 普通公用表表达式</h3><p>普通公用表表达式的语法结构是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WITH</span> CTE名称 <br><span class="hljs-keyword">AS</span> （子查询）<br><span class="hljs-keyword">SELECT</span><span class="hljs-operator">|</span><span class="hljs-keyword">DELETE</span><span class="hljs-operator">|</span><span class="hljs-keyword">UPDATE</span> 语句;<br></code></pre></td></tr></table></figure><p>普通公用表表达式类似于子查询，不过，跟子查询不同的是，<strong>它可以被多次引用</strong>，而且可以被其他的普通公用表表达式所引用。</p><p>举例：查询员工所在的部门的详细信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> departments<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">IN</span> (<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> );<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+------------------+------------+-------------+</span><br><span class="hljs-operator">|</span> department_id <span class="hljs-operator">|</span> department_name  <span class="hljs-operator">|</span> manager_id <span class="hljs-operator">|</span> location_id <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+------------------+------------+-------------+</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">10</span>        <span class="hljs-operator">|</span> Administration   <span class="hljs-operator">|</span> <span class="hljs-number">200</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">20</span>        <span class="hljs-operator">|</span> Marketing        <span class="hljs-operator">|</span> <span class="hljs-number">201</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1800</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">30</span>        <span class="hljs-operator">|</span> Purchasing       <span class="hljs-operator">|</span> <span class="hljs-number">114</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">40</span>        <span class="hljs-operator">|</span> Human Resources  <span class="hljs-operator">|</span> <span class="hljs-number">203</span>        <span class="hljs-operator">|</span> <span class="hljs-number">2400</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">50</span>        <span class="hljs-operator">|</span> Shipping         <span class="hljs-operator">|</span> <span class="hljs-number">121</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">60</span>        <span class="hljs-operator">|</span> IT               <span class="hljs-operator">|</span> <span class="hljs-number">103</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1400</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">70</span>        <span class="hljs-operator">|</span> Public Relations <span class="hljs-operator">|</span> <span class="hljs-number">204</span>        <span class="hljs-operator">|</span> <span class="hljs-number">2700</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">80</span>        <span class="hljs-operator">|</span> Sales            <span class="hljs-operator">|</span> <span class="hljs-number">145</span>        <span class="hljs-operator">|</span> <span class="hljs-number">2500</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">90</span>        <span class="hljs-operator">|</span> Executive        <span class="hljs-operator">|</span> <span class="hljs-number">100</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">100</span>       <span class="hljs-operator">|</span> Finance          <span class="hljs-operator">|</span> <span class="hljs-number">108</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">110</span>       <span class="hljs-operator">|</span> Accounting       <span class="hljs-operator">|</span> <span class="hljs-number">205</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+------------------+------------+-------------+</span><br><span class="hljs-number">11</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>这个查询也可以用普通公用表表达式的方式完成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WITH</span> emp_dept_id<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id <span class="hljs-keyword">FROM</span> employees)<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> departments d <span class="hljs-keyword">JOIN</span> emp_dept_id e<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+------------------+------------+-------------+---------------+</span><br><span class="hljs-operator">|</span> department_id <span class="hljs-operator">|</span> department_name  <span class="hljs-operator">|</span> manager_id <span class="hljs-operator">|</span> location_id <span class="hljs-operator">|</span> department_id <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+------------------+------------+-------------+---------------+</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">90</span>       <span class="hljs-operator">|</span> Executive        <span class="hljs-operator">|</span> <span class="hljs-number">100</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span> <span class="hljs-number">90</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">60</span>       <span class="hljs-operator">|</span> IT               <span class="hljs-operator">|</span> <span class="hljs-number">103</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1400</span>        <span class="hljs-operator">|</span> <span class="hljs-number">60</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">100</span>      <span class="hljs-operator">|</span> Finance          <span class="hljs-operator">|</span> <span class="hljs-number">108</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span> <span class="hljs-number">100</span>           <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">30</span>       <span class="hljs-operator">|</span> Purchasing       <span class="hljs-operator">|</span> <span class="hljs-number">114</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span> <span class="hljs-number">30</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">50</span>       <span class="hljs-operator">|</span> Shipping         <span class="hljs-operator">|</span> <span class="hljs-number">121</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1500</span>        <span class="hljs-operator">|</span> <span class="hljs-number">50</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">80</span>       <span class="hljs-operator">|</span> Sales            <span class="hljs-operator">|</span> <span class="hljs-number">145</span>        <span class="hljs-operator">|</span> <span class="hljs-number">2500</span>        <span class="hljs-operator">|</span> <span class="hljs-number">80</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">10</span>       <span class="hljs-operator">|</span> Administration   <span class="hljs-operator">|</span> <span class="hljs-number">200</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span> <span class="hljs-number">10</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">20</span>       <span class="hljs-operator">|</span> Marketing        <span class="hljs-operator">|</span> <span class="hljs-number">201</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1800</span>        <span class="hljs-operator">|</span> <span class="hljs-number">20</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">40</span>       <span class="hljs-operator">|</span> Human Resources  <span class="hljs-operator">|</span> <span class="hljs-number">203</span>        <span class="hljs-operator">|</span> <span class="hljs-number">2400</span>        <span class="hljs-operator">|</span> <span class="hljs-number">40</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">70</span>       <span class="hljs-operator">|</span> Public Relations <span class="hljs-operator">|</span> <span class="hljs-number">204</span>        <span class="hljs-operator">|</span> <span class="hljs-number">2700</span>        <span class="hljs-operator">|</span> <span class="hljs-number">70</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>      <span class="hljs-number">110</span>      <span class="hljs-operator">|</span> Accounting       <span class="hljs-operator">|</span> <span class="hljs-number">205</span>        <span class="hljs-operator">|</span> <span class="hljs-number">1700</span>        <span class="hljs-operator">|</span> <span class="hljs-number">110</span>           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+------------------+------------+-------------+---------------+</span><br><span class="hljs-number">11</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>例子说明，公用表表达式可以起到子查询的作用。以后如果遇到需要使用子查询的场景，你可以在查询 之前，先定义公用表表达式，然后在查询中用它来代替子查询。而且，跟子查询相比，公用表表达式有 一个优点，就是定义过公用表表达式之后的查询，可以像一个表一样多次引用公用表表达式，而子查询 则不能。</p><h3 id="2-递归公用表表达式"><a href="#2-递归公用表表达式" class="headerlink" title="2)  递归公用表表达式"></a>2)  递归公用表表达式</h3><p>递归公用表表达式也是一种公用表表达式，只不过，除了普通公用表表达式的特点以外，它还有自己的特点，就是可以调用自己。它的语法结构是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span><br>CTE名称 <span class="hljs-keyword">AS</span> （子查询）<br><span class="hljs-keyword">SELECT</span><span class="hljs-operator">|</span><span class="hljs-keyword">DELETE</span><span class="hljs-operator">|</span><span class="hljs-keyword">UPDATE</span> 语句;<br></code></pre></td></tr></table></figure><p>递归公用表表达式由 2 部分组成，分别是种子查询和递归查询，中间通过关键字 UNION [ALL]进行连接。 这里的种子查询，意思就是获得递归的初始值。这个查询只会运行一次，以创建初始数据集，之后递归 查询会一直执行，直到没有任何新的查询数据产生，递归返回。</p><p>案例：针对于我们常用的employees表，包含employee_id，last_name和manager_id三个字段。如果a是b 的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下 属。</p><p>下面我们尝试用查询语句列出所有具有下下属身份的人员信息。</p><p>如果用我们之前学过的知识来解决，会比较复杂，至少要进行 4 次查询才能搞定：</p><ul><li>第一步，先找出初代管理者，就是不以任何别人为管理者的人，把结果存入临时表； </li><li>第二步，找出所有以初代管理者为管理者的人，得到一个下属集，把结果存入临时表； </li><li>第三步，找出所有以下属为管理者的人，得到一个下下属集，把结果存入临时表。 </li><li>第四步，找出所有以下下属为管理者的人，得到一个结果集。</li></ul><p>如果第四步的结果集为空，则计算结束，第三步的结果集就是我们需要的下下属集了，否则就必须继续 进行第四步，一直到结果集为空为止。比如上面的这个数据表，就需要到第五步，才能得到空结果集。 而且，最后还要进行第六步：把第三步和第四步的结果集合并，这样才能最终获得我们需要的结果集。</p><p>如果用递归公用表表达式，就非常简单了。我介绍下具体的思路。</p><ul><li>用递归公用表表达式中的种子查询，找出初代管理者。字段 n 表示代次，初始值为 1，表示是第一 代管理者。</li><li>用递归公用表表达式中的递归查询，查出以这个递归公用表表达式中的人为管理者的人，并且代次 的值加 1。直到没有人以这个递归公用表表达式中的人为管理者了，递归返回。</li><li>在最后的查询中，选出所有代次大于等于 3 的人，他们肯定是第三代及以上代次的下属了，也就是 下下属了。这样就得到了我们需要的结果集。</li></ul><p>这里看似也是 3 步，实际上是一个查询的 3 个部分，只需要执行一次就可以了。而且也不需要用临时表 保存中间结果，比刚刚的方法简单多了。</p><p>代码实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> cte<br><span class="hljs-keyword">AS</span><br>(<br><span class="hljs-keyword">SELECT</span> employee_id,last_name,manager_id,<span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> n <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">100</span><br><span class="hljs-comment">-- 种子查询，找到第一代领导</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> a.employee_id,a.last_name,a.manager_id,n<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">AS</span> a <span class="hljs-keyword">JOIN</span> cte<br><span class="hljs-keyword">ON</span> (a.manager_id <span class="hljs-operator">=</span> cte.employee_id) <span class="hljs-comment">-- 递归查询，找出以递归公用表表达式的人为领导的人</span><br>)<br><span class="hljs-keyword">SELECT</span> employee_id,last_name <span class="hljs-keyword">FROM</span> cte <span class="hljs-keyword">WHERE</span> n <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>总之，递归公用表表达式对于查询一个有共同的根节点的树形结构数据，非常有用。它可以不受层级的 限制，轻松查出所有节点的数据。如果用其他的查询方式，就比较复杂了。</p><h3 id="3-小结-1"><a href="#3-小结-1" class="headerlink" title="3) 小结"></a>3) 小结</h3><p>公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根 节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/2022/11/04/JavaSE/"/>
      <url>/2022/11/04/JavaSE/</url>
      
        <content type="html"><![CDATA[<h1 id="Ⅰ、面向对象"><a href="#Ⅰ、面向对象" class="headerlink" title="Ⅰ、面向对象"></a>Ⅰ、面向对象</h1><h2 id="1、面向过程与面向对象"><a href="#1、面向过程与面向对象" class="headerlink" title="1、面向过程与面向对象"></a>1、面向过程与面向对象</h2><p>（1）主要强调面向过程和面向对象的关注点不同，面向过程主要关注的是实现这个功能需要哪些步骤，而面向对象主要关注的是实现这个功能需要哪些对象的参与。面向对象是将现实世界分割成不同的单元，每个单元就是一个对象，对象与对象之间协作起来完成一个功能。</p><p>（2）C语言面向过程、C++半面向对象、Java面向对象。</p><p>（3）面向对象更符合人类的思维方式。</p><ul><li>OOA：面向对象分析</li><li>OOD：面向对象设计</li><li>OOP：面向对象编程</li><li>整个软件开发的过程，都是采用OO进行贯穿的。</li></ul><p>实现一个软件的过程：</p><ul><li>分析(A) –&gt; 设计(D) –&gt; 编程(P)</li></ul><hr><h2 id="2、类和对象的概念"><a href="#2、类和对象的概念" class="headerlink" title="2、类和对象的概念"></a>2、类和对象的概念</h2><p><strong>（1）什么是类</strong></p><ul><li>类实际上在现实世界当中是不存在的，是一个抽象的概念。是一个模板。是我们人类大脑进行“思考、总结、抽象”的一个结果。(主要是因为人类的大脑不一般才有了类的概念。)</li><li>类本质上是现实世界当中某些事物具有共同特征，将这些共同特征提取出来形成的概念就是一个“类”，“类”就是一个模板。<ul><li>比如：明星是一个类</li></ul></li></ul><p><strong>（2）什么是对象，什么是实例，什么是实例化</strong></p><ul><li><p>对象是实际存在的个体。（真实存在的个体）</p><ul><li><p>宋小宝就是一个对象</p></li><li><p>姚明就是一个对象</p></li><li><p>刘德华就是一个对象</p><ul><li><p>….</p></li><li><p>宋小宝、姚明、刘德华这3个对象都属于“明星”这个类。</p></li></ul></li></ul></li><li><p><strong>总结：</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab">类：不存在的，人类大脑思考总结一个模板（这个模板当中描述了共同特征。）<br>对象：实际存在的个体。<br>实例：对象还有另一个名字叫做实例。<br>实例化：通过类这个模板创建对象的过程，叫做：实例化。<br>抽象：多个对象具有共同特征，进行思考总结抽取共同特征的过程。<br><br>类 --【实例化】--&gt; 对象(实例)<br>对象 --【抽象】--&gt; 类<br></code></pre></td></tr></table></figure></li></ul><p><strong>（3）类&#x3D;属性+方法</strong></p><ul><li>属性来源于状态；</li><li>方法来源于动作&#x2F;行为；</li><li>这里所描述的属性就是成员变量中的实例变量。实例变量的值都是对象级别的，也就是说该变量的值会随着对象的不同而不同，例如：明星是一个类，有一个身高的属性（身高是一个实例变量），姚明是一个实际存在的对象，潘长江也是一个实际存在的对象，姚明和潘长江的身高值是不同的，所以在程序运行的时候，要访问身高这个属性，必须先有对象的存在。</li></ul><hr><h2 id="3、构造方法"><a href="#3、构造方法" class="headerlink" title="3、构造方法"></a>3、构造方法</h2><ul><li><p><strong>什么是构造方法，有什么用？</strong></p><ul><li>1、构造方法是一个特殊的方法，通过构造方法可以完成对象的创建，以及实例变量的初始化。换句话说：&#x3D;&#x3D;构造方法是用来创建对象，并且同时给对象赋值。&#x3D;&#x3D;（&#x3D;&#x3D;注意&#x3D;&#x3D;：实例变量没有手动赋值的时候，系统会赋默认值）</li><li>2、当一个类没有提供任何构造方法时，系统默认会提供一个无参的构造方法。（而这个构造方法被称为缺省构造器。）</li></ul></li><li><p><strong>怎么调用构造方法</strong></p><ul><li>构造方法的调用不能使用“.”的方式，必须使用运算符“new”，语法格式：new  构造方法名(实参)；</li></ul></li><li><p><strong>构造方法的语法结构</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[修饰符列表] 方法名（形式参数列表）&#123;<br><span class="hljs-code">构造方法体；</span><br><span class="hljs-code">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>第一：修饰符目前统一写：<code>public</code>。千万不要写<code>public static</code>。</li><li>第二：构造方法名必须和类名一致。</li><li>第三：构造方法不需要指定返回值类型，也不能写void，否则就是普通方法了。</li></ul></li><li><p><strong>构造方法的一些概念</strong></p><ul><li><p>①、当一个类中没有提供任何构造方法，系统默认提供一个无参数的构造方法。<br>这个无参数的构造方法叫做缺省构造器。</p></li><li><p>②、当一个类中手动的提供了构造方法，那么系统将不再默认提供无参数构造方法。<br>建议将无参数构造方法手动的写出来，这样一定不会出问题。</p></li><li><p>③、无参数构造方法和有参数的构造方法都可以调用。<br> Student x &#x3D; new Student();<br>                                Student y &#x3D; new Student(123);</p></li><li><p>④、构造方法支持方法重载吗？<br> 构造方法是支持方法重载的。<br>                            在一个类当中构造方法可以有多个。<br>                            并且所有的构造方法名字都是一样的。</p><ul><li>方法重载特点：在同一个类中，方法名相同，参数列表不同。</li></ul></li><li><p>⑤、对于实例变量来说，只要你在构造方法中没有手动给它赋值，系统都会默认赋值。那么默认赋值操作在什么时间段进行的？</p><ul><li>实例变量是在构造方法执行过程中完成初始化的，完成赋值。</li></ul></li></ul></li></ul><hr><h2 id="4、封装"><a href="#4、封装" class="headerlink" title="4、封装"></a>4、封装</h2><blockquote><p><strong>有了封装，才有继承，有了继承，才能说多态。</strong></p></blockquote><p><strong>①、面向对象的首要特征：封装 。什么是封装？有什么用？</strong></p><ul><li>现实生活中有很多现实的例子都是封装的。</li><li>例如：手机，电视机，笔记本电脑，照相机，这些都是外部有一个坚硬的壳儿。封装起来，保护内部的部件。保证内部的部件是安全的。另外封装了之后，对于我们使用者来说，我们是看不见内部的复杂结构的，我们也不需要关心内部有多么复杂，我们只需要操作外部壳儿上的几个按钮就可以完成操作。</li><li>那么封装，你觉得有什么用呢？</li></ul><blockquote><p>​<strong>封装的作用有两个：</strong><br><strong>​第一个作用：保证内部结构的安全。</strong><br><strong>​第二个作用：屏蔽复杂，暴露简单。</strong></p></blockquote><ul><li>在代码级别上，封装有什么用？<ul><li>一个类体当中的数据，假设封装之后，对于代码的调用人员来说，不需要关心代码的复杂实现，只需要通过一个简单的入口就可以访问了。</li><li>另外，类体中安全级别较高的数据封装起来，外部人员不能随意访问，来保证数据的安全性。</li></ul></li></ul><p></p><p><strong>②、怎么进行封装，代码怎么实现？</strong></p><ul><li>第一步：属性私有化（使用private关键字进行修饰)。</li><li>第二步：对外提供简单的操作入口。一个属性对外提供两个set和get方法。外部程序只能通过set方法修改，只能通过get方法读取，可以在set方法中设立关卡代码来保证数据的安全性。</li></ul><p>在强调一下：</p><ul><li><p>set和get方法都是实例方法，不能带static。</p></li><li><p>不带static的方法称为实例方法，实例方法的调用必须先new对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//set和get方法写的时候有严格的规范要求：（大家要按照规矩来）</span><br>set方法长这个样子：<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> set+属性名首字母大写(<span class="hljs-number">1</span>个参数)&#123;<br>xxx = <span class="hljs-number">1</span>个参数;<br>&#125;<br>get方法长这个样子：<br><span class="hljs-keyword">public</span> 返回值类型 get+属性名首字母大写(无参)&#123;<br><span class="hljs-keyword">return</span> xxx;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="5、static-和-this"><a href="#5、static-和-this" class="headerlink" title="5、static 和  this"></a>5、static 和  this</h2><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><p>1、static修饰的统一都是静态的，都是类相关的，不需要new对象。直接采用“类名.”访问。</p><p>2、当一个属性是类级别的属性，所有对象的这个属性的值是一样的，建议定义为静态变量。在方法区只保留一份，节省内存开销。</p><p>3、static修饰的变量：静态变量</p><p>4、static修饰的方法：静态方法</p><ul><li><p><strong>变量的分类</strong></p><ul><li><p>变量根据声明的位置进行划分：</p><ul><li>在方法体内声明的变量叫做：局部变量</li><li>在方法体外声明的变量叫做：成员变量</li></ul></li><li><p>成员变量又可以分为：</p><ul><li>实例变量</li><li>静态变量</li></ul></li></ul></li></ul><p>注意：</p><ul><li><p>静态变量在类加载时初始化，不需要new对象，静态变量的空间就开出来了，且静态变量存储在方法区中</p></li><li><p>java一共就有三个变量，变量存储的位置如下：</p></li></ul><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/1.5.1.24r7mgamj34w.webp" alt="1"></p><hr><ul><li><p><strong>静态代码块：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">static</span>&#123;<br><span class="hljs-comment">//java语句;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>静态代码块在类加载的时候就执行，并且只执行一次。</p></li><li><p>一个类可以有多个静态代码块。</p></li></ul></li></ul><p>注意：静态代码块在类加载时执行，并且在main方法执行之前执行。</p><ul><li><strong>静态代码块的作用：</strong><ul><li>静态代码并不常用（不是每一个类都要写的东西）</li><li>静态代码块实际上是sun公司给我们程序员一个特殊的时刻，即：类加载时刻</li></ul></li></ul><hr><ul><li><p><strong>实例代码块：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">&#123;<br><span class="hljs-comment">//java语句;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>只要是构造方法执行，实例代码块必然在构造方法执行之前，自动执行。</p></li><li><p>实际上是sun公司给我们程序员一个特殊的时刻，即：对象构建时刻。</p></li></ul></li></ul><hr><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><blockquote><ul><li><strong>1、this是一个关键字，是一个引用，保存内存地址指向自身。</strong></li><li><strong>2、this可以使用在实例方法中，也可以使用在构造方法中。</strong></li><li><strong>3、this出现在实例方法中其实代表的是当前对象。</strong></li><li><strong>4、this不能使用在静态方法中。(this代表当前对象，静态方法中不存在当前对象)</strong></li><li><strong>5、this. 大部分情况下可以省略，但是用来区分局部变量和实例变量的时候不能省略。</strong></li><li><strong>6、this()这种语法只能出现在构造方法第一行，表示当前构造方法调用本类其他的构造方法，目的是代码复用。</strong></li></ul></blockquote><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/1.5.1.6antroddakw0.webp" alt="1"></p><hr><ul><li><p><strong>this()语法：</strong></p><ul><li><p>作用：代码复用。</p></li><li><p>例如：调用无参构造方法是，默认日期为1970-1-1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> day;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">()</span>&#123;<br>         <span class="hljs-built_in">this</span>(<span class="hljs-number">1970</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);  <span class="hljs-comment">//调用本类其他的构造方法,目的是代码复用，且 该语句必须放在第一行</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        this.year = 1970;</span><br><span class="hljs-comment">        this.month = 1;</span><br><span class="hljs-comment">        this.day = 1;</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">(<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)</span>&#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.month = month;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h2><ul><li><strong>什么是继承，有什么用？</strong><ul><li>继承：在现实世界当中也是存在的，例如：父亲很有钱，儿子不用努力也很有钱。</li><li>继承的作用：<ul><li>基本作用：子类继承父类，代码可以得到复用。</li><li>主要(重要)作用：因为有了继承关系，才有了后期的方法覆盖和多态机制。</li></ul></li></ul></li><li><strong>继承的特性：</strong></li></ul><ul><li>父类中的成员，无论是<strong>公有(public)还是私有(private)，均会被子类继承</strong>。<ul><li>子类虽会继承父类私有(private)的成员，但<strong>子类不能对继承的私有成员直接进行访问，可通过继承的get&#x2F;set方法进行访问</strong>。</li></ul></li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。也可以可以用自己的方式实现父类的方法。<ul><li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li></ul></li><li>提高了类之间的耦合性（继承的缺点：耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。<ul><li>B类继承A类，则称A类为超类(superclass)、父类、基类，B类则称为子类(subclass)、派生类、扩展类。</li></ul></li><li>Java 中的类没有显示的继承任何类，则默认继承 Object类，Object类是 Java 语言提供的根类（老祖宗类），也就是说，一个对象与生俱来就有 Object类型中所有的特征。</li></ul><hr><h2 id="7、方法覆盖-x2F-方法重载"><a href="#7、方法覆盖-x2F-方法重载" class="headerlink" title="7、方法覆盖&#x2F;方法重载"></a>7、方法覆盖&#x2F;方法重载</h2><blockquote><h3 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a><strong>方法覆盖</strong></h3></blockquote><ul><li><p><strong>什么时候考虑使用方法覆盖？</strong></p><ul><li>父类中的方法无法满足子类的业务需求，子类有必要对继承过来的方法进行覆盖。</li></ul></li><li><p><strong>什么条件满足的时候构成方法覆盖？</strong></p><ul><li>第一：有继承关系的两个类</li><li>第二：具有相同方法名、返回值类型、形式参数列表</li><li>第三：访问权限不能更低，可以更高。</li><li>第四：重写之后的方法不能比之前方法抛出更多的异常。</li></ul></li><li><p>注意：</p><ul><li>一、方法覆盖只是针对于方法，和属性无关。</li><li>二、私有方法无法覆盖。</li><li>三、构造方法不能被继承，所以构造方法也不能被覆盖。</li><li>四、方法覆盖只是针对实例方法，静态方法覆盖没有意义。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//私有方法无法覆盖。</span><br><br>方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义。（这是因为方法覆盖通常和多态联合起来）<br><br><span class="hljs-comment">//总结两句话：</span><br>私有不能覆盖。<br>静态不谈覆盖。<br><br><span class="hljs-comment">//在方法覆盖中，关于方法的返回值类型。</span><br>什么条件满足之后，会构成方法的覆盖呢？<br><span class="hljs-number">1</span>、发生具有继承关系的两个类之间。<br><span class="hljs-number">2</span>、父类中的方法和子类重写之后的方法：<br>具有相同的方法名、相同的形式参数列表、相同的返回值类型。<br><br><span class="hljs-comment">//学习了多态机制之后：</span><br>“相同的返回值类型”可以修改一下吗？<br>对于返回值类型是基本数据类型来说，必须一致。<br>对于返回值类型是引用数据类型来说，重写之后返回值类型可以变的更小（但意义不大，实际开  发中没人这样写。）<br></code></pre></td></tr></table></figure><hr><blockquote><h3 id="方法重载-overload"><a href="#方法重载-overload" class="headerlink" title="方法重载 overload"></a><strong>方法重载 overload</strong></h3></blockquote><ul><li><p>当在一个类中，如果功能相似的话，建议将名字定义的一样，这样代码美观，并且方便编程</p></li><li><p>方法重载的&#x3D;&#x3D;条件&#x3D;&#x3D;：</p><ul><li>在同一个类中</li><li>方法名相同</li><li>参数列表不同</li></ul></li><li><p><strong>方法重载和方法覆盖有什么区别？</strong></p><ul><li>方法重载发生在同一个类当中。</li><li>方法覆盖是发生在具有继承关系的父子类之间。</li><li>方法重载是一个类中，方法名相同，参数列表不同。</li><li>方法覆盖是具有继承关系的父子类，并且重写之后的方法必须和之前的方法一致：方法名一致、参数列表一致、返回值类型一致。</li></ul></li></ul><hr><h2 id="8、多态"><a href="#8、多态" class="headerlink" title="8、多态"></a>8、多态</h2><ul><li><p><strong>什么是多态?</strong></p><ul><li>多种形态，多种状态，编译和运行有两个不同的状态。</li><li>编译的时候一种形态。<br>​运行的时候另一种形态。</li><li>编译期叫做静态绑定。<br>​运行期叫做动态绑定。</li></ul></li><li><p>多态的典型代码：父类型的引用指向子类型的对象。（java中允许这样写代码！！！）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//cat类 继承了 Animal类 ,且重写了父类的move()方法</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>a.move();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：a2.move()</span><br><span class="hljs-comment">java 程序分为编译阶段和运行阶段。</span><br><span class="hljs-comment">        编译阶段：</span><br><span class="hljs-comment">        对于编译器来说，编译器发现a的类型是Animal，所以编译器在检车语法的时候会去Animal.class字节码文件中(也叫Animal类中)找move()方法，找到了，绑定上move()    方法，编译通过，静态绑定成功。</span><br><span class="hljs-comment">        运行阶段：</span><br><span class="hljs-comment">        运行阶段的时候，实际上在堆内存中创建的java对象是Cat对象，所以move的时候，真正参与move 的对象是一只猫，所以运行阶段会动态执行Cat对象中的move()方法。这个阶段属于运行         阶段绑定。</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><hr><h3 id="①多态基础语法"><a href="#①多态基础语法" class="headerlink" title="①多态基础语法"></a>①多态基础语法</h3><p>（1）java语言规定，只要两个类之间存在继承关系，则支持向上转型和向下转型。<br>        （2）强调：无论是向上转型还是向下转型，要想编译通过，两种类型之间必须存在继承关系。<br>        （3）向上转型（upcasting）：子转换成父，又叫做自动类型转换。例如：Animal a &#x3D; new Cat();<br>        （4）向下转型（downcasting）：父转换成子，又叫做强制类型转换，例如：Cat c &#x3D; (Cat)a;  需要添加强制类型转换符。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">什么时候需要向下转型？<br><span class="hljs-code">需要调用或者执行子类对象中特有的方法。</span><br><span class="hljs-code">必须进行向下转型，才可以调用。</span><br><span class="hljs-code">向下转型有风险吗？</span><br><span class="hljs-code">容易出现ClassCastException（类型转换异常）</span><br><span class="hljs-code">怎么避免这个风险？</span><br><span class="hljs-code">instanceof运算符，可以在程序运行阶段动态的判断某个引用指向的对象是否为某一种类型。</span><br><span class="hljs-code">养成好习惯，向下转型之前一定要使用instanceof运算符进行判断。</span><br><span class="hljs-code">不管是向上转型还是向下转型，首先他们之间必须有继承关系，这样编译器就不会报错。</span><br></code></pre></td></tr></table></figure><p>（5）典型的多态代码是父类型引用指向子类型对象，程序分编译阶段和运行阶段，编译阶段绑定的是父类中的方法（父类中没有这个方法，编译器会报错），但运行阶段和堆内存中实际对象有关，运行的时候绑定的是实际对象的方法。</p><ul><li><p>什么情况下必须做向下转型：</p><ul><li>当访问子类对象中特有方法的时候。</li></ul></li><li><p><strong>instanceof运算符</strong>。</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">第一、instanceof运算符，可以在程序运行阶段动态的判断某个引用指向的对象是否为某一种类型.<br>第二、instanceof语法：  (引用 instanceof 类型)<br>第三、instanceof运行结果只能是：true/false<br>第四、c是一个引用，c变量保存了内存地址指向了堆中的对象。<br><span class="hljs-code">假设(c instanceof Cat) 为true 表示：</span><br><span class="hljs-code">c引用指向的堆内存中的java对象是一个Cat类型</span><br><span class="hljs-code">假设(c instanceof Cat) 为false 表示：</span><br><span class="hljs-code">c引用指向的堆内存中的java对象不是一个Cat类型</span><br><span class="hljs-code"></span><br><span class="hljs-code">所以向下转型代码可以如下写：//可以很好的避免ClassCastException（类型转换异常）</span><br><span class="hljs-code">if(c instanceof Cat)&#123; //养成好习惯，向下转型之前一定要使用instanceof运算符进行判断</span><br><span class="hljs-code">Cat y = (Cat)c;</span><br><span class="hljs-code">....</span><br><span class="hljs-code">&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="②多态在开发中的作用"><a href="#②多态在开发中的作用" class="headerlink" title="②多态在开发中的作用"></a>②多态在开发中的作用</h3><p>（1）面向抽象编程，不要面向具体</p><p>（2）多态的作用是降低程序耦合度，提高程序扩展力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Dog d)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Cat c)</span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//以上的代码中表示：Master和Dog以及Cat的关系很紧密（耦合度高）。导致扩展力很差。</span><br>    <br><span class="hljs-comment">//解决如下:创建一个Pet类，让Dog和Cat去继承Pet类，然后去重写Pet类中的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Pet pet)</span>&#123;    <span class="hljs-comment">//参数列表中 (Pet pet = new Dog/Cat())</span><br>pet.eat();<br>&#125;<br>&#125;<br><span class="hljs-comment">//以上的代表中表示：Master和Dog以及Cat的关系就脱离了，Master关注的是Pet类。</span><br><span class="hljs-comment">//这样Master和Dog以及Cat的耦合度就降低了，提高了软件的扩展性。</span><br></code></pre></td></tr></table></figure><p>（3）软件开发原则，最基本的原则：OCP（开闭原则）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">什么是开闭原则？<br><span class="hljs-code">对扩展开放，对修改关闭。</span><br><span class="hljs-code">在软件的扩展过程当中，修改的越少越好。</span><br><span class="hljs-code"></span><br><span class="hljs-code">目的是：降低程序耦合度，提高程序扩展力。</span><br><span class="hljs-code">面向抽象编程，不建议面向具体编程。</span><br></code></pre></td></tr></table></figure><hr><h2 id="9、super-关键字"><a href="#9、super-关键字" class="headerlink" title="9、super 关键字"></a>9、super 关键字</h2><ul><li>由于子类不能继承父类的构造方法，因此，如果要调用父类的构造方法，可以使用 super 关键字。super 可以用来访问父类的构造方法、普通方法和属性。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown">super能出现在实例方法和构造方法中。   this能出现在实例方法和构造方法中。<br><br>super的语法是：“super.”、“super()”     this的语法是：“this.”、“this()”<br><br>super不能使用在静态方法中。      this不能使用在静态方法中。<br><br>super. 大部分情况下是可以省略的。<br><br>super.什么时候不能省略呢？   this.什么时候不能省略呢？<br><span class="hljs-code">父类和子类中有同名属性，或者说有同样的方法，区分局部变量肯实例变量时不能省略</span><br><span class="hljs-code">想在子类中访问父类的，super. 不能省略。</span><br><span class="hljs-code"></span><br>super() 只能出现在构造方法第一行， this() 只能出现在构造方法第一行<br><span class="hljs-code">通过当前的构造方法去调用“父类”中调用本类中其他的构造方法</span><br><span class="hljs-code">的构造方法，    目的是代码复用</span><br><span class="hljs-code">目的是：创建子类对象的时候，  </span><br><span class="hljs-code">先初始化父类型特征。</span><br><span class="hljs-code"></span><br>super的使用：<br><span class="hljs-code">super.属性名[访问父类的属性]</span><br><span class="hljs-code">super.方法名(实参)  [访问父类的方法]</span><br><span class="hljs-code">super(实参) [访问父类的方法]</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>当一个构造方法第一行：</p><ul><li><p>既没有this()又没有super()的话，默认会有一个super()；</p></li><li><p>表示通过当前子类的构造方法调用父类的无参构造方法。</p></li><li><p>所以必须保证父类无参构造方法存在。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bird</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Bird&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果为：</span><br><span class="hljs-comment">Animal</span><br><span class="hljs-comment">Bird</span><br><span class="hljs-comment">说明子类的第一行省略了super();</span><br><span class="hljs-comment">去调用了父类Animal的无参构造方法</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="Ⅱ、面向对象高级"><a href="#Ⅱ、面向对象高级" class="headerlink" title="Ⅱ、面向对象高级"></a>Ⅱ、面向对象高级</h1><h2 id="1、final-关键字"><a href="#1、final-关键字" class="headerlink" title="1、final 关键字"></a>1、final 关键字</h2><p><strong>①什么是final</strong></p><ul><li>final 表示最终的，不可变的。</li><li>final 可以修饰变量、方法、类。</li></ul><p><strong>②final 特征：</strong></p><ul><li><p>final修饰的类无法继承。</p></li><li><p>final修饰的方法无法覆盖。</p></li><li><p>final修饰的变量只能赋一次值。</p></li><li><p>final修饰的引用一旦指向某个对象，则不能再重新指向其它对象，但该引用指向的对象内部的数据是可以修改的。</p></li><li><p>final修饰的实例变量必须手动初始化赋值，不能采用系统默认值。</p></li><li><p>final修饰的实例变量一般和&#x3D;&#x3D;static&#x3D;&#x3D;联合使用，称为常量。(常量和静态变量都是存储在方法区)，常量一般也是公开的，因为公开了也不能修改常量的值。</p><ul><li>例如：<code>public static final double PI = 3.1415926;</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//final修饰的类无法继承。</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<span class="hljs-comment">//报错</span><br>&#125;<br><span class="hljs-comment">//错误，被final修饰的类无法被继承</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//final修饰的方法无法覆盖。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//报错</span><br>        <span class="hljs-built_in">super</span>.Animal();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//错误，final修饰的方法无法覆盖。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//final修饰的变量只能赋一次值。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>   A = <span class="hljs-number">50</span>;<br>   System.out.println(A);<span class="hljs-comment">//报错，无法为最终变量分配值</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h2 id="2、抽象类"><a href="#2、抽象类" class="headerlink" title="2、抽象类"></a>2、抽象类</h2><blockquote><p><strong>类到对象是实例化，对象到类是抽象。</strong></p></blockquote><h3 id="①-什么是抽象类？"><a href="#①-什么是抽象类？" class="headerlink" title="① 什么是抽象类？"></a>① 什么是抽象类？</h3><ul><li>类和类之间具有共同的特征，将这些共同特征提取出来，形成的就是抽象类。</li></ul><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/2.2.1.zmid208c7s0.webp" alt="2"></p><hr><h3 id="②-抽象类属于什么类型？"><a href="#②-抽象类属于什么类型？" class="headerlink" title="② 抽象类属于什么类型？"></a>② 抽象类属于什么类型？</h3><ul><li>抽象类属于引用数据类型。</li></ul><hr><h3 id="③-抽象类怎么定义？"><a href="#③-抽象类怎么定义？" class="headerlink" title="③ 抽象类怎么定义？"></a>③ 抽象类怎么定义？</h3><ul><li><p>在class前添加abstract关键字就行了。</p></li><li><p><strong>语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表]<span class="hljs-keyword">abstract</span> class 类名&#123;<br><span class="hljs-comment">//类体语句；</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="④-抽象类的特征"><a href="#④-抽象类的特征" class="headerlink" title="④ 抽象类的特征"></a>④ 抽象类的特征</h3><ul><li>抽象的方法只需在抽象类中，提供声明，不需要实现。</li><li>抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中。</li><li>一个非抽象的类，继承抽象类，必须将抽象类中的抽象方法进行覆盖&#x2F;重写&#x2F;实现。如果在子类中不复写该抽象方法，那么必须将此类再次声明为抽象类。</li><li>抽象的类是不能实例化的，就像现实世界中人其实是抽象的，张三、李四才是具体的。</li><li>抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。</li><li>抽象方法不能被 final 修饰，因为抽象方法就是要被子类实现的。</li><li>abstract 和 final 不能共存。</li></ul><hr><h3 id="⑤-举例："><a href="#⑤-举例：" class="headerlink" title="⑤ 举例："></a>⑤ 举例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.A();<br>        <span class="hljs-comment">//new Person();//会报错，抽象类不能实例化</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//父类（抽象类）</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>;  <span class="hljs-comment">//抽象方法，必须出现在抽象类中，且必须在子类中重写该方法</span><br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;A的构造方法&quot;</span>);<br>   &#125;;<br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//抽象类中可以有非抽象方法</span><br>       System.out.println(<span class="hljs-string">&quot;普通方法&quot;</span>);<br>   &#125;;<br>&#125;<br><span class="hljs-comment">//子类（非抽象类）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//实现父类的抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//super();//默认会有个super()方法，调用父类的无参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;ss&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*结果：</span><br><span class="hljs-comment">A的构造方法</span><br><span class="hljs-comment">ss</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><hr><hr><h2 id="3、接口"><a href="#3、接口" class="headerlink" title="3、接口"></a>3、接口</h2><blockquote><p><strong>接口我们可以看作是抽象类的一种特殊情况，在接口中只能定义抽象的方法和常量。</strong></p></blockquote><h3 id="①-接口的特征"><a href="#①-接口的特征" class="headerlink" title="① 接口的特征"></a>① 接口的特征</h3><ul><li>接口是一种“引用数据类型”。</li><li>接口是完全抽象的。</li><li>接口中方法不能有方法体。</li><li>接口支持多继承，一个接口可以继承多个接口。</li><li>接口中只有常量+抽象方法。</li><li>接口中的方法默认都是public abstract的，可以省略 。</li><li>接口中的变量默认都是public static final类型的，可以省略。</li><li>接口不能被实例化，接口中没有构造函数的概念 。</li><li>接口中的方法只能通过类来实现，通过implements 关键字。</li><li>如果一个类实现了接口，那么接口中所有的方法必须实现。</li><li>一个类可以实现多个接口。</li></ul><hr><h3 id="②-举例"><a href="#②-举例" class="headerlink" title="②  举例"></a>②  举例</h3><blockquote><p>[修饰符列表]  interface  接口名 { }</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">D</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> d.sum(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>        System.out.println(sum);<br>        System.out.println(A.age);<span class="hljs-comment">//访问接口中的常量用&quot;类名.&quot;的方式</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果为：</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">13</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<span class="hljs-comment">//接口中只有常量+抽象方法。</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<span class="hljs-comment">//接口中的方法默认都是public abstract的，可以省略。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;   <span class="hljs-comment">//接口中的变量默认都是public static final类型的，可以省略。</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>&#123;&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>,B&#123;&#125;  <span class="hljs-comment">//一个接口可以继承多个接口。</span><br><br><span class="hljs-comment">//类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>,B&#123;<span class="hljs-comment">//一个类可以实现多个接口。</span><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//类必须实现接口中的所有方法。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="③-接口在开发中的作用"><a href="#③-接口在开发中的作用" class="headerlink" title="③ 接口在开发中的作用"></a>③ 接口在开发中的作用</h3><ul><li><p>注意：接口在开发中的作用，类似于多态在开发中的作用。</p></li><li><p>多态：面向抽象编程，不要面向具体编程。降低程序的耦合度。提高程序的扩展力。</p></li><li><p><strong>接口是不是完全抽象的？</strong>是。</p><ul><li>而我们以后正好要求，面向抽象编程。</li><li>面向抽象编程这句话以后可以修改为：面向接口编程。</li><li>有了接口就有了可插拔。可插拔表示扩展力很强。不是焊接死的。</li><li>比如主板和内存条之间有插槽，这个插槽就是接口，内存条坏了，可以重新买一个换下来。这叫做高扩展性。（低耦合度。）</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">总结一句话：三个字“解耦合”<br><span class="hljs-code">面向接口编程，可以降低程序的耦合度，提高程序的扩展力。符合OCP开原则。</span><br><span class="hljs-code">接口的使用离不开多态机制。（接口+多态才可以达到降低耦合度。）</span><br><span class="hljs-code"></span><br><span class="hljs-code">接口可以解耦合，解开的是谁和谁的耦合！！！</span><br><span class="hljs-code">任何一个接口都有调用者和实现者。</span><br><span class="hljs-code">接口可以将调用者和实现者解耦合。</span><br><span class="hljs-code">调用者面向接口调用。</span><br><span class="hljs-code">实现者面向接口编写实现。</span><br><span class="hljs-code"></span><br><span class="hljs-code">以后进行大项目的开发，一般都是将项目分离成一个模块一个模块的，</span><br><span class="hljs-code">模块和模块之间采用接口衔接。降低耦合度。</span><br></code></pre></td></tr></table></figure><hr><h2 id="4、类型和类型之间的关系"><a href="#4、类型和类型之间的关系" class="headerlink" title="4、类型和类型之间的关系"></a>4、类型和类型之间的关系</h2><p><strong>is a（继承）、has a（关联）、like a（实现）</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown">is a：<br><span class="hljs-code">Cat is a Animal（猫是一个动物）</span><br><span class="hljs-code">凡是能够满足is a的表示“继承关系”</span><br><span class="hljs-code">A extends B</span><br><span class="hljs-code"></span><br>has a：<br><span class="hljs-code">I has a Pen（我有一支笔）</span><br><span class="hljs-code">凡是能够满足has a关系的表示“关联关系”</span><br><span class="hljs-code">关联关系通常以“属性”的形式存在。</span><br><span class="hljs-code">A&#123;</span><br><span class="hljs-code">B b;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">like a:</span><br><span class="hljs-code">Cooker like a FoodMenu（厨师像一个菜单一样）</span><br><span class="hljs-code">凡是能够满足like a关系的表示“实现关系”</span><br><span class="hljs-code">实现关系通常是：类实现接口。</span><br><span class="hljs-code">A implements B</span><br></code></pre></td></tr></table></figure><hr><hr><h2 id="5、抽象类和接口的区别"><a href="#5、抽象类和接口的区别" class="headerlink" title="5、抽象类和接口的区别"></a>5、抽象类和接口的区别</h2><p>在这里我们只说一下抽象类和接口在语法上的区别。至于以后抽象类和接口应该怎么进行选择，通过后面的项目去体会&#x2F;学习。</p><ul><li><p>抽象类是半抽象的。<br>接口是完全抽象的</p></li><li><p>抽象类中有构造方法。<br>接口中没有构造方法。</p></li><li><p>接口和接口之间支持多继承。<br>类和类之间只能单继承。</p></li><li><p>一个类可以同时实现多个接口。<br>一个抽象类只能继承一个类（单继承）。</p></li></ul><p>接口中只允许出现常量和抽象方法。</p><p>这里先透露一个信息：<br>                以后接口使用的比抽象类多。一般抽象类使用的还是少。<br>                接口一般都是对“行为”的抽象。。</p><hr><hr><h2 id="6、包和import"><a href="#6、包和import" class="headerlink" title="6、包和import"></a>6、包和import</h2><h3 id="①-package"><a href="#①-package" class="headerlink" title="① package"></a><strong>① package</strong></h3><blockquote><ul><li><strong>为什么要使用package？</strong><ul><li>package是java中的包机制，包机制的作用是为了方便程序的管理。</li><li>不同功能的类分别存放在不同的包下。</li></ul></li></ul></blockquote><ul><li><p><strong>package怎么用？</strong></p><ul><li>第一：package出现在java源文件第一行。</li><li>第二：带有包名怎么编译？javac -d . xxx.jav</li><li>第三：怎么运行？java 完整类名</li></ul></li><li><p><strong>补充：</strong></p><ul><li>以后说类名的时候，如果带着包名描述，表示完整类名。如果没有带包描述的话，表示简类名</li><li>java.util.Scanner 完整类名。</li><li>Scanner 简类名。</li></ul></li></ul><hr><h3 id="②-import"><a href="#②-import" class="headerlink" title="② import"></a><strong>② import</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span>什么时候不需要？<br>java.lang不需要。<br>同包下不需要。 <br>其它一律都需要。<br>怎么用？<br><span class="hljs-keyword">import</span> 完整类名;<br><span class="hljs-keyword">import</span> 包名.*;<br><br><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-comment">// 完整类名。</span><br><br><span class="hljs-comment">// 同学的疑问：这样是不是效率比较低。</span><br><span class="hljs-comment">// 这个效率不低，因为编译器在编译的时候，会自动把*变成具体的类名。</span><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">// 想省懒劲你不能太省了。</span><br><span class="hljs-keyword">import</span> java.*; 这是不允许的，因为在java语言中规定，这里的*只代表某些类的名字。<br></code></pre></td></tr></table></figure><h3 id="③-JDK-常用开发包"><a href="#③-JDK-常用开发包" class="headerlink" title="③ JDK 常用开发包"></a>③ JDK 常用开发包</h3><ul><li>java.lang，此包 Java 语言标准包，使用此包中的内容无需 import 引入 </li><li>java.sql，提供了 JDBC 接口类</li><li>java.util，提供了常用工具类</li><li>java.io，提供了各种输入输出流</li></ul><hr><hr><h2 id="7、访问控制权限修饰符"><a href="#7、访问控制权限修饰符" class="headerlink" title="7、访问控制权限修饰符"></a>7、访问控制权限修饰符</h2><ul><li><p>四种访问修饰符：</p><ul><li><p>private私有</p></li><li><p>public 公开</p></li><li><p>protected  受保护</p></li><li><p>没有修饰符默认</p></li></ul></li></ul><blockquote><p><strong>所以这四种访问修饰符使用的范围从大到小依次是<br>        public &gt; protected &gt; default &gt; private</strong></p></blockquote><table><thead><tr><th align="center">范围</th><th align="center">private</th><th align="center">default</th><th align="center">protected</th><th align="center">public</th></tr></thead><tbody><tr><td align="center">同一个类</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">同一个包</td><td align="center"></td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">不同包的子类</td><td align="center"></td><td align="center"></td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">不同包的非子类</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✔</td></tr></tbody></table><ul><li><strong>访问控制权限修饰符可以修饰什么？</strong><ul><li>属性（4个都能用）</li><li>方法（4个都能用）</li><li>类  （public和默认能用，其它不行。）</li><li>接口（public和默认能用，其它不行。）</li><li>…..</li></ul></li></ul><hr><hr><h2 id="8、Object类"><a href="#8、Object类" class="headerlink" title="8、Object类"></a>8、Object类</h2><blockquote><p><strong>这个老祖宗类中的方法我们需要先研究一下，因为这些方法都是所有子类通用的。<br>任何一个类默认继承Object。就算没有直接继承，最终也会间接继承。</strong></p></blockquote><ul><li><p><strong>Object类当中有哪些常用的方法？</strong></p><ul><li>我们去哪里找这些方法呢？<ul><li>第一种方法：去源代码当中。（但是这种方式比较麻烦，源代码也比较难）</li><li>第二种方法：去查阅java的类库的帮助文档。</li></ul></li></ul></li><li><p><strong>什么是API？</strong></p><ul><li>应用程序编程接口。（Application Program Interface）</li><li>整个JDK的类库就是一个javase的API。</li><li>每一个API都会配置一套API帮助文档。</li><li>SUN公司提前写好的这套类库就是API。（一般每一份API都对应一份API帮助文档。）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">目前为止我们只需要知道这几个方法即可：<br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>   <span class="hljs-comment">// 负责对象克隆的。</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 获取对象哈希值的一个方法。</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>    <span class="hljs-comment">// 判断两个对象是否相等</span><br>String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>    <span class="hljs-comment">// 将对象转换成字符串形式</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span>     <span class="hljs-comment">// 垃圾回收器负责调用的方法</span><br></code></pre></td></tr></table></figure><hr><h3 id="①-toString"><a href="#①-toString" class="headerlink" title="① toString( )"></a>① toString( )</h3><ul><li><p>源代码toString()方法的默认实现是：</p><ul><li>类名@对象的内存地址转换为十六进制的形式。</li></ul></li><li><p>toString()方法的目的：</p><ul><li>通过调用这个方法可以将一个”java对象“ 转换成 ”字符串表示形式“。</li></ul></li><li><p>其实sun公司开发java语言的时候，&#x3D;&#x3D;建议&#x3D;&#x3D;所有的子类都去&#x3D;&#x3D;重写&#x3D;&#x3D;toString方法。</p><ul><li>toString方法应该是一个简洁的、详实的、易阅读的。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(<span class="hljs-string">&quot;陈虞威&quot;</span>,<span class="hljs-number">23</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> a.toString();<br>        <br><span class="hljs-comment">//1、重写toString()方法之前 ，</span><br>        System.out.println(s);<span class="hljs-comment">//结果为：com.atguigu.A@7f31245a</span><br><br>        <span class="hljs-comment">//2.重写toString()方法之后</span><br>        System.out.println(s);<span class="hljs-comment">//结果为：A&#123;name=&#x27;陈虞威&#x27;, age=23&#125;</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-comment">//重写toString()方法</span><br> <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p>以后所有类的toString()方法是需要重写的。</p><ul><li>重写规则，越简单越明了就好。</li></ul></li><li><p>System.out.println(引用)：这里会自动调用“引用”的 toString() 方法。</p></li><li><p>String类是SUN写的，toString方法已经重写了。</p></li></ul><hr><h3 id="②-equals"><a href="#②-equals" class="headerlink" title="② equals( )"></a>② equals( )</h3><ul><li><p>equals 的源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj);<br>&#125;<br><span class="hljs-comment">//以上为Object的默认实现</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>目的：</strong></p><ul><li>以后编程中，都要通过equals方法来判断两个对象是否相等。</li></ul><p><strong>对比：</strong></p><ul><li>&#x3D;&#x3D;：判断两个基本数据类型的数据是否相等。</li><li>equals()：判断两个对象 (也叫引用数据类型) 是否相等。</li></ul><p><strong>总结：</strong></p><ul><li>以后所有类的equals方法也需要重写，因为Object中的equals方法比较的是两个对象的内存地址，我们应该比较内容，所以需要重写。</li><li>没重写之前比较的是内存地址，重写之后，比较的是内容。</li><li>重写规则：自己定，主要看是什么和什么相等时表示两个对象相等。</li><li>基本数据类型比较实用：   &#x3D;&#x3D;</li><li>对象和对象比较：   调用equals方法</li><li>String类是SUN编写的，所以String类的equals方法重写了。<ul><li>以后判断两个字符串是否相等，最好不要使用&#x3D;&#x3D;，要调用字符串对象的equals方法。</li><li>注意：重写equals方法的时候要彻底。</li></ul></li></ul><hr><h3 id="③-finalize"><a href="#③-finalize" class="headerlink" title="③ finalize( )"></a>③ finalize( )</h3><blockquote><p><strong>这个方法是protected修饰的，在Object类中这个方法的源代码是？</strong><br>            <strong>protected void finalize() throws Throwable { }</strong></p></blockquote><ul><li><p>这个方法不需要程序员去手动调用，JVM的垃圾回收器负责调用这个方法。</p><ul><li>只需要重写 finalize( )方法即可。</li><li>GC：负责调用 finalize( )方法。</li></ul></li><li><p>finalize( )方法同样也是sun公司为程序员准备的一个时机，垃圾回收时机，和静态代码块类似。</p></li><li><p>注意：</p><ul><li>java中垃圾回收器不是轻易启动的，垃圾太少，或者时间没到，种种条件下，有可能启动，也有可能不启动。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.gc();<span class="hljs-comment">//建议启动垃圾回收器</span><br><span class="hljs-comment">//只是建议，可以启动，也可能不启动</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="④hashCode"><a href="#④hashCode" class="headerlink" title="④hashCode"></a>④hashCode</h3><blockquote><p><strong>在Object中的hashCode方法是怎样的？</strong><br><strong>Public native int  hashCode( );</strong><br><strong>这和方法是抽象方法，带有native，底层调用C++程序</strong></p></blockquote><ul><li>hashCode()方法返回的是哈希码的内存地址，经过哈希算法，得出一个值。</li><li>所以hashCode()方法的执行结果可以等同看做一个java对象的内存地址。</li></ul><hr><hr><h2 id="9、内部类"><a href="#9、内部类" class="headerlink" title="9、内部类"></a>9、内部类</h2><ul><li><p><strong>什么是内部类？</strong></p><ul><li>在类的内部定义一个新的类。称为内部类。</li></ul></li><li><p><strong>内部类的分类</strong></p><ul><li>静态内部类：类似于静态变量</li><li>实例内部类：类似于实例变量</li><li>局部内部类：类似于局部变量</li></ul></li><li><p><strong>匿名内部类是局部内部类的一种。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123; <br>    <span class="hljs-comment">//静态内部类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">staticClass</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">//实例内部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceClass</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//局部变量</span><br>        <span class="hljs-comment">//局部内部类</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">partClass</span>&#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>① 实例内部类</strong></p><ul><li>创建实例内部类，外部类的实例必须已经创建 </li><li>实例内部类会持有外部类的引用 </li><li>实例内部不能定义 static 成员，只能定义实例成员</li></ul><hr><p><strong>② 静态内部类</strong></p><ul><li><p>静态内部类不会持有外部的类的引用，创建时可以不用创建外部类 </p></li><li><p>静态内部类可以访问外部的静态变量，如果访问外部类的成员变量必须通过外部类的实例访问</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassTest02</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner2</span> &#123;<br><span class="hljs-comment">//在静态内部类中可以定义实例变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-comment">//可以定义静态变量</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-comment">//可以直接使用外部类的静态变量</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> a;<br><span class="hljs-comment">//不能直接引用外部类的实例变量</span><br><span class="hljs-comment">//int i5 = b;</span><br><span class="hljs-comment">//采用外部类的引用可以取得成员变量的值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClassTest02</span>().b;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>InnerClassTest02.<span class="hljs-type">Inner2</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClassTest02</span>.Inner2();<br>System.out.println(inner.i1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>③ 局部内部类</strong></p><ul><li>局部内部类是在方法中定义的，它只能在当前方法中使用。</li><li>和局部变量的作用一样，局部内部类和实例内部类一致，不能包含静态成员。</li><li>可以直接访问外部类的所有成员，包含私有的。</li><li>不能添加访问修饰符,因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final。</li><li>作用域仅仅在定义它的方法或代码块中。</li><li>局部内部类—访问—-&gt;外部类的成员 [访问方式:直接访问]</li><li>外部类—访问—-&gt;局部内部类的成员 [访问方式:创建对象,再访问(注意:必须在作用域内)]</li><li>记住:<br>(1)局部内部类定义在方法中&#x2F;代码块。<br>(2)作用域在方法体或者代码块中。<br>(3)本质仍然是一个类。</li></ul><hr><p><strong>④ 匿名内部类</strong></p><ul><li><p>是一种特殊的内部类，该类没有名字 </p></li><li><p>学习匿名内部类主要是阅读他人代码时，能够理解。</p><ul><li>缺点1：太复杂。太乱，可读性差。</li><li>缺点2：类没有名字，不可重复用。</li></ul></li><li><p><strong>匿名内部类的基本语法<br><code> new  类或接口(参数列表)&#123;    类体；  &#125;;</code></strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//没使用匿名内部类之前</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//计算求和</span><br>        <span class="hljs-type">MyMath</span> <span class="hljs-variable">myMath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMath</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> myMath.mySum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerImpl</span>(), <span class="hljs-number">100</span>, <span class="hljs-number">200</span>);<br>        System.out.println(i);<span class="hljs-comment">//300</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//负责计算的接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><span class="hljs-comment">//接口的实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//数学类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMath</span>&#123;<br>    <span class="hljs-comment">//数学求和方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySum</span><span class="hljs-params">(Computer c,<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>       <span class="hljs-keyword">return</span> c.sum(x,y);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用匿名内部类之后</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyMath</span> <span class="hljs-variable">myMath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMath</span>();<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> myMath.mySum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>()&#123;<span class="hljs-comment">//&#123;&#125;内是对接口的实现</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>                <span class="hljs-keyword">return</span> a + b;<br>            &#125;<br>        &#125;, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>);<br>        <br>        System.out.println(i);<span class="hljs-comment">//300</span><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//负责计算的接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br><span class="hljs-comment">//数学类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMath</span>&#123;<br>    <span class="hljs-comment">//数学求和方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySum</span><span class="hljs-params">(Computer c,<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>       <span class="hljs-keyword">return</span> c.sum(x,y);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="Ⅲ、数组"><a href="#Ⅲ、数组" class="headerlink" title="Ⅲ、数组"></a>Ⅲ、数组</h1><blockquote><ul><li><p><strong>数组属于引用数据类型。<br>数组的父类是Object。<br>数组是一组数据的集合。(数组存储在堆内存中)。</strong></p></li><li><p><strong>数组的长度在数组对象创建后就确定了，就无法再修改了。</strong></p></li><li><p><strong>数组存储元素的类型可以是基本类型，也可以是引用类型，但同一个数组只能存储同一种类型。</strong></p></li><li><p><strong>数组元素是有下标的，下标从 0 开始，也就是第一个元素的下标为 0，依次类推，最后一个 元素的下标为 n-1，我们可以通过数组的下标来访问数组的元素。</strong></p></li></ul></blockquote><p><strong>数组的内存结构如下：</strong></p><p>​数组中存储”java对象“，实际上是存储对象的”引用(内存地址)“，如下Person数组。</p><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/3.1.7aub45g9e5w0.webp" alt="3"></p><p>数组的优缺点：</p><ul><li>优点：检索效率高，可以随机存取。</li><li>缺点：进行增删效率较低，数组无法存储大数据量。</li><li>注意：数组最后一个元素的增删效率不受影响。</li></ul><p>第一：空间存储上，内存地址是连续的。<br>        第二：每个元素占用的空间大小相同。<br>        第三：知道首元素的内存地址。<br>        第四：通过下标可以计算出偏移量。通过一个数学表达式，就可以快速计算出某个下标位置上元素的内存地址，直接通过内存地址定位，效率非常高。</p><hr><h2 id="①-一维数组"><a href="#①-一维数组" class="headerlink" title="① 一维数组"></a>① 一维数组</h2><p><strong>一、声明一个一维数组：</strong></p><ul><li><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array1;<br><span class="hljs-type">double</span>[] array2;<br><span class="hljs-type">boolean</span>[] array3;<br>String[] array4;<br>Object[] array5;<br></code></pre></td></tr></table></figure></li></ul><p><strong>二、初始化一维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">静态初始化：<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>Object[] objs = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()&#125;;<br>动态初始化：<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>]; <span class="hljs-comment">// 4表示数组的元素个数，每个元素默认值0</span><br>Object[] objs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">4</span>]; <span class="hljs-comment">// 4个长度，每个元素默认值null</span><br></code></pre></td></tr></table></figure><p><strong>三、一维数组的遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>System.out.println(arr[i]);<br>&#125;<br><span class="hljs-comment">//如果访问的元素不存在，则会出现ArrayIndexOutOfBoundsException异常，说明下标越界了</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>注意：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这是java风格</span><br><span class="hljs-type">int</span>[] arr  = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-comment">//这是C++风格，不建议在java中使用</span><br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="②-数组的扩容"><a href="#②-数组的扩容" class="headerlink" title="② 数组的扩容"></a>② 数组的扩容</h2><ul><li><p>java中对数组的扩容是：</p><ul><li>先新建一个大容量的数组，人后将小容量数组中的数据一个一个拷贝到大数组当中</li></ul></li><li><p>结论：</p><ul><li>数组扩容效率较低，因为涉及到拷贝的问题。所以在开发中尽量少的去进行数组的拷贝。</li></ul></li></ul><hr><h2 id="③-数组的拷贝"><a href="#③-数组的拷贝" class="headerlink" title="③ 数组的拷贝"></a>③ 数组的拷贝</h2><ul><li><p>可以在方法中调用一个静态方法  <code>System.arraycopy( );</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//它的内部代码如下：需要五个参数，底层调用C++执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arraycopy</span><span class="hljs-params">(Object src,  <span class="hljs-type">int</span>  srcPos,</span><br><span class="hljs-params">                                        Object dest, <span class="hljs-type">int</span> destPos,</span><br><span class="hljs-params">                                        <span class="hljs-type">int</span> length)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">第一个参数：源数组</span><br><span class="hljs-comment">第二个参数：源数组拷贝的起始下标</span><br><span class="hljs-comment">第三个参数：目标数组</span><br><span class="hljs-comment">第四个参数：目标数组拷贝的起始下标</span><br><span class="hljs-comment">第五个参数：拷贝多长的长度</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p><strong>如下图：</strong></p></li></ul><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/3.2.7b3nv1fda340.webp" alt="3"></p><ul><li><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>,<span class="hljs-number">18</span>,<span class="hljs-number">22</span>,<span class="hljs-number">25</span>&#125;;<span class="hljs-comment">//源数组</span><br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">9</span>];<span class="hljs-comment">//目标数组</span><br>        System.arraycopy(a,<span class="hljs-number">2</span>,b,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//进行拷贝</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>            System.out.println(b[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果：0，0，0，12，15，0，0，0，0</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="④-main方法中的数组"><a href="#④-main方法中的数组" class="headerlink" title="④ main方法中的数组"></a>④ main方法中的数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     System.out.println(args.length);<span class="hljs-comment">// 0</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>String[] args：</p><ul><li>这个数组是留给用户的，接收用户在控制台输入的参数，会将其自动转换成数组存进args中。</li></ul></li></ul><hr><h2 id="⑤-二维数组"><a href="#⑤-二维数组" class="headerlink" title="⑤ 二维数组"></a>⑤ 二维数组</h2><blockquote><p><strong>二维数组其实是一个特殊的一维数组，特殊在这个一维数组当中每一个元素就是一个一维数组。</strong></p><p><strong>同理三维数组是一个特殊的二维数组，特殊在这个二维数组当中每一个元素就是一个一维数组。</strong></p><p><strong>实际开发中最多的是一维数组，二维数组很少用，三维数组几乎不用。</strong></p></blockquote><ul><li><p><strong>二维数组的初始化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">静态初始化：<br><span class="hljs-type">int</span>[][] arr = &#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>&#125;,<br>&#123;<span class="hljs-number">54</span>,<span class="hljs-number">4</span>,<span class="hljs-number">34</span>,<span class="hljs-number">3</span>&#125;,<br><span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>&#125;;<br>Object[][] arr = &#123;<br>&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()&#125;,<br>&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()&#125;,<br>            &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()&#125;<br>&#125;;<br>动态初始化：<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br>Object[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>Animal[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><span class="hljs-comment">// Person类型数组，里面可以存储Person类型对象，以及Person类型的子类型都可以。</span><br>Person[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>....<br></code></pre></td></tr></table></figure></li><li><p><strong>二维数组的遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123; <span class="hljs-comment">// 外层for循环负责遍历外面的一维数组。</span><br><span class="hljs-comment">// 里面这个for循环负责遍历二维数组里面的一维数组。</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++)&#123;<br>System.out.print(arr[i][j]);<br>&#125;<br><span class="hljs-comment">// 换行。</span><br>System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="⑥-Arrays工具类"><a href="#⑥-Arrays工具类" class="headerlink" title="⑥ Arrays工具类"></a>⑥ Arrays工具类</h2><p><strong>常见的算法：</strong></p><ul><li><p>排序算法：</p><ul><li>冒泡排序算法</li><li>选择排序算法</li></ul></li><li><p>查找算法：</p><ul><li>二分法查找</li></ul></li><li><p>以上算法在以后的java实际开发中我们不需要使用的。因为java已经封装好了，直接调用就行。只不过以后面试的时候，可能会有机会碰上。</p></li><li><p>算法实际上在java中不需要精通，因为java中已经封装好了，要排序就调用方法就行。例如：java中提供了一个数组工具类：</p><ul><li><p>(java.util.Arrays)，Arrays是一个工具类。</p></li><li><p>其中有一个sort()方法，可以排序。静态方法，直接使用类名调用就行。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">57</span>,<span class="hljs-number">46</span>,<span class="hljs-number">35</span>,<span class="hljs-number">42</span>,<span class="hljs-number">15</span>&#125;;<br>    <span class="hljs-comment">//排序递增排序</span><br>        Arrays.sort(a);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            System.out.println(a[i]);<span class="hljs-comment">//12 15 35 42 46 57 </span><br>        &#125;<br>    <span class="hljs-comment">//二分查找Arrays.binarySearch(int[],key),返回的是一个索引</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">42</span>);<span class="hljs-comment">//3</span><br>        System.out.println(i);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>注意：</strong>介绍一下java.util.Arrays工具类。</p><ul><li>​所有方法都是静态的，直接用类名调用，以后要看文档，不要死记硬背。</li><li>主要使用的是两个方法：<ul><li>二分法查找，排序。</li></ul></li></ul></li></ul><p></p><hr><h2 id="⑦-java数据类型"><a href="#⑦-java数据类型" class="headerlink" title="⑦ java数据类型"></a>⑦ java数据类型</h2><p>如下图：</p><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/3.3.2hhgod513co0.webp" alt="3"></p><ul><li><p>类型转换规则：</p><ul><li><p>小的类型自动转换为大的类型</p></li><li><p>大的类型转换成小的需要使用强制转换</p><ul><li>注意：强制转换可能导致溢出或精度丢失。(从整数溢出变成负数，则从负数溢出变成整数）。</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">97</span><span class="hljs-operator">;</span><br><span class="hljs-variable">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">char</span><span class="hljs-punctuation">)</span><span class="hljs-variable">i</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">c</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-variable">a</span><br><br><span class="hljs-variable">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span><span class="hljs-operator">;</span><br><span class="hljs-variable">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">byte</span><span class="hljs-punctuation">)</span><span class="hljs-variable">i</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">b</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-operator">-</span><span class="hljs-number">128</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><hr><h1 id="Ⅳ、常用类"><a href="#Ⅳ、常用类" class="headerlink" title="Ⅳ、常用类"></a>Ⅳ、常用类</h1><h2 id="①-String"><a href="#①-String" class="headerlink" title="① String"></a>① String</h2><blockquote><p><strong>1、String表示字符串，属于引用数据类型，不属于基本数据类型。<br>    2、在java中使用双引号括起来的都是&#x3D;&#x3D;String对象&#x3D;&#x3D;。<br>    3、字符串一旦创建不可变。如”abc“，不能变成”abcd“等。<br>    4、凡是双引号括起来的字符串都是存储在”方法区“的”字符串常量池“中。<br>    5、字符串的比较必须使用equals方法。<br>    6、String已经重写了toString()和equals()方法。</strong></p></blockquote><p><strong>String字符串的内存图如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdef&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span>  <span class="hljs-string">&quot;abcdef&quot;</span> + <span class="hljs-string">&quot;xy&quot;</span>;<br><span class="hljs-comment">//以上两行代码表示底层创建了三个字符串对象，都在字符串常量中。</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;xy&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/4.1.34qzxhot11e0.webp" alt="4"></li></ul><hr><h3 id="String类的构造方法"><a href="#String类的构造方法" class="headerlink" title="String类的构造方法"></a><strong>String类的构造方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">byte</span>数组);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">byte</span>数组, 起始下标, 长度);<span class="hljs-comment">//将字节数组转换成字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>数组);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>数组, 起始下标, 长度);<span class="hljs-comment">//将字符数组转成字符串</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//byte</span><br>        <span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>&#125;;     <span class="hljs-comment">//97是a,98是b,99是c</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br>        System.out.println(s1); <span class="hljs-comment">//abc</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        System.out.println(s2);  <span class="hljs-comment">//bc</span><br>        <br>        <span class="hljs-comment">//char</span><br>        <span class="hljs-type">char</span>[] chars = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>,&#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>        System.out.println(c1);<span class="hljs-comment">//abcde</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        System.out.println(c2); <span class="hljs-comment">//bc</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="String类中的常用方法"><a href="#String类中的常用方法" class="headerlink" title="String类中的常用方法"></a><strong>String类中的常用方法</strong></h3><ul><li><p><strong>1、<code>charAt(int index)</code>  返回指定索引处的 <code>char</code>值。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;中国人&quot;</span>.charAt(<span class="hljs-number">1</span>); <span class="hljs-comment">//&quot;中国人&quot;,是一个字符串对象，是对象，就可以用方法</span><br>System.out.println(c);<span class="hljs-comment">//返回索引为1的值，结果为：国</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>2、<code>compareTo(String anotherString)</code>  按字典顺序比较两个字符串。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>.compareTo(<span class="hljs-string">&quot;abc&quot;</span>);<br>System.out.println(result);<span class="hljs-comment">//结果为 0前后一致</span><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>.compareTo(<span class="hljs-string">&quot;abcd&quot;</span>);<br>System.out.println(result);<span class="hljs-comment">//结果为 -1前小后大</span><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>.compareTo(<span class="hljs-string">&quot;ab&quot;</span>);<br>System.out.println(result);<span class="hljs-comment">//结果为 1前大后小</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>3、<code>contains(CharSequence s)</code>  当此字符串包含指定的char值时才返回true。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>.contains(<span class="hljs-string">&quot;hello&quot;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>4 、<code>endsWith(String suffix)</code>  判断当前字符串是否以某个子字符串结尾。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>.endsWith(<span class="hljs-string">&quot;d&quot;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>5、<code>startsWith(String prefix)</code> 判断当前字符串是否以某个子字符串开头。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>.startsWith(<span class="hljs-string">&quot;h&quot;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>6、<code>equals(Object anObject)</code>  比较两个字符串是否相等。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>System.out.println(a.equals(b));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>7、<code>equalsIgnoreCase(String anotherString)</code>  判断两个字符串是否相等，同时忽略大小写。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;ABc&quot;</span>.equalsIgnoreCase(<span class="hljs-string">&quot;abC&quot;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>8、<code>getBytes()</code> 将字符串对象转换为字节数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>     System.out.println(bytes[i]);<br>&#125; <span class="hljs-comment">//97,98,99,100,101</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>9、<code>indexOf(String str)</code>  判断某个子字符串在当前字符串中第一次出现的索引（下标）。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;oraclejavaC++.net&quot;</span>.indexOf(<span class="hljs-string">&quot;java&quot;</span>));<span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>10、<code>lastIndexOf(String str)</code>  返回指定子字符串在当前字符串中最后一次出现索引。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Java&quot;</span>.lastIndexOf(<span class="hljs-string">&quot;a&quot;</span>));<span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>11、<code>isEmpty()</code>，判断某个字符串是否为空，是就返回<code>true</code>，否则 返回 <code>false</code> 。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Java&quot;</span>.isEmpty());<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>12、<code>replace(char oldChar,  char newChar)</code>  将字符串中某个字符替换成一个新的字符 。</strong></p><ul><li>&#96;&#96;&#96;&#96;java<br>System.out.println(“Java”.replace(“a”,”b”));&#x2F;&#x2F;Jbvb<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>---<br><br>+ **13、`replace(CharSequence target, CharSequence replacement)`  将指定字符串替换成新的字符串。**<br><br>  + ````java<br>    System.out.println(&quot;JavaPython&quot;.replace(&quot;Java&quot;,&quot;C++&quot;)); //C++Python<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><p><strong>14、<code>length()</code>  返回此字符串的长度。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.pr <span class="hljs-title function_">intln</span><span class="hljs-params">(<span class="hljs-string">&quot;Java&quot;</span>.length()</span>);<span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>15、<code>split(String regex)</code>  将此字符串以给定的规则进行拆分。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] split = <span class="hljs-string">&quot;1998-11-27&quot;</span>.split(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>     System.out.println(split[i]);<br>&#125;<span class="hljs-comment">//1998,11,27</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>16、<code>substring(int beginIndex)</code>  截取以某个索引开始之后的字符串。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>.substring(<span class="hljs-number">2</span>));<span class="hljs-comment">//llo world</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>17、<code>substring(int beginIndex,int endIndex)</code>  截取开始到结束索引之间的字符串。 (左闭右开)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>.substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">//hell</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>18、<code>toCharArray()</code>  将字符串转换为新的char字符数组。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] chars = <span class="hljs-string">&quot;我是中国人&quot;</span>.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>     System.out.println(chars[i]);<br>&#125;<span class="hljs-comment">//我  ，是，中，国，人</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>19、<code>toLowerCase()</code>  将所有在此字符转换为小写。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;SBC&quot;</span>.toLowerCase());<span class="hljs-comment">//sbc</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>20、<code>toUpperCase()</code>  将所有在此字符转换为大写。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;sbc&quot;</span>.toLowerCase());<span class="hljs-comment">//SBC</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>21、<code>trim()</code>  去除字符串前后空白。(中间的空白不会去除)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println((<span class="hljs-string">&quot;    hello  world  hao     &quot;</span>).trim());<span class="hljs-comment">//hello  world  hao</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><strong>22、String中只有一个方法是&#x3D;&#x3D;静态的&#x3D;&#x3D;，不需要new对象，这个方法叫valueOf，将非字符串转成字符串<br>如<code>valueOf(char c)</code> 、<code>valueOf(char[] data)</code> 、<code>valueOf(double d)</code>、<code>valueOf(int i)</code> 等</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> String.valueOf(<span class="hljs-string">&quot;100&quot;</span>);<br>System.out.println(s);<span class="hljs-comment">//100为字符串</span><br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> String.valueOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<span class="hljs-comment">//A没有重写toString方法，默认调其父类的</span><br>       <span class="hljs-comment">//toString方法。返回对象的内存地址</span><br>        System.out.println(s1);      <br>        <span class="hljs-comment">//com.atguigu.array.A@7f31245a</span><br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> String.valueOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<span class="hljs-comment">//重写了父类的toString方法</span><br>        System.out.println(s2);<span class="hljs-comment">//你好</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你好&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><hr><h2 id="②StringBuffer-x2F-StringBuilder"><a href="#②StringBuffer-x2F-StringBuilder" class="headerlink" title="②StringBuffer&#x2F;StringBuilder"></a>②StringBuffer&#x2F;StringBuilder</h2><p><strong>思考：</strong>在实际开发中，如果字符串需要频繁的进行拼接，会有什么问题？<br>            答：因为java中字符串是不可变的，每一次拼接都会产生新的字符串对象，这样就会占用大量的方法区内存，造成空间的浪费。<br>                    例如：<code>String s = &quot;abc&quot;；</code><br>                                <code>s += &quot;hello&quot;；</code><br>                    以上两行代码就在方法区的字符串常量池中产生了三个对象；<br>                                <code>&quot;abc&quot;</code><br>                                <code>&quot;hello&quot;</code><br>                                <code>&quot;abchello&quot;</code></p><ul><li><p>所以以后进行大量字符串的拼接操作，建议使用JDK中自带的：</p><ul><li><code>java.lang.StringBuffer</code></li><li><code>java.lang.StringBuilder</code></li></ul></li><li><p>String 底层是<code>private final char value[];</code></p><ul><li>final 使得 String 字符串对象不可变</li></ul></li><li><p>StringBuffer底层是<code>char[] value;</code> </p><ul><li>且StringBuffer底层调用父类的<code>super(capacity：16);</code>，使得数组容量默认为16</li></ul></li><li><p><strong>思考：</strong>如何优化StringBuffer的性能？</p><ul><li><p>在创建StringBufferd的时候尽可能给定一个初始化容量，更好减少底层数组的扩容次数，预估计一下，给一个大一些的初始化容量。                                                                                                                                                                                                                                                                                                                                                                                                            </p><ul><li><p>比如<code>StringBuffer(int capacity)</code>  构造一个指定的初始容量的字符串缓冲区对象。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><ul><li><p><strong>StringBuffer的字符串操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个初始化容量为16个char[] 数组。(字符缓冲区)</span><br>   <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><span class="hljs-comment">//拼接字符串，以后统一用append()方法</span><br>   s.append(<span class="hljs-string">&quot;a&quot;</span>);<br>   s.append(<span class="hljs-number">3</span>);<br>   s.appen                                       <span class="hljs-title function_">d</span><span class="hljs-params">(<span class="hljs-number">3.14f</span>)</span>;<br>   s.append(<span class="hljs-literal">true</span>);<br>   <span class="hljs-comment">//append底层进行追加的时候，char[]数组满了的话，会自动扩容</span><br>   System.out.println(s);<br><span class="hljs-comment">//结果为：a33.14true</span><br></code></pre></td></tr></table></figure></li><li><p><strong>StringBuilder的字符串操作，同上类似</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个初始化容量为16个byte[] 数组。(字符缓冲区)</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        builder.append(<span class="hljs-string">&quot;abc&quot;</span>);<br>        builder.append(<span class="hljs-number">2.1f</span>);<br>        System.out.println(builder);<br> <span class="hljs-comment">//结果为：abc2.1</span><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>StringBuffer与StringBuilder的区别</strong></p><ul><li>StringBuffer中的方法都有：synchronized关键字修饰。表示其在多线程环境下运行是安全的</li><li>StringBuilder中的方法没有：synchronized关键字修饰。表示其在多线程环境下运行是不安全的。</li></ul></li><li><p>所以：</p><ul><li>StringBuffer是线程安全的.</li><li>StringBuilder是线程不安全的。</li></ul></li><li><p>String与这两种的区别：</p><ul><li>String是不可变的，StringBuffer和StringBuilder是可变长的。</li></ul></li></ul><hr><h2 id="③-包装类"><a href="#③-包装类" class="headerlink" title="③ 包装类"></a>③ 包装类</h2><blockquote><p><strong>属于引用类型，父类是Object</strong></p></blockquote><ul><li><p><strong>思考：为什么要提供8种基本数据类型呢？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-comment">//入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// 有没有一种需求，调用doSome()方法的时候需要传一个数字进去。</span><br>  <span class="hljs-comment">// 但是数字属于基本数据类型，而doSome()参数需要的类型是Object。</span><br>  <span class="hljs-comment">// 可见doSome()方法不能够接收基本数据类型的数字。</span><br>  <span class="hljs-comment">// 解决办法：传一个数字对应的包装类进去。</span><br>        dosome();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(Object obj)</span>&#123;<br>        System.out.println(obj);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><p><strong>1、基本数据类型对应的包装类如下：都是在java.lang.下</strong></p><ul><li><table><thead><tr><th align="center">基本类型</th><th align="center">包装类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table></li></ul><p> <strong>2、类层次结构</strong></p><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/4.2.4qqtu4xilxq0.webp" alt="4"></p><ul><li>除了<code>boolean</code>和 <code>Character </code>外，其它的包装类都有 <code>valueOf()</code>和 <code>parseXXX</code> 方法，</li><li>并且包装类对象还具<code>byteValue()</code>,<code>shortValue()</code>,<code>intValue()</code>,<code>longValue()</code>,<code>floatValue()</code>和 <code>doubleValue()</code>方法，这些方法是最常用的方法。</li></ul><hr><p><strong>3、以下拿Integer为例子，其他的类似</strong></p><ul><li><p>Integer的方法，如<code>parseInt(String s)</code>、<code>XXvalue() </code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//手动装箱与手动拆箱</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//基本数据类型 -(转换成)&gt;  引用数据类型 (装箱)</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">//引用数据类型 -(转换成)&gt;  基本数据类型 (拆箱)</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> integer.floatValue();<br>        System.out.println(v);<span class="hljs-comment">//  123.0</span><br>    <br>     <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.parseInt(s);<span class="hljs-comment">//将字符串强制转换成int类型</span><br>        System.out.println(i);<span class="hljs-comment">//123</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Integer 的构造方法，有两个<code>Integer(int value)</code> ，<code>Integer(String s)</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将数字100转换成Integer包装类型(int &gt; Integer)</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>        System.out.println(integer);<br><span class="hljs-comment">//将字符串&quot;123&quot;转换成Integer包装类型(String &gt; Integer)</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>        System.out.println(integer1);<br></code></pre></td></tr></table></figure></li><li><p>Integer 中的常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;int的最大值:&quot;</span> + Integer.MAX_VALUE);<br>System.out.println(<span class="hljs-string">&quot;int的最小值:&quot;</span> + Integer.MIN_VALUE);<br>System.out.println(<span class="hljs-string">&quot;所占字节&quot;</span> + Integer.BYTES);<br>System.out.println(<span class="hljs-string">&quot;所占的比特位大小:&quot;</span> + Integer.SIZE);<br>System.out.println(<span class="hljs-string">&quot;类型:&quot;</span> + Integer.TYPE);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果为：</span><br><span class="hljs-comment"> int的最大值:2147483647</span><br><span class="hljs-comment"> int的最小值:-2147483648</span><br><span class="hljs-comment"> 所占字节4</span><br><span class="hljs-comment"> 所占的比特位大小:32</span><br><span class="hljs-comment"> 类型:int</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul><hr><p><strong>4、自动装箱和自动拆箱</strong></p><ul><li><p>注意：在JDK1.5以后，支持自动拆箱和自动装箱。</p><ul><li><p>在进行自动装箱时，Java 虚拟机会自动调用 Integer.valueOf()。</p></li><li><p>在进行自动拆箱时，Java 虚拟机会自动调用 Integer.intValue()。</p></li><li><p>其他数据类型的自动装箱和自动拆箱的过程和 Integer 类似，都是调用类似 xxxValue()、valueOf() 等方法。</p></li><li><p>所以有了自动装箱和自动拆箱，Number类中的方法就用不着了，</p><ul><li>好处：方便编程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 进行自动装箱，得到的是封装类</span><br>        System.out.println(x);<span class="hljs-comment">// 100</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x;       <span class="hljs-comment">// 进行自动拆箱，得到基本数据类型</span><br>        System.out.println(y);<span class="hljs-comment">// 100</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>思考：但是如果是如下操作，会触发这种机制吗？(面试题***)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;   <span class="hljs-comment">// Integer a = new Integer(1000);</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;   <span class="hljs-comment">// Integer b = new Integer(1000);</span><br><br>        System.out.println(a==b);   <span class="hljs-comment">//结果为： false     </span><br>&#125;<br><span class="hljs-comment">//说明：上述==比较的是对象的内存地址，a和b两个引用中保存的对象地址不同。</span><br><span class="hljs-comment">//&quot;==&quot;这个运算符不会触发自动拆箱机制(只有+ - * / 等运算符的时候才会)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        System.out.println(a==b);   <span class="hljs-comment">//结果为： false</span><br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>        System.out.println(x==y);   <span class="hljs-comment">//结果为： true</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">说明：java中为了提高编程效率，将[-128到127]之间所有的包装对象提前创建好，放到一个方法区的&quot;整数型常量池&quot;当中，目的是只要用到这个区间的数字，则不需要new对象了，直接从整数型常量池当中取出来。</span><br><span class="hljs-comment">原理：x变量保存的对象的内存地址和y变量保存的对象的内存地址是一样的</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>内存图如下：</p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/4.3.4z06udehsac0.webp" alt="4"></li></ul></li></ul><p>​<strong>5、String，int，Integer三者的转换</strong></p><ul><li>​<img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/4.4.45c1w5dse5w0.webp" alt="4"></li></ul><hr><hr><h2 id="④-日期类"><a href="#④-日期类" class="headerlink" title="④ 日期类"></a>④ 日期类</h2><blockquote><p><strong>常用日期类：<br>                             java.util.Date<br>                             java.text.SimpleDateFormat<br>                             java.util.Calendar</strong></p><p><strong>yyyy 年 ，MM 月，dd 日，HH 时，mm 分，ss 秒，SSS 毫秒</strong></p></blockquote><ul><li><p><strong><code>Date()</code></strong></p><ul><li><p><strong>调用它的无参构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取系统当前时间，(精确到毫秒)</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(date);<span class="hljs-comment">//  Fri Aug 12 20:10:47 CST 2022</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>Date(long date)</code></strong></p><p>分配一个  <code>Date</code>对象，以1970年1月1日00:00:00 为起点的毫秒数。 </p><ul><li><p><strong>调用它的有参构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(date);<br>System.out.println(s);<span class="hljs-comment">//1970-01-01 08:00:00</span><br><span class="hljs-comment">//北京时间，北京是东8区，差8个小时</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>SimpleDateFormat</code>  -&gt; 日期格式化</strong></p><ul><li><p>将Date类型  –&gt; 日期字符串类型<br>使用它的构造方法<code>SimpleDateFormat(String pattern)</code>  使用给定格式。<br><code>parse(String text,  ParsePosition pos)</code>  从字符串中解析文本以产生一个 <code>Date</code> 。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH-mm-ss SSS&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> sdf.format(date);<br>System.out.println(s);  <span class="hljs-comment">// 2022-08-12 20-35-42 815</span><br></code></pre></td></tr></table></figure></li><li><p>将日期字符串String –&gt; Date类型  (格式要和日期字符串格式相同)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH-mm-ss SSS&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2022-08-08 08-08-08 888&quot;</span>;   <br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(time);<br>System.out.println(date);<span class="hljs-comment">//Mon Aug 08 08:08:08 CST 2022</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>Calendar()</code></p><ul><li><p>Calendar是一个抽象类，并且构造器是private。<br>可以通过<code>getInstance()</code>来获取实例。<br>内部提供大量的方法。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Calendar</span><span class="hljs-operator">.</span><span class="hljs-variable">getInstance</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">c</span><span class="hljs-operator">.</span><span class="hljs-variable">get</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Calendar</span><span class="hljs-operator">.</span><span class="hljs-variable">YEAR</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">c</span><span class="hljs-operator">.</span><span class="hljs-variable">get</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Calendar</span><span class="hljs-operator">.</span><span class="hljs-variable">MONTH</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>默认从<span class="hljs-number">0</span>开始，所以要加<span class="hljs-number">1</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">c</span><span class="hljs-operator">.</span><span class="hljs-variable">get</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Calendar</span><span class="hljs-operator">.</span><span class="hljs-type">DAY_OF</span><span class="hljs-type">_MONTH</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure></li><li><p>Calendar的缺点：</p><ul><li>可变性：像日期和时间这样的类应该是不可变的。但Calendar是可变的。</li><li>偏移性：Calendar中的年份是从1900开始的，而月份都从0开始的。</li><li>格式化：格式化只对Date有用，对Calendar则不行。</li><li>此外：线程不安全，不能处理闰秒等(每隔两天，多出一秒)</li></ul></li></ul></li><li><p><strong><code>Instant</code> 时间戳</strong></p><ul><li><p>类似于Date，提供了一系列和Date类转换的方式。</p><ul><li><p><code>Instant</code>  —&gt;  <code>Date</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//静态方法创建时间戳对象</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>        <span class="hljs-comment">//转换成Date</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(now);<br>        System.out.println(date);<br>&#125;<span class="hljs-comment">//Sun Aug 14 19:51:36 CST 2022</span><br></code></pre></td></tr></table></figure></li><li><p><code>Date</code>  —&gt; <code>Instant</code></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">接上面的代码<br><span class="hljs-variable">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> <span class="hljs-variable">date</span><span class="hljs-operator">.</span><span class="hljs-variable">toInstant</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">instant</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-number">2022</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-variable">T11</span><span class="hljs-operator">:</span><span class="hljs-number">51</span><span class="hljs-operator">:</span><span class="hljs-number">36.544</span><span class="hljs-variable">Z</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>第三代日期类的方法</strong></p><ul><li><p><code>LocalTime</code>(时分秒) 、<code>LocalDateTime</code>(年月日时分秒)、<code>LocalDate</code>(年月日)</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">LocalTime</span> <span class="hljs-variable">now1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">LocalTime</span><span class="hljs-operator">.</span><span class="hljs-variable">now</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">now1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>获取当前 时分秒<br><span class="hljs-variable">LocalDateTime</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">LocalDateTime</span><span class="hljs-operator">.</span><span class="hljs-variable">now</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">now2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>获取当前 年月日<span class="hljs-operator">-</span>时分秒<br></code></pre></td></tr></table></figure></li><li><p><code>plus</code>和<code>minus</code>方法分别表示查看增加多少了时间后的日期，和查看减少了多少时间后的日期。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">LocalDateTime</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> <span class="hljs-variable">now2</span><span class="hljs-operator">.</span><span class="hljs-variable">plusDays</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">time1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>两天之后的日期<br><span class="hljs-variable">LocalDateTime</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">now2</span><span class="hljs-operator">.</span><span class="hljs-variable">minusDays</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">time2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>两天之前的日期<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="⑤-System类"><a href="#⑤-System类" class="headerlink" title="⑤ System类"></a>⑤ <strong>System类</strong></h2><ul><li><p><strong>System.out ： [out是System类的静态变量]</strong></p></li><li><p><strong>System.out.println()： [println()不是System类的，是printStream类的方法]</strong></p></li><li><p><strong>System.gc()： 建议启动垃圾回收机制</strong></p></li><li><p><strong>System.exit(0) ： 退出JVM</strong></p></li><li><p><strong>System.arraycopy( )： 数组拷贝，见Ⅲ章节的③</strong></p></li><li><p><strong>System.currentTimeMillis()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取自1970年1月1日 00:00:00 0000 到当前系统时间的总毫秒数</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(l);<span class="hljs-comment">//1660308851936   每一秒增加1000</span><br></code></pre></td></tr></table></figure></li><li><p>它的作用可以计算一个方法所需要的时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();   <span class="hljs-comment">//方法开始时间</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>         System.out.println(i);<br>     &#125;<br>     <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//方法结束时间</span><br>     System.out.println(end - start + <span class="hljs-string">&quot;毫秒&quot;</span>);<span class="hljs-comment">// 耗费时长：19毫秒</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="⑥-数字类"><a href="#⑥-数字类" class="headerlink" title="⑥ 数字类"></a>⑥ 数字类</h2><blockquote><p><strong>java.text.DecimalFormat<br>java.math.BigDecimal<br>java.math.BigInteger</strong></p></blockquote><ul><li><p><strong>DecimalFormat() –&gt; 数字格式化</strong></p><blockquote><p><strong>数字格式有哪些？<br>#代表任意数字<br>,  代表千分位<br>.  代表小数点<br>0 代表不够补0</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//###,###.##表示加入千分位，保留两位小数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   <span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;###,###.##&quot;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> df.format(<span class="hljs-number">1234.565</span>);<br>   System.out.println(s);<span class="hljs-comment">//1,234.57</span><br>    <br>   <span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;###,###.0000&quot;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> df.format(<span class="hljs-number">1234.565</span>);<br>   System.out.println(s1);<span class="hljs-comment">//1,234.5650</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>BigDecimal() –&gt; 大数据，精度极高</strong></p><blockquote><p><strong>不属于基本数据类型，属于java对象（引用数据类型）。<br>这是sun提供的一个类，专门用在财务软件当中。</strong></p><p><strong>注意：财务中double类型是不够的。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>);<span class="hljs-comment">//不是普通的100，是精度极高的100</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">200</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> v2.add(v1); <span class="hljs-comment">//v1和v2都是引用，不能直接求和，要调用方法求和</span><br>System.out.println(result);<span class="hljs-comment">//  300</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="⑦-Random"><a href="#⑦-Random" class="headerlink" title="⑦ Random"></a>⑦ Random</h2><blockquote><p><strong>Random 位于 java.util 包下，可以产生随机数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建随机数对象</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-comment">//随机产生一个int类型取值范围内的数字</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> random.nextInt();<br>System.out.println(i);<span class="hljs-comment">//167961919</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>  <span class="hljs-comment">//产生[0~100]之间的随机数，不能产生101.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">101</span>);<span class="hljs-comment">//不包括101</span><br>System.out.println(i);<span class="hljs-comment">// 77</span><br></code></pre></td></tr></table></figure><hr><h2 id="⑧-Math类"><a href="#⑧-Math类" class="headerlink" title="⑧ Math类"></a>⑧ Math类</h2><blockquote><p><strong>静态方法，直接 “类名 .” 的方式调用其中的方法</strong></p></blockquote><ul><li><p>abc： 绝对值</p></li><li><p>ceil：向上取整</p></li><li><p>floor： 向下取整</p></li><li><p>round：四舍五入</p></li><li><p>max：最大值</p></li><li><p>min：最小值</p></li><li><p>pow： 求幂</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">double</span> <span class="hljs-variable">pow</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Math</span><span class="hljs-operator">.</span><span class="hljs-variable">pow</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span><span class="hljs-number">2</span>的<span class="hljs-number">4</span>次幂<br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">pow</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-number">16.0</span><br></code></pre></td></tr></table></figure></li><li><p>sqrt： 求开方</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">double</span> <span class="hljs-variable">sqrt</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Math</span><span class="hljs-operator">.</span><span class="hljs-variable">sqrt</span><span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">sqrt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-number">9.0</span><br></code></pre></td></tr></table></figure></li><li><p>random： 0-1之间的随机数</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">double</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Math</span><span class="hljs-operator">.</span><span class="hljs-variable">random</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">random</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>取得<span class="hljs-number">0</span><span class="hljs-operator">-</span><span class="hljs-number">1</span>之间的随机数<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="⑨、枚举"><a href="#⑨、枚举" class="headerlink" title="⑨、枚举"></a>⑨、枚举</h2><blockquote><p><strong>枚举是一种引用数据类型。<br>枚举编译之后也是class文件。<br>枚举：一枚一枚可以列举出来，才建议使用枚举。<br>枚举中的每一个值可以看作常量。</strong></p></blockquote><ul><li><p><strong>枚举的引出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a/b;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//其实 true与 false 底层也就是枚举的值</span><br>      &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">思考：以上的方法设计没毛病，但是只是返回true和false两种情况，但是在以后开发中，万一遇到     多种情况，但是每一种都可以数清楚，一枚一枚的都可以列举，这个时候布尔类型就无法满足需求了，此时就需要java中的枚举类型。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p><strong>枚举类型存在的意义</strong></p><ul><li>所有的错误越早发现越好，尽可能所有的错误在编译阶段被编译器检测出来。这一直都是程序设计所期望的。这就是枚举类型存在的意义。</li></ul></li><li><p><strong>怎么定义一个简单的枚举类型</strong></p><pre><code>+ 语法：enum 枚举类型名&#123;         枚 举值1，枚举值2         &#125;</code></pre> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//四季</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span>&#123;<br>SPRING,SUMMER,AUTUMN,WINTER<br>&#125;<br><span class="hljs-comment">//颜色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span>&#123;<br>RED,YELLOW,BLUE<br>&#125;<br><span class="hljs-comment">//操作结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Result</span>&#123;<br>SUCCESS,FAILE<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><hr><h1 id="Ⅴ、异常"><a href="#Ⅴ、异常" class="headerlink" title="Ⅴ、异常"></a>Ⅴ、异常</h1><blockquote><p><strong>java中异常的作用是：增强程序健壮性。<br>java中异常以类和对象的形式存在。<br>重写之后的方法不能比重写之前的方法抛出更多的异常，可以更少。<br>throws在方法声明的位置上使用，表示上报异常信息给调用者。<br>throw      手动抛出异常。</strong></p></blockquote><h3 id="1、什么是异常？异常处理机制作用？"><a href="#1、什么是异常？异常处理机制作用？" class="headerlink" title="1、什么是异常？异常处理机制作用？"></a><strong>1、什么是异常？异常处理机制作用？</strong></h3><ul><li>答：程序在执行过程中发生了不正常的情况，而这种不正常的情况叫做：异常。<ul><li>java语言是很完善的语言，提供了异常的处理方式，当程序执行过程中出现出现了不正常的情况，java把该异常信息打印输出到控制台，供程序员参考。程序员看到异常之后，可以对程序进行修改，让程序更加健壮。</li></ul></li></ul><h2 id="2、异常的存在形式"><a href="#2、异常的存在形式" class="headerlink" title="2、异常的存在形式"></a><strong>2、异常的存在形式</strong></h2><ul><li>java中以类和对象的形式存在。</li></ul><h2 id="3、异常继承图"><a href="#3、异常继承图" class="headerlink" title="3、异常继承图"></a><strong>3、异常继承图</strong></h2><hr><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/5.3.1.7iubdhyuhxw0.webp" alt="5"></p><hr><h2 id="4、编译时异常和运行时异常区别"><a href="#4、编译时异常和运行时异常区别" class="headerlink" title="4、编译时异常和运行时异常区别"></a><strong>4、编译时异常和运行时异常区别</strong></h2><ul><li>编译时异常和运行时异常，都是发生在运行阶段。编译阶段异常是不会发生的。</li><li>编译时异常因为什么而得名？<ul><li>因为编译时异常必须在编译(编写)阶段预先处理，如果不处理，编译器会报错，因此得名。</li><li>所有异常都是在运行阶段发生的。因为只有程序运行阶段才可以new对象。</li><li>因为异常的发生就是new异常对象。</li></ul></li><li>编译时异常还有其他名字：<br> 受检异常：<code>CheckedException</code><br> 受控异常</li><li>运行时异常还有其它名字：<br> 未受检异常：<code>UnCheckedException</code><br>  非受控异常</li><li>所有的<code>RuntimeException</code>类及其子类被称为运行时异常，其他的异常都是编译时异常。</li><li><strong>编译时异常:必须显示处理</strong>，否则程序就会发生错误，无法通过编译。</li><li><strong>运行时异常:无需显示处理</strong>，也可以和编译时异常一样处理。</li><li>强调：所有异常都是发生在运行时阶段。</li></ul><h2 id="5、异常处理的两种方式："><a href="#5、异常处理的两种方式：" class="headerlink" title="5、异常处理的两种方式："></a><strong>5、异常处理的两种方式：</strong></h2><ul><li><p>第一种方式：在方法声明的位置上，使用<code>throws</code>关键字，抛给上一级。<br>谁调用我，我就抛给谁。抛给上一级。</p></li><li><p>第二种方式：使用<code>try..catch</code>语句进行异常的捕捉。<br> 这件事发生了，谁也不知道，因为我给抓住了。</p></li><li><p>举个例子：<br>我是某集团的一个销售员，因为我的失误，导致公司损失了1000元，<br>     “损失1000元”这可以看做是一个异常发生了。我有两种处理方式，<br>     第一种方式：我把这件事告诉我的领导【异常上抛】<br>     第二种方式：我自己掏腰包把这个钱补上。【异常的捕捉】</p></li><li><p>思考：<br>异常发生之后，如果我选择了上抛，抛给了我的调用者，调用者需要<br>     对这个异常继续处理，那么调用者处理这个异常同样有两种处理方式。</p></li><li><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;Java中异常发生之后如果一直上抛，最终抛给了main方法，main方法继续向上抛，<br> 抛给了调用者JVM，JVM知道这个异常发生，只有一个结果。终止java程序的执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-number">100</span>/<span class="hljs-number">0</span>);<span class="hljs-comment">//出现异常</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    程序执行到这里时发生了ArithmeticException异常，底层new来了一个    ArithmeticException异常对象，然后抛出了，由于是main方法调用了，</span><br><span class="hljs-comment">    所以异常抛给了main方法，但是main方法没有处理，而是自动抛给了JVM,</span><br><span class="hljs-comment">    JVM最终终止了程序。</span><br><span class="hljs-comment">    */</span><br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<span class="hljs-comment">//没有执行</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><span class="hljs-comment">at com.atguigu.array.ArrayTest01.main(ArrayTest01.java:10)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="6、异常的两个非常重要的方法"><a href="#6、异常的两个非常重要的方法" class="headerlink" title="6、异常的两个非常重要的方法"></a><strong>6、异常的两个非常重要的方法</strong></h2><ul><li><p>获取异常简单的描述信息：</p><ul><li><p><code>String msg = e.getMessage();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">NullPointerException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;空指针异常&quot;</span>);<br>     <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> e.getMessage();<br>     <span class="hljs-comment">//这个信息实际上就是构造方法上面的String参数。</span><br>     System.out.println(message);<span class="hljs-comment">//空指针异常</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>打印异常追踪的堆栈信息：</p><ul><li><p><code>e.printStackTrace();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NullPointerException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;空指针异常&quot;</span>);<br>e.printStackTrace();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">java.lang.NullPointerException: 空指针异常</span><br><span class="hljs-comment">at com.atguigu.array.ArrayTest01.main(ArrayTest01.java:1)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="7、finally关键字"><a href="#7、finally关键字" class="headerlink" title="7、finally关键字"></a><strong>7、finally关键字</strong></h2><blockquote><p><strong>finally 在任何情况下都会执行，通常在 finally 里关闭资源。</strong></p></blockquote><ul><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            <br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>思考：try和finally，没有catch可以吗？</p><ul><li><p>答：可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>   System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>   System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>&#125;<br><span class="hljs-comment">//执行顺序，A --&gt;  B --&gt; return语句 [return语句执行，方法必然结束]</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>面试题1：</p><ul><li>java中亘古不变的规则：<br>方法体中的代码，必须遵循自上而下的顺序逐行执行。<br>return语句一旦执行，整个方法必须结束。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> m();<br>    System.out.println(result);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//这行代码出现在int i = 100 的下面，所以返回结果必须是100</span><br>       <span class="hljs-comment">//但他还是先执行finally中的代码。</span><br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        i++;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果：100</span><br><span class="hljs-comment">*/</span>   <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">m()反编译之后的代码:</span><br><span class="hljs-comment">public static int m()&#123;</span><br><span class="hljs-comment">int i = 100;</span><br><span class="hljs-comment">int j = i;</span><br><span class="hljs-comment">i++;</span><br><span class="hljs-comment">return j;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">反编译代码遵循了java的规则</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>面试题2：</p><ul><li><p><code>final</code>、<code>finalize</code> 和 <code>finally</code>的区别？</p><ul><li><code>final</code>关键字</li></ul><p>​final修饰的类无法继承。<br>​                final修饰的方法无法覆盖。<br>​                final修饰的变量只能赋一次值。</p><ul><li><p><code>finally</code>关键字</p><p>和<code>try</code>联合使用，使用在异常处理机制中。<br><code>finally</code>语句块中的代码在任何情况下都会执行。</p></li><li><p><code>finalize()</code>标识符</p><p>是Object类中的一个方法名。<br>这个方法是垃圾回收器GC负责调用的。</p></li></ul></li></ul></li></ul><h2 id="8、自定义异常"><a href="#8、自定义异常" class="headerlink" title="8、自定义异常"></a><strong>8、自定义异常</strong></h2><blockquote><p><strong>SUN提供的JDK内置的异常肯定是不够用的，在实际的开发中，有很多业务，这些业务出现异常后，JDK中都是没有的，那么我们就可以自定义一个异常。</strong></p></blockquote><ul><li><p>自定义异常语法：&#x3D;&#x3D;(死记硬背)&#x3D;&#x3D;</p><ul><li><p>第一步：编写一个类继承<code>Exception</code>或者<code>RuntimeException</code>。</p></li><li><p>第二步：提供两个无参构造方法，一个无参的，一个带有String参数的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><hr><h1 id="Ⅵ、集合"><a href="#Ⅵ、集合" class="headerlink" title="Ⅵ、集合"></a>Ⅵ、集合</h1><h2 id="1、集合的概述"><a href="#1、集合的概述" class="headerlink" title="1、集合的概述"></a>1、集合的概述</h2><ul><li><p>什么是集合？，有什么用？</p><ul><li>数组其实就是一个集合，集合实际上是一个容器。可以容纳其他类型的数据。</li></ul></li><li><p>集合&#x3D;&#x3D;不能&#x3D;&#x3D;直接存储基本数据类型，另外集合也&#x3D;&#x3D;不能&#x3D;&#x3D;直接存储java对象。<br>集合当中存储的都是java对象的内存地址。（或者说集合中存储的是引用）</p><ul><li>例如：<code>list.add(100); //自动装箱Integer</code></li><li>注意：<ul><li>集合在java中本身是一个容器，是一个对象。</li><li>集合中任何时候存储的都是“引用”。</li></ul></li></ul></li></ul><hr><p>  <img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/5.3.2.gctx6tjl48g.webp" alt="5"></p><hr><ul><li><p>在java中每一个不同的集合，底层会对应不同的数据结构。往不同的集合中存储元素，<br>等于将数据放到了不同的数据结构当中。比如数组、二叉树、链表、哈希表…</p><ul><li><p>例如：</p><p>​你往集合c1中放数据，可能是放到数组上了。<br>​你往集合c2中放数据，可能是放到二叉树上了。</p></li></ul></li><li><p>java中已经将数据结构实现了，已经写好了这些常用的集合类，你只需要掌握什么场景用什么集合类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();  创建一个集合，底层是数组。<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>(); 创建一个集合对象，底层是链表。<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();    创建一个集合对象，底层是二叉树。<br>.....<br></code></pre></td></tr></table></figure></li><li><p>集合在java JDK中哪个包下？</p><ul><li>java.util.*; </li><li>所有的集合类和集合接口都在java.util包下。</li></ul></li></ul><hr><h2 id="2、集合继承图"><a href="#2、集合继承图" class="headerlink" title="2、集合继承图"></a>2、集合继承图</h2><ul><li><p>在java中集合分为两大类：</p><ul><li>一类是单个方式存储元素：<br>单个方式存储元素，这一类集合中超级父接口：java.util.Collection;</li><li>一类是以键值对儿的方式存储元素<br>以键值对的方式存储元素，这一类集合中超级父接口：java.util.Map;</li></ul></li><li><p><strong>Collection结构图</strong></p></li></ul><hr><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/6.2.1.6ix38axd22s0.webp" alt="6"></p><hr><ul><li><strong>Map 结构图</strong></li></ul><hr><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/6.2.2.30quhek0ch60.webp" alt="6"></p><hr><ul><li><p>总结：（所有实现类）</p><ul><li><code>ArrayList</code>：底层是数组。</li><li><code>LinkedList</code>：底层是双向链表。</li><li><code>Vector</code>：底层是数组，线程安全的，效率较低，使用较少。</li><li><code>HashSet</code>：底层是<code>HashMap</code>，放到<code>HashSet</code>集合中的元素等同于放到<code>HashMap</code>集合key部分了</li><li><code>TreeSet</code>：底层是<code>TreeMap</code>，放到<code>TreeSet</code>集合中的元素等同于放到<code>TreeMap</code>集合key部分了</li><li><code>HashMap</code>：底层是哈希表。</li><li><code>HashTable</code>：底层也是哈希表，只不过线程安全，效率较低，使用较少。</li><li><code>Properties</code>：线程安全的，并且<code>key</code>和<code>value</code>只能存储字符串<code>String</code>。</li><li><code>TreeMap</code>：底层是二叉树。TreeMap集合的key可以自动按照大小顺序排序。</li></ul><hr></li><li><p><strong>List 集合存储元素的特点：</strong></p><ul><li>有序可重复<ul><li>有序：存进去的顺序和取出的顺序相同，每一个元素都有下标。</li><li>可重复：存进去 1，可以在存储一个 1。</li></ul></li></ul></li><li><p><strong>Set集合存储元素的特点：</strong></p><ul><li>无序不可重复<ul><li>无序：存进去的顺序和取出的顺序不一定相同，另外Set集合中元素没有下标。</li><li>不可重复：存进去 1，不能在存储一个 1。</li></ul></li></ul></li><li><p><strong>SortedSet集合存储元素的特点：</strong></p><ul><li>首先是无序不可重复，但是集合中的元素是可排序的。<ul><li>可排序：可以按照大小顺序排列。</li></ul></li></ul></li><li><p>注意：</p><ul><li>Map 集合的 key，就是一个 Set 集合。</li><li>往 Map 集合中放数据，实际上就是放到了 Map 集合的 key 部分。</li></ul></li></ul><hr><h2 id="3、Collection接口中常用的方法"><a href="#3、Collection接口中常用的方法" class="headerlink" title="3、Collection接口中常用的方法"></a>3、Collection接口中常用的方法</h2><blockquote><p><strong>Collection中能存放什么元素？</strong></p><ul><li><strong>没有使用泛型之前，可以存储Object的所有子类型。</strong></li><li><strong>使用泛型后，只能存储某个具体的类型。</strong></li></ul><p><strong>注意：集合中不能直接存储基本数据类型，另外集合也不能直接存储java对象。<br>                集合当中存储的都是java对象的内存地址。</strong></p></blockquote><ul><li><p><code>add()</code>方法:向集合中添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态：父类型的对象指向子类型的引用</span><br>        <span class="hljs-comment">//创建一个集合对象</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//测试Collection接口中常用的方法</span><br>        list.add(<span class="hljs-number">1200</span>);     <span class="hljs-comment">//自动装箱，实际上是放了一个对象的内存地址</span><br>        list.add(<span class="hljs-number">3.14</span>);<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        list.add(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>int size()</code>方法：获取集合中元素的个数</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">size</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li><li><p><code>void clear()</code>方法：清空集合元素</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">clear</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure></li><li><p><code>boolean contains(Object o)</code> 方法：判断当前元素是否包含集合o</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">contains</span><span class="hljs-punctuation">(</span><span class="hljs-number">1200</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-variable">true</span><br></code></pre></td></tr></table></figure><ul><li>注意： <code>contain()</code>方法底层调用了<code>equals()</code>方法进行比对，所以比较的是内容。<br>存放在集合中的类型，一定要重写<code>equals()</code>方法。</li></ul></li></ul><hr><ul><li><p><code>remove(Object o)</code>  或者<code>remove(index)</code> ：删除指定元素</p><ul><li>注意：<code>remove()</code> ：底层也调用了<code>equals()</code>方法。</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">remove</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;3.14&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> 按值删除<br><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">remove</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> 按索引删除<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="4、集合遍历"><a href="#4、集合遍历" class="headerlink" title="4、集合遍历"></a>4、集合遍历</h2><blockquote><p><strong>迭代器是所有Collection集合通用的一种方式，其子类都可用。</strong></p><p><strong>但是在Map集合中不可用。</strong></p></blockquote><ul><li><p><strong>集合的两种遍历方式：</strong></p><ul><li><p><strong>第一种：迭代器</strong><br>以下是迭代器<code>Iterator</code>的方法</p><p>​<code>Boolean hasNext()</code> 如果有元素可以迭代，则返回true。<br>​<code>Object  next()</code> 返回迭代的下一个元素。<br>​<code>remove()</code>  从集合中删除此迭代器返回的元素（可选操作）。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//  获取迭代器对象</span><br>  <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br>  <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator.next();<br>       System.out.println(next);<br>  &#125;<span class="hljs-comment">//12003.14java.lang.Object@7f31245atrue</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">迭代器对象iterator最初没有指向第一个元素，</span><br><span class="hljs-comment">当执行iterator.hasNext()=true,表示还有元素可以迭代，</span><br><span class="hljs-comment">当执行iterator.next()，表示让迭代器向前进一位，并且将指向的元素返回(拿到)</span><br><span class="hljs-comment">*/</span><br>集合发生改变，迭代器必须重新获取。否则会有ConcurrentModificationException异常<br></code></pre></td></tr></table></figure></li><li><p><strong>第二种：增强for循环(foreach)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Object o : list) &#123;<br>    Syst em.out.println(o);<br>&#125;<span class="hljs-comment">//12003.14java.lang.Object@7f31245atrue</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第三种：普通for循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> list.get(i);<br>        System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="5、List-集合源码解读"><a href="#5、List-集合源码解读" class="headerlink" title="5、List 集合源码解读"></a>5、List 集合源码解读</h2><h3 id="①、ArrayList-源码解读"><a href="#①、ArrayList-源码解读" class="headerlink" title="①、ArrayList 源码解读"></a>①、ArrayList 源码解读</h3><blockquote><p><strong>1.当创建对象时，如果使用无参构造器，则初始elementData容量为0（jdk7是10）。</strong></p><p><strong>2.如果使用无参构造器，如果第一次添加，需要扩容的话，则扩容elementData为10，<br>           如果需要再次扩容的话，则扩容elementData为原来的1.5倍。</strong></p><p><strong>3.当添加元素时，先判断是否需要扩容，如果需要，则调用grow方法，否则直接添加元素到合适位置。</strong></p><p><strong>4.如果使用指定容量capacity的构造器，则初始化elemeData容量为capacity。</strong></p><p><strong>5.如果使用指定容量capacity的构造器，如需扩容，则直接扩容elemeData的1.5倍。</strong></p><p><strong>6.底层维护的是一个Object类型的数组elemeData。</strong></p></blockquote><ul><li><p>初始化容量</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">ArrayList</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">ArrayList</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span>默认容量是<span class="hljs-number">10</span><br><span class="hljs-variable">ArrayList</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">ArrayList</span><span class="hljs-punctuation">(</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span>设置初始化容量为<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure></li><li><p>源码解读</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">ArrayList</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>      <span class="hljs-operator">//</span>向集合中添加<span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">10</span>数据<br>      <span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">;</span> <span class="hljs-variable">i</span> <span class="hljs-operator">&lt;=</span> <span class="hljs-number">10</span><span class="hljs-operator">;</span> <span class="hljs-variable">i</span><span class="hljs-operator">++</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-variable">i</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>      <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-operator">//</span>向集合中添加<span class="hljs-number">11</span><span class="hljs-operator">-</span><span class="hljs-number">15</span>数据<br>      <span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span><span class="hljs-operator">;</span> <span class="hljs-variable">i</span> <span class="hljs-operator">&lt;=</span> <span class="hljs-number">15</span><span class="hljs-operator">;</span> <span class="hljs-variable">i</span><span class="hljs-operator">++</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-variable">i</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>      <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>      <span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-number">200</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1</span>、执行第一行<br>   <span class="hljs-variable">public</span> <span class="hljs-variable">ArrayList</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-variable">this</span><span class="hljs-operator">.</span><span class="hljs-variable">elementData</span> <span class="hljs-operator">=</span> <span class="hljs-type">DEFAULTCAPACITY_EMPTY</span><span class="hljs-type">_ELEMENTDATA</span><span class="hljs-operator">;</span><br>   <span class="hljs-punctuation">&#125;</span><span class="hljs-operator">//</span>使用无参构造器，创建了一个空的<span class="hljs-variable">elementData</span>数组<span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span>是空数组。<br>   <br><span class="hljs-number">2</span>、执行第<span class="hljs-number">4</span>行<br><span class="hljs-operator">--</span>首先对<span class="hljs-variable">i</span>进行自动装箱，然后执行<span class="hljs-variable">lisy</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>方法<br> <span class="hljs-variable">public</span> <span class="hljs-variable">boolean</span> <span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">e</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-variable">ensureCapacityInternal</span><span class="hljs-punctuation">(</span><span class="hljs-variable">size</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span>  <span class="hljs-operator">--&gt;</span>先确定是否扩容<br>        <span class="hljs-variable">elementData</span><span class="hljs-punctuation">[</span><span class="hljs-variable">size</span><span class="hljs-operator">++</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-variable">e</span><span class="hljs-operator">;</span>   <span class="hljs-operator">--&gt;</span>执行赋值操作<br>        <span class="hljs-variable">return</span> <span class="hljs-variable">true</span><span class="hljs-operator">;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-operator">--</span>确定是否扩容<span class="hljs-variable">ensureCapacityInternal</span><span class="hljs-punctuation">(</span><span class="hljs-variable">size</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>    ①、该方法确定<span class="hljs-variable">minCapacity</span>，第一次扩容为<span class="hljs-number">10</span><br>      <span class="hljs-variable">private</span> <span class="hljs-variable">void</span> <span class="hljs-variable">ensureCapacityInternal</span><span class="hljs-punctuation">(</span><span class="hljs-variable">int</span> <span class="hljs-variable">minCapacity</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-variable">ensureExplicitCapacity</span><span class="hljs-punctuation">(</span><span class="hljs-variable">calculateCapacity</span><span class="hljs-punctuation">(</span><span class="hljs-variable">elementData</span><span class="hljs-operator">,</span> <span class="hljs-variable">minCapacity</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>       <span class="hljs-punctuation">&#125;</span><br> <br>    ②、如果<span class="hljs-variable">elementData</span>大小不够，就调用<span class="hljs-variable">grow</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>去扩容。<br>       <span class="hljs-variable">private</span> <span class="hljs-variable">void</span> <span class="hljs-variable">ensureExplicitCapacity</span><span class="hljs-punctuation">(</span><span class="hljs-variable">int</span> <span class="hljs-variable">minCapacity</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span>  <span class="hljs-operator">//</span><span class="hljs-number">10</span><br>       <span class="hljs-variable">modCount</span><span class="hljs-operator">++;</span><span class="hljs-operator">//</span>记录集合被修改的次数<br>         <span class="hljs-variable">if</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">minCapacity</span> <span class="hljs-operator">-</span> <span class="hljs-variable">elementData</span><span class="hljs-operator">.</span><span class="hljs-variable">length</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-variable">grow</span><span class="hljs-punctuation">(</span><span class="hljs-variable">minCapacity</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>       <span class="hljs-punctuation">&#125;</span><br><br>③、使用扩容机制去扩容，第一次<span class="hljs-variable">newCapacity</span><span class="hljs-operator">=</span><span class="hljs-number">10</span>，第二次及以后，按照<span class="hljs-number">1.5</span>被扩容。<br>   扩容使用<span class="hljs-built_in">Arrays</span><span class="hljs-operator">.</span><span class="hljs-variable">copyOf</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>，可以在保护原数据的存在的情况下进行扩容。<br>  <span class="hljs-variable">private</span> <span class="hljs-variable">void</span> <span class="hljs-variable">grow</span><span class="hljs-punctuation">(</span><span class="hljs-variable">int</span> <span class="hljs-variable">minCapacity</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-operator">//</span><span class="hljs-variable">minCapacity</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><br>        <span class="hljs-variable">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-variable">elementData</span><span class="hljs-operator">.</span><span class="hljs-variable">length</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">+</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">&gt;&gt;</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>执行<span class="hljs-number">1.5</span>倍操作<br>        <span class="hljs-variable">if</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">newCapacity</span> <span class="hljs-operator">-</span> <span class="hljs-variable">minCapacity</span> <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br>            <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-variable">minCapacity</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">if</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">newCapacity</span> <span class="hljs-operator">-</span> <span class="hljs-type">MAX_ARRAY</span><span class="hljs-type">_SIZE</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br>            <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-variable">hugeCapacity</span><span class="hljs-punctuation">(</span><span class="hljs-variable">minCapacity</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>        <span class="hljs-operator">//</span> <span class="hljs-variable">minCapacity</span> <span class="hljs-variable">is</span> <span class="hljs-variable">usually</span> <span class="hljs-variable">close</span> <span class="hljs-variable">to</span> <span class="hljs-variable">size</span><span class="hljs-operator">,</span> <span class="hljs-variable">so</span> <span class="hljs-variable">this</span> <span class="hljs-variable">is</span> <span class="hljs-variable">a</span> <span class="hljs-variable">win</span><span class="hljs-operator">:</span><br>        <span class="hljs-variable">elementData</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">Arrays</span><span class="hljs-operator">.</span><span class="hljs-variable">copyOf</span><span class="hljs-punctuation">(</span><span class="hljs-variable">elementData</span><span class="hljs-operator">,</span> <span class="hljs-variable">newCapacity</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>      <span class="hljs-punctuation">&#125;</span><br>      <br>④、回到<span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">e</span><span class="hljs-punctuation">)</span>方法中执行<span class="hljs-variable">elementData</span><span class="hljs-punctuation">[</span><span class="hljs-variable">size</span><span class="hljs-operator">++</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> <span class="hljs-variable">e</span><span class="hljs-operator">;</span><br>   此时<span class="hljs-variable">size</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>，<span class="hljs-variable">elementData</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>，<span class="hljs-variable">size</span><span class="hljs-operator">++</span>之后为<span class="hljs-number">1</span>。<br>   <br><span class="hljs-number">3</span>、重复执行第四行中<span class="hljs-variable">lisy</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span>方法。但是不会执行<span class="hljs-variable">grow</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>中的扩容。<br><span class="hljs-number">4</span>、执行第<span class="hljs-number">8</span>行的<span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>方法<br><span class="hljs-operator">--</span>执行<span class="hljs-variable">ensureCapacityInternal</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>中的<span class="hljs-variable">ensureExplicitCapacity</span>中的       <span class="hljs-variable">grow</span><span class="hljs-punctuation">(</span><span class="hljs-variable">minCapacity</span><span class="hljs-punctuation">)</span>方法进行扩容。此时<span class="hljs-variable">minCapacity</span><span class="hljs-operator">=</span><span class="hljs-number">11</span>，<span class="hljs-variable">modCount</span><span class="hljs-operator">=</span><span class="hljs-number">11</span><br><span class="hljs-operator">--</span>进入<span class="hljs-variable">grow</span>方法，此时<span class="hljs-variable">oldCapacity</span><span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-operator">,</span><span class="hljs-variable">newCapacity</span><span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-operator">+</span><span class="hljs-number">5</span><span class="hljs-operator">=</span><span class="hljs-number">15</span><br>  然后执行<span class="hljs-built_in">Arrays</span><span class="hljs-operator">.</span><span class="hljs-variable">copyOf</span>方法，扩容出五个<span class="hljs-variable">null</span>位置，此时<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">10</span>，五个<span class="hljs-variable">null</span><span class="hljs-punctuation">)</span><br><span class="hljs-number">5</span>、执行第十行，继续扩容到<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure></li><li><p>数组优点和缺点要能够说出来！</p><ul><li>优点：检索效率较高（每个元素占用空间一样，内存地址是连续的，知道元素的首地址，然后知道下标，就可以计算出元素的内存地址）。</li><li>缺点：随机增删元素效率比较低。</li></ul></li><li><p>另外要注意：ArrayList集合末尾增删元素效率还是可以的。</p></li></ul><hr><h3 id="②、vector源码解读"><a href="#②、vector源码解读" class="headerlink" title="②、vector源码解读"></a>②、vector源码解读</h3><blockquote><p><strong>1、底层是一个对象数组，projected Object[] elementData。</strong></p><p><strong>2、线程是同步的，即线程是安全的，操作方法都带有Synchronized。</strong></p><p><strong>3、在开发中，需要线程同步安全时，考虑使用vector。</strong></p><p><strong>4、使用无参，默认是10，满后，就按2倍扩容。</strong></p><p><strong>5、如果指定容量大小，则每次按2倍扩容。</strong></p></blockquote><ul><li><p>源码解读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//无参构造器</span><br>    <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        vector.add(i);<br>    &#125;<br>    vector.add(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、执行第<span class="hljs-number">3</span>行<br>--进去无参构造方法<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>    --再次进入<span class="hljs-built_in">this</span>(<span class="hljs-number">10</span>);调用本类的其他构造方法<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>(initialCapacity, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">//第一次创建大小为10的数组</span><br><span class="hljs-number">2</span>、执行第<span class="hljs-number">5</span>行<br>--先对参数进行自动装箱<br>--执行add(E e)操作<br>①、ensureCapacityHelper确定是否需要扩容。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        modCount++;    <span class="hljs-comment">// modCount=1</span><br>        ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>); <br>        elementData[elementCount++] = e;<span class="hljs-comment">//elementCount=1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    ②、此时<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>&lt;<span class="hljs-number">10</span>)不成立，不需要扩容。<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>            <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>            grow(minCapacity);<br>    &#125;<br><span class="hljs-number">3</span>、反复执行<span class="hljs-keyword">for</span>循环中的代码<br><span class="hljs-number">4</span>、执行第<span class="hljs-number">7</span>行代码<br>--先对参数进行自动装箱<br>--执行add(E e)操作<br>①、ensureCapacityHelper确定是否需要扩容。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        modCount++;    <span class="hljs-comment">// modCount=11</span><br>        ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>); <span class="hljs-comment">//elementCount=10</span><br>        elementData[elementCount++] = e;<span class="hljs-comment">//elementCount=11</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>②、进入ensureCapacityHelper()方法中，此时<span class="hljs-keyword">if</span>(<span class="hljs-number">11</span>&gt;<span class="hljs-number">10</span>)成立，需要扩容。<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>             grow(minCapacity);<span class="hljs-comment">//minCapacity=11</span><br>    &#125;<br>    ③、进入grow(minCapacity)方法中。<br>           此时oldCapacity=<span class="hljs-number">10</span>，newCapacity=<span class="hljs-number">20</span>，capacityIncrement=<span class="hljs-number">0</span>，<br>       执行Arrays.copyOf()中的数组扩容。<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                         capacityIncrement : oldCapacity);<br>       <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>            newCapacity = minCapacity;<br>        <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>            newCapacity = hugeCapacity(minCapacity);<br>        elementData = Arrays.copyOf(elementData, newCapacity);<br>    &#125;<br>    ④、执行elementData[elementCount++] = e;添加元素到数组中<br>       elementData[<span class="hljs-number">10</span>]=<span class="hljs-number">100</span>; <br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">Vector</span><span class="hljs-punctuation">(</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>执行有参构造方法：<br>会直接进入此方法中，创建一个大小为<span class="hljs-number">8</span>的数组。<br><span class="hljs-variable">public</span> <span class="hljs-variable">Vector</span><span class="hljs-punctuation">(</span><span class="hljs-variable">int</span> <span class="hljs-variable">initialCapacity</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-variable">this</span><span class="hljs-punctuation">(</span><span class="hljs-variable">initialCapacity</span><span class="hljs-operator">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="③、LinkedList源码解读"><a href="#③、LinkedList源码解读" class="headerlink" title="③、LinkedList源码解读"></a>③、LinkedList源码解读</h3><blockquote><p>1、底层实现类<strong>双向链表和双端队列</strong>的特点。</p><p>2、可以添加任意元素(元素可以重复)，包括null。</p><p>3、线程不安全，没有实现同步。</p></blockquote><ul><li><p><strong>LinkedList的底层操作机制</strong></p><ul><li>LinkedList底层维护了一个双向链表。</li><li>LinkedList中维护了两个属性first和last分别指向首节点和尾节点。</li><li>每个节点(Node对象)，里面又维护了prev、next、item三个属性，其中通过prev指向前一个，通过next指向后一个节点。最终实现双向链表。</li><li>所以LinkedList的元素的<strong>添加和删除</strong>,不是通过数组完成的，相对来说效率较高。</li></ul></li><li><p><strong>源码解读</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">LinkedList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">LinkedList</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1</span>、执行第一步<br><span class="hljs-operator">--</span>调用无参构造器，创建一个空链表<br>    <span class="hljs-variable">public</span> <span class="hljs-variable">LinkedList</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-operator">--</span>此时<span class="hljs-variable">size</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>，<span class="hljs-variable">first</span><span class="hljs-operator">=</span><span class="hljs-variable">null</span>，<span class="hljs-variable">last</span><span class="hljs-operator">=</span><span class="hljs-variable">null</span>，<span class="hljs-variable">modCount</span><span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-operator">;</span><br>   <br><span class="hljs-number">2</span>、执行第二步<br><span class="hljs-operator">--</span>对 <span class="hljs-number">1</span> 执行自动装箱。<br><span class="hljs-operator">--</span>执行<span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>方法<br><span class="hljs-variable">public</span> <span class="hljs-variable">boolean</span> <span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">e</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-operator">//</span> <span class="hljs-variable">e</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>        <span class="hljs-variable">linkLast</span><span class="hljs-punctuation">(</span><span class="hljs-variable">e</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">return</span> <span class="hljs-variable">true</span><span class="hljs-operator">;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-operator">--</span>进入<span class="hljs-variable">linkLast</span><span class="hljs-punctuation">(</span><span class="hljs-variable">e</span><span class="hljs-punctuation">)</span>方法，创建一个结点，此时结点如下图<span class="hljs-number">1</span>所示<br>    <span class="hljs-variable">void</span> <span class="hljs-variable">linkLast</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">e</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-variable">final</span> <span class="hljs-variable">Node</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">E</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-variable">last</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span><span class="hljs-variable">null</span><br>        <span class="hljs-variable">final</span> <span class="hljs-variable">Node</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">E</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">Node</span><span class="hljs-operator">&lt;&gt;</span><span class="hljs-punctuation">(</span><span class="hljs-variable">l</span><span class="hljs-operator">,</span> <span class="hljs-variable">e</span><span class="hljs-operator">,</span> <span class="hljs-variable">null</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-variable">newNode</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">if</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">l</span> <span class="hljs-operator">==</span> <span class="hljs-variable">null</span><span class="hljs-punctuation">)</span><br>            <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-variable">newNode</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">else</span><br>                <span class="hljs-variable">l</span><span class="hljs-operator">.</span><span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-variable">newNode</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">size</span><span class="hljs-operator">++;</span><br>        <span class="hljs-variable">modCount</span><span class="hljs-operator">++;</span><br>   <span class="hljs-punctuation">&#125;</span><br>   此时<span class="hljs-variable">first</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-variable">last</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-variable">item</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-variable">size</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-variable">modCount</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-operator">--</span>此时添加结点成功，返回<span class="hljs-variable">true</span><br><br><span class="hljs-number">3</span>、执行第<span class="hljs-number">3</span>步<br><span class="hljs-operator">----</span>对 <span class="hljs-number">2</span> 执行自动装箱。<br><span class="hljs-operator">--</span>执行<span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>方法<br><span class="hljs-variable">public</span> <span class="hljs-variable">boolean</span> <span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">e</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-operator">//</span> <span class="hljs-variable">e</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><br>        <span class="hljs-variable">linkLast</span><span class="hljs-punctuation">(</span><span class="hljs-variable">e</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">return</span> <span class="hljs-variable">true</span><span class="hljs-operator">;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-operator">--</span>进入<span class="hljs-variable">linkLast</span><span class="hljs-punctuation">(</span><span class="hljs-variable">e</span><span class="hljs-punctuation">)</span>方法，创建一个结点，此时结点如下图<span class="hljs-number">2</span>所示<br>  此时<span class="hljs-variable">first</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-variable">last</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-operator">,</span><span class="hljs-variable">item</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-operator">,</span><span class="hljs-variable">size</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-operator">,</span><span class="hljs-variable">modCount</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><br>    <span class="hljs-variable">void</span> <span class="hljs-variable">linkLast</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">e</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-variable">final</span> <span class="hljs-variable">Node</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">E</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-variable">last</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">final</span> <span class="hljs-variable">Node</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">E</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">Node</span><span class="hljs-operator">&lt;&gt;</span><span class="hljs-punctuation">(</span><span class="hljs-variable">l</span><span class="hljs-operator">,</span> <span class="hljs-variable">e</span><span class="hljs-operator">,</span> <span class="hljs-variable">null</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-variable">newNode</span><span class="hljs-operator">;</span><br>       <span class="hljs-variable">if</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">l</span> <span class="hljs-operator">==</span> <span class="hljs-variable">null</span><span class="hljs-punctuation">)</span><br>           <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-variable">newNode</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">else</span><br>            <span class="hljs-variable">l</span><span class="hljs-operator">.</span><span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-variable">newNode</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">size</span><span class="hljs-operator">++;</span><br>       <span class="hljs-variable">modCount</span><span class="hljs-operator">++;</span><br>   <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-operator">--</span>此时添加结点成功，返回<span class="hljs-variable">true</span><br></code></pre></td></tr></table></figure><p>  如下图1：</p><p>  <img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/6.5.1.1qpw79sd99uo.webp" alt="6"></p><hr><p>  如下图2：</p><p>  <img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/6.5.2.542cjo3fkeo0.webp" alt="6"></p><hr></li><li><p><strong>演示双向链表创建结点以及遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">smith</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;smith&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;json&quot;</span>);<br><br>        <span class="hljs-comment">//连接三个点,形成双向链表</span><br>        <span class="hljs-comment">//jack -&gt; smith -&gt; json</span><br>        jack.next = smith;<br>        smith.next = json;<br>        <span class="hljs-comment">//json-&gt; smith -&gt; jack</span><br>        json.pre = smith;<br>        smith.pre = jack;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> jack;  <span class="hljs-comment">//first 头节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> json;   <span class="hljs-comment">//last  尾节点</span><br><br>        <span class="hljs-comment">//遍历结点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        System.out.println(first.item);<br>        first = first.next;<br>    &#125;<span class="hljs-comment">//jacksmithjson</span><br>&#125;<br><br><span class="hljs-comment">//节点类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> Object item;<br>    <span class="hljs-keyword">public</span> Node next;<br>    <span class="hljs-keyword">public</span> Node pre;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;item=&quot;</span> + item +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图所示:<br><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/6.5.3.34xw259pffg0.webp" alt="6"></p></li></ul><hr><h3 id="④、ArrayList-与-LinkedList-比较"><a href="#④、ArrayList-与-LinkedList-比较" class="headerlink" title="④、ArrayList 与 LinkedList 比较"></a>④、ArrayList 与 LinkedList 比较</h3><table><thead><tr><th></th><th>底层结构</th><th>增删的效率</th><th>改查的效率</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低，涉及到数组扩容</td><td>较高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高，通过链表追加</td><td>较低</td></tr></tbody></table><ul><li><strong>如何选择 ArrayList 和 LinkedList：</strong><ul><li>如果我们改查的操作多，选择ArrayList。</li><li>如果我们增删的操作多，选择LinkedList。</li><li>一般来说，在程序中，80%-90%都是查询，因此大部分情况下会选择ArrayList。</li><li>在一个项目中，根据业务灵活选择，也可能这样，一个模块使用的是ArrayList,另外一个模块是LinkedList。</li></ul></li></ul><hr><hr><h2 id="6、set集合"><a href="#6、set集合" class="headerlink" title="6、set集合"></a>6、set集合</h2><h3 id="①、Set-接口"><a href="#①、Set-接口" class="headerlink" title="①、Set 接口"></a>①、Set 接口</h3><blockquote><p><strong>1、无序 (添加和取出的顺序不一致)，没有索引。</strong></p><p><strong>2、不允许重复元素,所以最多包含一个null。</strong></p><p><strong>3、&#x3D;&#x3D;注意：&#x3D;&#x3D;虽然是无序的，但是每次取出的顺序，都是一致的。</strong></p></blockquote><ul><li><strong>遍历：可以使用迭代器，foreach。</strong></li></ul><h3 id="②、HashSet-底层机制"><a href="#②、HashSet-底层机制" class="headerlink" title="②、HashSet 底层机制"></a>②、HashSet 底层机制</h3><blockquote><p><strong>1、Hasnset实现了Set接口。</strong></p><p><strong>2、HashSet实际上是HashMap，看下源码。<br>                public Hashset（) {<br>                        map &#x3D; new HashMap&lt;&gt;();<br>                }</strong></p><p><strong>3、可以存放null值，但是只能有一个null。</strong></p><p><strong>4、HashSet不保证取出的元素是有序的，取决于hash后,再确定索引的结果。</strong></p><p><strong>5、不能有重复元素&#x2F;对象。</strong></p></blockquote><ul><li><p><strong>HashSet实际上是HashMap，HashMap底层是(数组+链表+红黑树)。</strong></p></li><li><p><strong>HashSet底层实际上是如何实现的（<code>hash()</code> + <code>equals()</code>）</strong></p><ul><li>HashSet底层是HashMap</li><li>HashMap底层维护的是一个Node类型的数组，默认为null。</li><li>第一次添加时，table 数组扩容到16，临界值(threshold)是16*加载因子<br>(loadFactor)是0.75&#x3D;12。</li><li>如果table数组使用到了临界值12（也就是底层size&gt;&#x3D;12,每加入一个元素，size++），就会扩容到16* 2&#x3D;32，新的临界值就是32*0.75 &#x3D;24，依次类推。</li><li>在Java8中，如果—条链表的元素个数到达<code>TREEIFY_THRESHOLD</code>(默认是8)。并且table的大小<br>&gt;&#x3D;<code>MIN TREEIFY CAPACITY</code>(默认64)，就会进行树化(红黑树)。否则仍然采用数组扩容机制。</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">HashSet</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">set</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">set</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">set</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、执行第一步<br>调用无参构造器，底层是一个HashMap<br>--<span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    &#125;<br>    <br><span class="hljs-number">2</span>、执行第二步<br>--执行add方法，PRESENT=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()起到一个占位的目的<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">// e=java</span><br>        <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    --执行put方法，key=e,value=PRESENT<br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>   &#125;<br>   <br>   --执行hash方法，得到key对应的哈希值<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br>    <br>   --进入 putVal 方法，代码过多，所以口述<br>   建立table表=<span class="hljs-number">16</span>，<span class="hljs-number">0.75</span>*<span class="hljs-number">16</span>=<span class="hljs-number">12</span>，大于<span class="hljs-number">12</span>时则需要扩容，<br>   通过哈希值，找到table对应的位置，如果对象相同，或者内容，则不添加，<br>   否则在对该位置上的链表进行<span class="hljs-keyword">for</span>循环，依次比较当前链表中每一个的值是否与要添加的值相    等，相等则取消添加，否则加入到链表末尾，在判断是否需要扩容。<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="③、TreeSet"><a href="#③、TreeSet" class="headerlink" title="③、TreeSet"></a>③、TreeSet</h3><blockquote><p><strong>不能存储null</strong></p></blockquote><ul><li><p>使用无参构造器</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">TreeSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">TreeSet</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">set</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;abc&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">set</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;def&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">set</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;abc&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">treeSet</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span><span class="hljs-punctuation">[</span><span class="hljs-variable">abc</span><span class="hljs-operator">,</span> <span class="hljs-variable">def</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></li><li><p>使用有参构造器，自定义比较规则，按字典顺序比较两个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<span class="hljs-comment">//使用匿名内部类</span><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-comment">//调用 compareTo() 方法，按字典顺序比较两个字符串。 </span><br>            <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<br>      &#125;<br>&#125;);<br>treeSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;smith&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;json&quot;</span>);<span class="hljs-comment">//按字典比较字符</span><br>System.out.println(treeSet);<span class="hljs-comment">//[abc, jack, json, smith]</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="7、Map集合"><a href="#7、Map集合" class="headerlink" title="7、Map集合"></a>7、Map集合</h2><h3 id="①、Map接口实现类的特点"><a href="#①、Map接口实现类的特点" class="headerlink" title="①、Map接口实现类的特点"></a>①、Map接口实现类的特点</h3><blockquote><p><strong>Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value。</strong></p><p><strong>Map 中的key和value可以是任何引用类型的数据，会封装到HashMap$Node对象中。</strong></p><p><strong>Map中的key不允许重复,原因和HashSet一样,前面分析过源码。</strong></p><p><strong>Map中的value可以重复。</strong></p><p><strong>Map 的key 可以为空， value 也可以为空，注意key为空，只能有一个，value 为空 ,可以多个。</strong></p><p><strong>常用String类作为Map的key。</strong></p><p><strong>key 和 value之间存在单向一对一关系，即通过指定的key总能找到对应的value。</strong></p></blockquote><hr><h3 id="②、Map接口中的方法"><a href="#②、Map接口中的方法" class="headerlink" title="②、Map接口中的方法"></a>②、Map接口中的方法</h3><ul><li><p><code>add()</code>方法：添加一个key-value键值对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;cyw&quot;</span>);<br>map.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;cyw&quot;</span>);<br>map.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;bcd&quot;</span>);<span class="hljs-comment">//key相同，等于替换第一行的数据</span><br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>System.out.println(map);<span class="hljs-comment">// &#123;a = bcd, b = cyw, null = aaa&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>get(Object key)</code>： 通过指定key，找到对应的value值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.get(<span class="hljs-string">&quot;a&quot;</span>));<span class="hljs-comment">// bcd</span><br></code></pre></td></tr></table></figure></li><li><p><code>entrySet()</code>： 返回该集合键值对视图</p><ul><li><p>k-v，为了程序员遍历方便，还会创建EntrySet集合，存放类型为Entry，一个对象就有k-v。</p></li><li><p>Map.Entry提供了重要的方法，<code>getKey()</code>，<code>getValue()</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br>System.out.println(set1);<span class="hljs-comment">//[null=aaa, a=bcd, b=cyw]</span><br><br> <span class="hljs-keyword">for</span> (Object o : set) &#123;<br>      Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) o;<span class="hljs-comment">//向下转型</span><br>       System.out.println(entry.getKey());<br>&#125;  <span class="hljs-comment">//nulla   b</span><br></code></pre></td></tr></table></figure></li><li><p><code>keySet()</code>：返回该集合key部分视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.keySet();<br>System.out.println(set);<span class="hljs-comment">//[null, a, b]</span><br></code></pre></td></tr></table></figure></li><li><p><code>values()</code>：返回该集合value部分视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>System.out.println(values);<span class="hljs-comment">//[bca, aaa, cyw]</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="③、Map的遍历方式"><a href="#③、Map的遍历方式" class="headerlink" title="③、Map的遍历方式"></a>③、Map的遍历方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;大哥&quot;</span>,<span class="hljs-string">&quot;刘备&quot;</span>);<br>map.put(<span class="hljs-string">&quot;二哥&quot;</span>,<span class="hljs-string">&quot;关羽&quot;</span>);<br>map.put(<span class="hljs-string">&quot;三哥&quot;</span>,<span class="hljs-string">&quot;张翼德&quot;</span>);<br>map.put(<span class="hljs-string">&quot;英雄&quot;</span>,<span class="hljs-literal">null</span>);<br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;西欧&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><p><strong>第一组：先取出所有的key，通过key取出对应的value</strong></p><ul><li><p><strong>1、增强for循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.keySet();<br><span class="hljs-keyword">for</span> (Object key : set) &#123;<br>     System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>2、迭代器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.keySet();<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator.next();<br>       System.out.println(next);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>第二组：把所有value取出</strong></p><ul><li><p><strong>这里可以使用Collection使用的遍历方法</strong></p></li><li><p><strong>1、增强for循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br><span class="hljs-keyword">for</span> (Object value : values) &#123;<br>    System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>2、迭代器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> values.iterator();<br>      <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator.next();<br>      System.out.println(next);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>第三组：通过Entry 来获取 k-v</strong></p><ul><li><p><strong>1、增强for</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br><span class="hljs-keyword">for</span> (Object o : set) &#123;<br>   Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) o;<span class="hljs-comment">//向下转型</span><br>   System.out.println(entry.getKey() +<span class="hljs-string">&quot;-&quot;</span>+ entry.getValue());<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>2、迭代器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>      Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) next;<br>      System.out.println(entry.getKey() + <span class="hljs-string">&quot;=&quot;</span> + entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="④、HashMap-底层源码"><a href="#④、HashMap-底层源码" class="headerlink" title="④、HashMap 底层源码"></a>④、HashMap 底层源码</h3><blockquote><p><strong>1、key不能重复，但是value可以重复，允许使用null键和null值。</strong></p><p><strong>2、如果添加相同的key，则会覆盖原来的k-v，等同于修改。</strong></p><p><strong>3、无序不可重复，底层采用hash表来存储。</strong></p><p><strong>4、线程不安全，没有实现同步。</strong></p></blockquote><ul><li>底层是：数组+链表+红黑树。</li><li>扩容和HashSet完全一样，可以看HashSet底层机制。</li></ul><hr><h3 id="⑤、HashTable"><a href="#⑤、HashTable" class="headerlink" title="⑤、HashTable"></a>⑤、HashTable</h3><blockquote><p><strong>1、存放的元素是键值对:即K-V。</strong></p><p>&#x3D;&#x3D;<strong>2、 hashtable的键和值都不能为null。</strong>&#x3D;&#x3D;</p><p><strong>3、hashTable使用方法基本上和HashMap一样。</strong></p><p><strong>4、hashTable是线程安全的，hashMap是线程不安全的。</strong></p></blockquote><ul><li><p><strong>hashtable的键和值都不能为null。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hashtable</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>table.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//异常</span><br>table.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-literal">null</span>);<span class="hljs-comment">//异常</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="⑥、Properties"><a href="#⑥、Properties" class="headerlink" title="⑥、Properties"></a>⑥、Properties</h3><blockquote><ol><li><strong>Properties类继承自Hashtable类并且实现了Map接口，也是使用一种健值对的形</strong><br><strong>式来保存数据。</strong></li><li><strong>他的使用特点和Hashtable类似</strong></li><li><strong>Properties 还可以用于从xoox.properties文件中，加载数据到Properties类对象,</strong><br><strong>并进行读取和修改”</strong></li><li><strong>说明:工作后 xoox.properties文件通常作为配置文件</strong></li></ol></blockquote><ul><li><p><strong>键和值都不能为null。</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-built_in">Properties</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br>   <span class="hljs-variable">properties</span><span class="hljs-operator">.</span><span class="hljs-variable">put</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-operator">,</span><span class="hljs-variable">null</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>异常<br>   <span class="hljs-variable">properties</span><span class="hljs-operator">.</span><span class="hljs-variable">put</span><span class="hljs-punctuation">(</span><span class="hljs-variable">null</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>异常<br></code></pre></td></tr></table></figure></li><li><p><strong>也有常见的增删改查的方法</strong></p></li></ul><hr><h3 id="⑦、TreeMap"><a href="#⑦、TreeMap" class="headerlink" title="⑦、TreeMap"></a>⑦、TreeMap</h3><blockquote><p><strong>和TreeSet类似</strong></p></blockquote><ul><li><p>也可以使用有参构造器自定义排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TreeMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<br>       &#125;<br>&#125;);<br>  map.put(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>);<br>  map.put(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>);<br>  map.put(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-string">&quot;20&quot;</span>);<br>  System.out.println(map);<span class="hljs-comment">//&#123;foo=17, jack=18, smith=2&#125;</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="8、Collections工具类"><a href="#8、Collections工具类" class="headerlink" title="8、Collections工具类"></a>8、Collections工具类</h2><h3 id="①、Collections工具类介绍"><a href="#①、Collections工具类介绍" class="headerlink" title="①、Collections工具类介绍"></a>①、Collections工具类介绍</h3><ul><li>Collections是一个操作Set、List和Map等集合的工具类。</li><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作<br>排序操作:(均为static方法)。</li><li>reverse(List)：反转List中元素的顺序。</li><li>shuffle(List)：对List集合元素进行随机排序。</li><li>sort(List)：根据元素的自然顺序对指定List 集合元素按升序排序。</li><li>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合元素进行<br>排序。</li><li>swap(List，int，int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换。</li></ul><h3 id="②、演示方法"><a href="#②、演示方法" class="headerlink" title="②、演示方法"></a>②、演示方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">3</span>);<br>list.add(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><ul><li><p>reverse(List)：反转List中元素的顺序。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Collections</span><span class="hljs-operator">.</span><span class="hljs-variable">reverse</span><span class="hljs-punctuation">(</span><span class="hljs-variable">list</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">:</span> <span class="hljs-variable">list</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">o</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-number">4</span>  <span class="hljs-number">3</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>shuffle(List)：对List集合元素进行随机排序。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Collections</span><span class="hljs-operator">.</span><span class="hljs-variable">shuffle</span><span class="hljs-punctuation">(</span><span class="hljs-variable">list</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">:</span> <span class="hljs-variable">list</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">o</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-number">4</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>sort(List)：根据元素的自然顺序对指定List 集合元素按升序排序。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Collections</span><span class="hljs-operator">.</span><span class="hljs-variable">sort</span><span class="hljs-punctuation">(</span><span class="hljs-variable">list</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">:</span> <span class="hljs-variable">list</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">o</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合元素进行<br>排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//假定按字符串大小排序</span><br>Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>  <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>         <span class="hljs-keyword">return</span> o1.toString().compareTo(o2.toString());<br>      &#125;<br>&#125;);<br><span class="hljs-keyword">for</span> (Object o : list) &#123;<br>      System.out.println(o);<span class="hljs-comment">// 1 2 3 4</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>swap(List，int，int)：将指定 list 集合中的i处元素和j处元素进行交换。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Collections</span><span class="hljs-operator">.</span><span class="hljs-variable">swap</span><span class="hljs-punctuation">(</span><span class="hljs-variable">list</span><span class="hljs-operator">,</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">:</span> <span class="hljs-variable">list</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">o</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="Ⅶ、泛型"><a href="#Ⅶ、泛型" class="headerlink" title="Ⅶ、泛型"></a>Ⅶ、泛型</h1><h2 id="1、使用传统方法的问题分析"><a href="#1、使用传统方法的问题分析" class="headerlink" title="1、使用传统方法的问题分析"></a>1、使用传统方法的问题分析</h2><ul><li>不能对加入到集合ArrayList中的数据类型进行约束(不安全)。</li><li>遍历的时候，需要进行类型转换，如果集合中的数据量较大，对效率有影响。</li></ul><h2 id="2、使用泛型"><a href="#2、使用泛型" class="headerlink" title="2、使用泛型"></a>2、使用泛型</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">//</span><span class="hljs-variable">ArrayList</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">Dog</span><span class="hljs-operator">&gt;,</span>表示集合中只能存放<span class="hljs-variable">Dog</span>类型<br><span class="hljs-variable">ArrayList</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">Dog</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">ArrayList</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">Dog</span><span class="hljs-operator">&gt;</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">ist</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-variable">new</span> <span class="hljs-variable">Dog</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;旺财&quot;</span><span class="hljs-operator">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-variable">new</span> <span class="hljs-variable">Dog</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;发财&quot;</span><span class="hljs-operator">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-variable">new</span> <span class="hljs-variable">Dog</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;小黄&quot;</span><span class="hljs-operator">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-number">7</span><br>       <br><span class="hljs-operator">//</span><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">add</span><span class="hljs-punctuation">(</span><span class="hljs-variable">new</span> <span class="hljs-variable">Cat</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;招财猫&quot;</span><span class="hljs-operator">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span>此行报错<br><br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">:</span> <span class="hljs-variable">list</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-operator">//</span>遍历可以取出，不需要类型转换<br>    <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">dog</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3、泛型简介"><a href="#3、泛型简介" class="headerlink" title="3、泛型简介"></a>3、泛型简介</h2><ul><li><p>泛型又称参数化类型，是Jdk5.0出现的新特性，解决数据类型的安全性问题。</p></li><li><p>在类声明或实例化时只要指定好需要的具体的类型即可。</p></li><li><p>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时，代码更加简洁、健壮。</p></li><li><p>泛型的作用是:可以在类声明时通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。</p></li><li><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;E 在编译期间，就确定E是什么类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可以在类声明时,通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&lt;E&gt;&#123;  <span class="hljs-comment">//E表示 s的数据类型，该数据在定义Person对象时指定，即在编译期间，就确定  E是什么</span><br>    E s;               <span class="hljs-comment">//E可以是某个属性的类型</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(E s)</span> &#123;   <span class="hljs-comment">//E可以是参数类型</span><br>        <span class="hljs-built_in">this</span>.s = s;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;       <span class="hljs-comment">//E可以是方法的返回值的类型</span><br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//表示Person内的E的类型变成了String</span><br>    Person&lt;String&gt; person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;String&gt;(<span class="hljs-string">&quot;John&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4、泛型语法"><a href="#4、泛型语法" class="headerlink" title="4、泛型语法"></a>4、泛型语法</h2><ul><li><p>泛型的声明<br>interface  接口名&lt;T&gt;{} 和 class类&lt;K,V&gt;{}<br>      比如:List , ArrayList<br>说明:</p><ul><li>其中，T，K，V不代表值，而是表示类型。</li><li>任意字母都可以。常用T表示，是Type的缩写。</li></ul></li><li><p>必须是引用数据类型，不能是基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<span class="hljs-comment">//正确</span><br>ArrayList&lt;<span class="hljs-type">int</span>&gt; ints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-type">int</span>&gt;();<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure></li><li><p>泛型的使用形式</p><ul><li>以下两种方法都可以，推荐使用第二种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//传统形式</span><br>ArrayList&lt;Integer&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br><span class="hljs-comment">//简化形式，编译器会进行类型推断，</span><br>ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure></li><li><p>在给泛型指定具体类型后，可以传入该类型或者其子类型</p><ul><li>如果没有指定泛型类型，默认是Object类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//可以传入A类型的，指定E等于A类型</span><br>Pig&lt;A&gt; aPig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>&lt;A&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<br>    <span class="hljs-comment">//由于B是A的子类，所以也可以传入B类型</span><br>    Pig&lt;A&gt; bPig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>&lt;A&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pig</span>&lt;E&gt;&#123;<br>    E e;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pig</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-built_in">this</span>.e = e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="5、自定义泛型类"><a href="#5、自定义泛型类" class="headerlink" title="5、自定义泛型类"></a>5、自定义泛型类</h2><ul><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名&lt;T,R...&gt;&#123;<span class="hljs-comment">//也可以是接口</span><br>成员;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意细节</p><ul><li>普通成员可以使用泛型(属性、方法)。</li><li>使用泛型的数组，不能初始化。</li><li>静态方法中不能使用类的泛型。</li><li>泛型类的类型，是在创建对象时确定的 (因为创建对象时，需要指定确定类型)。</li><li>如果在创建对象时，没有指定类型，默认为Object。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. Tiger后面泛型，所以我们把 Tiger就称为自定义泛型类</span><br><span class="hljs-comment">//2. T，R，M 泛型的标识符，一般是单个大写字母</span><br><span class="hljs-comment">//3．泛型标识符可以有多个.</span><br><span class="hljs-comment">//4．普通成员可以使用泛型(属性、方法)</span><br><span class="hljs-comment">//5. 使用泛型的数组，不能初始化</span><br><span class="hljs-comment">//6. 静态方法中不能使用类的泛型。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span>&lt;T,R,M&gt;&#123;<br>    String name;<br>    T t;<br>    R r;<br>    M m;<br><br>  <span class="hljs-comment">//T[] ts = new T[8];//报错，数组在new的时候，T类型确定不下来，不知道在内存开辟多大空间</span><br>   <br>  <span class="hljs-comment">//public static void m1(M m)&#123;&#125; //报错，静态方法不能实例化，泛型是在类创建的时候确定</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(String name, T t, R r, M m)</span> &#123;  <span class="hljs-comment">//构造器使用泛型</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.t = t;<br>        <span class="hljs-built_in">this</span>.r = r;<br>        <span class="hljs-built_in">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">//返回类型使用泛型</span><br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT</span><span class="hljs-params">(T t)</span> &#123;     <span class="hljs-comment">//方法使用泛型</span><br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="6、自定义泛型接口"><a href="#6、自定义泛型接口" class="headerlink" title="6、自定义泛型接口"></a>6、自定义泛型接口</h2><ul><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">interface  接口名&lt;T,R..&gt;&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意细节</p><ul><li>接口中，静态成员也不能使用泛型(这个和泛型类规定一样)。</li><li>泛型接口的类型，在继承接口或者实现接口时确定。</li><li>没有指定类型，默认为Object。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span>  <span class="hljs-title class_">IUsb</span>&lt;U,R&gt;&#123;<br>    <br>    <span class="hljs-comment">//U i;报错静态成员也不能使用泛型</span><br>    <br>    <span class="hljs-comment">//普通方法中，也可以使用泛型</span><br>    R <span class="hljs-title function_">get</span><span class="hljs-params">(U u)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(R r)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(R r1, R r2, U u1, U u2)</span>;<br><br>    <span class="hljs-comment">//在jdk8中，可以在接口中，使用默认方法,也可以用泛型</span><br>    <span class="hljs-keyword">default</span> R <span class="hljs-title function_">method</span><span class="hljs-params">(U u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//给U指定了Float，给R指定了Integer,所有当我们实现IUsb方法时，会自动将Float替换U,Integer替换R</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUsb</span>&lt;Float,Integer&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">get</span><span class="hljs-params">(Float s)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Integer aDouble)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Integer r1, Integer r2, Float u1, Float u2)</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义一个接口IA继承IUsb,U=String,R=Double</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IUsb</span>&lt;String,Double&gt;&#123;&#125;<br><br><span class="hljs-comment">//定义一个类，实现IA接口，IA继承IUsb，所有指定了类型 U=String,R=Double</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">get</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Double aDouble)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Double r1, Double r2, String u1, String u2)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="7、自定义泛型方法"><a href="#7、自定义泛型方法" class="headerlink" title="7、自定义泛型方法"></a>7、自定义泛型方法</h2><ul><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 &lt;T,R..&gt;  返回类型  方法名(参数列表)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意细节</p><ul><li>泛型方法,可以定义在普通类中，也可以定义在泛型类中。</li><li>当泛型方法被调用时，类型会确定</li><li><code>public void eat(E e)&#123;&#125;</code>，但修饰符后没有&lt;T,R..&gt;，该方法不是泛型方法，而是使用了泛型。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>        car.fly(<span class="hljs-string">&quot;宝马&quot;</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">//当调用方法时，传入参数，编译器就会确定类型</span><br>&#125;<br><br><span class="hljs-comment">//普通类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;       <span class="hljs-comment">//普通方法</span><br>    <br>    <span class="hljs-comment">//&lt;T,R&gt;就是泛型</span><br>    <span class="hljs-comment">//是提供给fly使用的</span><br>    <span class="hljs-keyword">public</span>&lt;T,R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(T t,R r)</span>&#123;&#125;     <span class="hljs-comment">//泛型方法</span><br>&#125;<br><br><span class="hljs-comment">//泛型类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span>&lt;T,R&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;       <span class="hljs-comment">//普通方法</span><br>    <br>    <span class="hljs-keyword">public</span> &lt;U,M&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(U u,M m)</span>&#123;&#125;     <span class="hljs-comment">//泛型方法 </span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(T t)</span>&#123;&#125;<span class="hljs-comment">//不是泛型方法，而是使用了泛型</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="8、泛型的继承和通配符"><a href="#8、泛型的继承和通配符" class="headerlink" title="8、泛型的继承和通配符"></a>8、泛型的继承和通配符</h2><ul><li>泛型不具备继承性<br><code>List&lt;Object&gt; list = new ArrayList&lt;String&gt;;</code>    –&gt;错误</li><li><?>：支持任意泛型类型。</li><li><? extends A>：支持A类以及A类的子类，规定了泛型的上限。</li><li><? super A>：支持A类以及A类的父类，不限于直接父类，规定了泛型的下限。</li></ul><hr><hr><h1 id="Ⅸ、多线程"><a href="#Ⅸ、多线程" class="headerlink" title="Ⅸ、多线程"></a>Ⅸ、多线程</h1><h2 id="1、线程与进程"><a href="#1、线程与进程" class="headerlink" title="1、线程与进程"></a>1、线程与进程</h2><ul><li><p><strong>什么是进程？什么是线程？</strong></p><ul><li>进程是一个应用程序（1个进程是一个软件）。</li><li>线程是一个进程中的执行场景&#x2F;执行单元。</li><li>一个进程可以启动多个线程。</li><li>进程可以看做是现实生活当中的公司。<br>线程可以看做是公司当中的某个员工。</li></ul></li><li><p><strong>进程和线程是什么关系？</strong></p><ul><li>进程A和进程B的内存独立不共享。<br>这两个进程是独立的，不共享资源。</li><li>线程A和线程B，堆内存和方法区内存共享。<br>但是栈内存独立，&#x3D;&#x3D;一个线程一个栈。&#x3D;&#x3D;</li><li>假设启动10个线程，会有10个栈空间，每个栈和每个栈之间，<br>互不干扰，各自执行各自的，这就是多线程并发。</li></ul></li><li><p>火车站，可以看做是一个进程。</p><ul><li>火车站中的每一个售票窗口可以看做是一个线程。</li><li>我在窗口1购票，你可以在窗口2购票，你不需要等我，我也不需要等你。</li><li>所以多线程并发可以提高效率。</li></ul></li><li><p>java中之所以有多线程机制，目的就是为了提高程序的处理效率。</p></li><li><p><strong>线程内存图如下：</strong></p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/8.1.1.77o39b1er8g0.webp" alt="8"></li></ul></li></ul><hr><ul><li><strong>思考：对于单核的CPU来说，真的可以做到真正的多线程并发吗？</strong><ul><li>对于多核的CPU电脑来说，真正的多线程并发是没问题的。<br>4核CPU表示同一个时间点上，可以真正的有4个进程并发执行。</li><li>单核的CPU表示只有一个大脑：<ul><li>不能够做到真正的多线程并发，但是可以做到给人一种“多线程并发”的感觉。对于单核的CPU来说，在某一个时间点上实际上只能处理一件事情，但是由于CPU的处理速度极快，多个线程之间频繁切换执行，跟人来的感觉是：多个事情同时在做！！！！！</li><li>线程A：播放音乐<br>线程B：运行魔兽游戏<br>线程A和线程B频繁切换执行，人类会感觉音乐一直在播放，游戏一直在运行，给我们的感觉是同时并发的。</li></ul></li><li>电影院采用胶卷播放电影，一个胶卷一个胶卷播放速度达到一定程度之后，人类的眼睛产生了错觉，感觉是动画的。这说明人类的反应速度很慢，就像一根钢针扎到手上，到最终感觉到疼，这个过程是需要“很长的”时间的，在这个期间计算机可以进行亿万次的循环。所以计算机的执行速度很快。</li></ul></li></ul><hr><h2 id="2、线程的实现方式"><a href="#2、线程的实现方式" class="headerlink" title="2、线程的实现方式"></a>2、线程的实现方式</h2><ul><li><p>&#x3D;&#x3D;java支持多线程机制。并且java已经将多线程实现了，我们只需要继承就行了。&#x3D;&#x3D;</p></li><li><p><strong>三种方式</strong>：</p><p><strong>第一：编写一个类，直接继承Thread类，重写run方法。</strong></p><p><strong>第二：编写一个类，实现Runnable接口，实现run方法。</strong>&#x3D;&#x3D;（建议使用方式）&#x3D;&#x3D;</p><p><strong>第三：编写一个类，实现Callable接口，实现call方法</strong></p><ul><li><p><strong>第一：编写一个类，直接继承java.lang.Thread，重写run方法。</strong></p><ul><li>&#x3D;&#x3D;注意：&#x3D;&#x3D;不能直接使用<code>t1.run();</code>，不然只能直接当普通方法使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个分支线程对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(m);<br>        <span class="hljs-comment">// 启动线程</span><br>        t.start();    <span class="hljs-comment">// start()方法作用：启动一个分支线程，在JVM中开辟一个新      的栈空间，这段代码任务完成后，start()就结束了，             线程就启动成功了，启动成功的线程会自动调用run方法，并      且run方法在分支栈的底部(压栈)。此时run方法在分支栈的          底部，main方法在主栈的底部，run和main是平级的。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程--&gt;&quot;</span>+ i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//新建一个分支线程类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//编写程序，这段程序允许在分支线程中(分支栈)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>第二：编写一个类，实现java.lang.Runnable接口，实现run方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、普通创建方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建一个可运行的对象</span><br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">//将可运行的对象封装成一个线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(m);<br>        <span class="hljs-comment">//启动线程</span><br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//此时还不是一个线程类，只是一个可运行的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//2、优化：可以采用匿名内部类的方式创建线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//编写代码</span><br>            &#125;<br>        &#125;);<br>        <br>        t.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>第三：编写一个类，实现Callable接口，重写call方法（JDK8新特性。）</strong></p><ul><li>&#x3D;&#x3D;注意：这种方式实现的线程可以获取线程的返回值。&#x3D;&#x3D;</li><li>前两种方式是无法获取线程返回值的，因为run方法返回void。</li><li>优点：可以获取到线程的执行结果。</li><li>缺点：效率比较低，在获取 t 线程执行结果的时候，使当前线程受阻塞，效率较低。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//创建一个&quot;未来任务&quot;类对象。</span><br>        <span class="hljs-comment">//参数非常重要，需要给Callable接口实现类对象。</span><br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>() &#123;<br>            <span class="hljs-comment">//call方法相当于run方法，只不过call方法有返回值</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123; <br>                <span class="hljs-comment">//模拟执行</span><br>                System.out.println(<span class="hljs-string">&quot;call method begin&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                System.out.println(<span class="hljs-string">&quot;call method end&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);<br>        t.start();<br><br>        <span class="hljs-comment">//这里是main方法，这是在主线程中，怎么拿到t线程的执行结果？</span><br>        <span class="hljs-comment">//get()方法的执行会导致&quot;当前线程阻塞”</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> task.get();<br>        System.out.println(o);<br>        <br>        <span class="hljs-comment">//main方法这里的程序要想执行必须等待get()方法的结束</span><br>        <span class="hljs-comment">// 而get()方法可能需要很久。因为get()方法是为了拿另一个线程的执行结果</span><br>        <span class="hljs-comment">// 另一个线程执行是需要时间的。</span><br>        System.out.println(<span class="hljs-string">&quot;主线程继续执行&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-comment">//此时必须等21行执行完，主线程的27行才能执行</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="3、Thread-线程的一些方法"><a href="#3、Thread-线程的一些方法" class="headerlink" title="3、Thread 线程的一些方法"></a>3、Thread 线程的一些方法</h2><ul><li><p><code>void setPriority(int newPriority)</code> ：设置线程的优先级<br><code>int getPriority()</code> ：获取线程优先级</p></li><li><p><code>static void yield()</code> ：暂停当前正在执行的线程对象，并执行其他线程</p></li><li><p>&#x3D;&#x3D;上述方法见第4节&#x3D;&#x3D;</p></li><li><p><code>setDaemon(boolean on)</code> ：将线程设置成守护线程。–&gt;见 9、守护线程</p></li><li><p><code>setName()</code>： 设置线程名称</p></li><li><p><code>getName()</code>：返回该线程的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>t.start();<br>t.setName(<span class="hljs-string">&quot;分支线程1&quot;</span>);<span class="hljs-comment">//设置线程名称</span><br>System.out.println(t.getName());<span class="hljs-comment">//返回该线程的名称</span><br>结果为：分支线程<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p><code> Thread.currentThread()</code>：获取当前线程对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br> <span class="hljs-comment">//这个代码出现在main方法中，则当前线程对象就是主线程</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    System.out.println(thread.getName());<span class="hljs-comment">//main</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Thread.sleep()</code>：在指定的毫秒数内让当前正在执行的线程休眠 (暂停执行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//出现在哪个线程中，就会让哪个线程休眠</span><br></code></pre></td></tr></table></figure></li><li><p><code>interrupt()</code>：中断线程，但并没有真正的结束线程。所以一般用于中断正在休眠线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>t.interrupt();<br></code></pre></td></tr></table></figure></li></ul><h2 id="4、关于线程的调度"><a href="#4、关于线程的调度" class="headerlink" title="4、关于线程的调度"></a>4、关于线程的调度</h2><p><strong>常见的线程调度模型有哪些？</strong></p><ul><li>抢占式调度模型：<ul><li>哪个线程的优先级比较高，抢到的CPU时间片的概率就高一些&#x2F;多一些。<br>java采用的就是抢占式调度模型。</li></ul></li><li>均分式调度模型：<ul><li>平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。<br>平均分配，一切平等。<br>有一些编程语言，线程调度模型采用的是这种方式。</li></ul></li></ul><p><strong>java中提供了哪些方法是和线程调度有关系的呢？</strong></p><ul><li><p><strong>实例方法：</strong></p><ul><li><p><strong><code>void setPriority(int newPriority)</code> ：设置线程的优先级</strong><br><strong><code>int getPriority()</code> ：获取线程优先级</strong></p></li><li><p>最低优先级1<br>默认优先级是5<br>最高优先级10</p></li><li><p>&#x3D;&#x3D;注意：优先级比较高的获取CPU时间片可能会多一些。（但也不完全是，大概率是多的。）&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>t.setPriority(<span class="hljs-number">9</span>);<span class="hljs-comment">//设置线程的优先级</span><br>System.out.println(t.getPriority());<span class="hljs-comment">//获取线程优先级</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>静态方法：</strong></p><ul><li><strong><code>static void yield()</code>：  线程礼让，暂停当前正在执行的线程对象，并执行其他线程。</strong></li><li>yield() 方法不是阻塞方法。让当前线程让位，让给其它线程使用。<br>yield() 方法的执行会让当前线程从“运行状态”回到“就绪状态”。</li><li>&#x3D;&#x3D;注意：在回到就绪之后，有可能还会再次抢到。&#x3D;&#x3D;</li></ul></li><li><p><strong>实例方法：</strong></p><ul><li><p><strong><code>void join()</code>  :合并线程，类似线程的插队。插队的线程一旦插队成功,则肯定先执行完插入的线程所有的任务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>Public <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">MyThread2</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>();<br>        <br><span class="hljs-comment">//使当前线程进入阻塞，让t线程执行，直到t线程结束。当前线程才可以继续。</span><br>        t.join(); <br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5、线程的生命周期"><a href="#5、线程的生命周期" class="headerlink" title="5、线程的生命周期"></a>5、线程的生命周期</h2><ul><li>关于线程对象的生命周期？<ul><li>新建状态</li><li>就绪状态</li><li>运行状态</li><li>阻塞状态</li><li>死亡状态</li></ul></li><li>如下图：<br><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/8.5.2.4dzzikhkskc0.webp" alt="8"></li></ul><hr><ul><li>详情图：<img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/8.5.1.yhjrkequpm8.webp" alt="8"></li></ul><h2 id="6、数据安全问题"><a href="#6、数据安全问题" class="headerlink" title="6、数据安全问题"></a>6、数据安全问题</h2><p><strong>①、关于多线程并发环境下，数据的安全问题。</strong></p><ul><li><p>为什么这个是重点？</p><ul><li>以后在开发中，我们的项目都是运行在服务器当中，而服务器已经将线程的定义，线程对象的创建，线程的启动等，都已经实现完了。这些代码我们都不需要编写。</li></ul></li><li><p>最重要的是：</p><ul><li>你要知道，你编写的程序需要放到一个多线程的环境下运行，你更需要关注的是这些数据<br>在多线程并发的环境下是否是安全的。（重点：*****）</li></ul></li></ul><hr><p><strong>②、什么时候数据在多线程并发的环境下会存在安全问题呢？</strong></p><ul><li><p>三个条件：</p><ul><li>条件1：多线程并发。</li><li>条件2：有共享数据。</li><li>条件3：共享数据有修改的行为。</li></ul></li><li><p>​满足以上3个条件之后，就会存在线程安全问题。</p></li></ul><hr><p><strong>③、怎么解决线程安全问题呢？</strong></p><ul><li>当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在<br>线程安全问题，怎么解决这个问题？<ul><li>线程排队执行。（不能并发）。用排队执行解决线程安全问题。<br>这种机制被称为：线程同步机制。</li><li>专业术语叫做：线程同步，实际上就是线程不能并发了，线程必须排队执行。</li></ul></li><li>怎么解决线程安全问题呀？<br>答：使用“线程同步机制”。</li><li>线程同步就是线程排队了，线程排队了就会牺牲一部分效率，没办法，数据安全<br>第一位，只有数据安全了，我们才可以谈效率。数据不安全，没有效率的事儿。</li></ul><hr><p><strong>④、说到线程同步这块，涉及到这两个专业术语：</strong></p><ul><li>异步编程模型：<ul><li>线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，谁也不需要等谁，这种编程模型叫做：异步编程模型。其实就是：多线程并发（效率较高。）</li><li>异步就是并发。</li></ul></li><li>同步编程模型：<ul><li>线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型。效率较低。线程排队执行。</li><li>同步就是排队。</li></ul></li></ul><hr><h2 id="7、线程同步机制"><a href="#7、线程同步机制" class="headerlink" title="7、线程同步机制"></a>7、线程同步机制</h2><blockquote><p><strong>1.Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。</strong></p><p><strong>2.每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</strong></p><p><strong>3.关键字synchronized来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由一个线程访问。</strong></p><p><strong>4.同步的局限性：导致程序的执行效率要降低。</strong></p><p><strong>5.同步方法(非静态的)的锁可以是this，也可以是其他对象(要求是同一个对象)。</strong></p><p><strong>6.同步方法(静态的)的锁为当前类本身。</strong></p></blockquote><h3 id="①、synchronized关键字"><a href="#①、synchronized关键字" class="headerlink" title="①、synchronized关键字"></a>①、synchronized关键字</h3><ul><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> ()&#123;<br><span class="hljs-comment">//线程同步代码块</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：<code>synchronized()</code>括号中传的“数据”是非常关键，必须是多线程共享的数据，才能让多线程排队。</p></li><li><p>那么”( )”中写什么?</p><ul><li>那要看你想让哪些线程同步。<br>假设t1、t2、 t3、 t4、 t5，有5个线程，<br>你只希望t1、t2 、t3排队，t4 、t5不需要排队。<br>那么你―定要在( )中写一个t1、t2、t3共享的对象。而这个对象对于t4、t5来说不是共享的。</li></ul></li></ul><h3 id="②、synchronized三种常用的方式"><a href="#②、synchronized三种常用的方式" class="headerlink" title="②、synchronized三种常用的方式"></a>②、synchronized三种常用的方式</h3><ul><li><p><strong>第一种：同步代码块（灵活）</strong></p><ul><li><p><code>synchronized(this|object)</code> 表示进入同步代码块之前，要获得<strong>给定对象的锁</strong>。<code>synchronized(类.class)</code> 表示进入同步代码之前，要获得 <strong>当前 class 的锁</strong></p></li><li><p>默认锁对象：this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(线程共享对象)&#123;<br><span class="hljs-comment">//同步代码块;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>第二种：在实例方法上使用synchronized。</strong></p><ul><li><p>不管有多少个线程访问该方法，但同一时刻只能有一个线程来操作该方法。</p></li><li><p>表示共享对象一定是this<br>并且同步代码块是整个方法体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>第三种：在静态方法上使用synchronized。</strong></p><ul><li><p>给 Class 类上锁。</p></li><li><p>默认锁对象，Class对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>表示找类锁。<br>类锁永远只有1把。<br>就算创建了100个对象，那类锁也只有一把。</p></li><li><p>对象锁：1个对象1把锁，100个对象100把锁。<br>类锁：100个对象，也可能只是1把类锁。</p></li></ul></li></ul><hr><h2 id="8、死锁"><a href="#8、死锁" class="headerlink" title="8、死锁"></a>8、死锁</h2><blockquote><p><strong>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁,在编程是一定要避免死锁的发生.</strong></p></blockquote><ul><li><p>如下有一段死锁代码</p><ul><li><p>t1拿到了o1的锁，t2拿到了o2的锁，所以t1进不去o2，t2进不去o1，造成了死锁。</p></li><li><p>可以得出在开发中，synchronized最后不要嵌套使用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>        <span class="hljs-type">MyThread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread1</span>(o1, o2);<br>        <span class="hljs-type">MyThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>(o1, o2);<br><br>        t1.start();<br>        t2.start();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//线程一</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread1</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.o1 = o1;<br>        <span class="hljs-built_in">this</span>.o2 = o2;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">synchronized</span> (o1)&#123;<br>              <span class="hljs-keyword">try</span> &#123;<br>                  Thread.sleep(<span class="hljs-number">1000</span>);<br>              &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                  e.printStackTrace();<br>              &#125;<br>              <span class="hljs-keyword">synchronized</span> (o2) &#123;<br>                  System.out.println(<span class="hljs-string">&quot;t1成功&quot;</span>);<br>              &#125;<br>          &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//线程二</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread2</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.o1 = o1;<br>        <span class="hljs-built_in">this</span>.o2 = o2;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (o2)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o1) &#123;<br>                System.out.println(<span class="hljs-string">&quot;t2成功&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>聊一聊，我们以后开发中应该怎么解决线程安全问题？</p><ul><li>是一上来就选择线程同步吗？synchronized<ul><li>不是，synchronized会让程序的执行效率降低，用户体验不好。系统的用户吞吐量降低。用户体验差。在不得已的情况下再选择线程同步机制。</li></ul></li><li>第一种方案：<ul><li>尽量使用局部变量代替“实例变量和静态变量”。(局部变量在栈中)</li></ul></li><li>第二种方案：<ul><li>如果必须是实例变量，那么可以考虑创建多个对象，这样实例变量的内存就不共享了。（一个线程对应1个对象，100个线程对应100个对象，对象不共享，就没有数据安全问题了。）</li></ul></li><li>第三种方案：<ul><li>如果不能使用局部变量，对象也不能创建多个，这个时候就只能选择synchronized了。线程同步机制。</li></ul></li></ul></li></ul><hr><h2 id="9、守护线程"><a href="#9、守护线程" class="headerlink" title="9、守护线程"></a>9、守护线程</h2><p><strong>①、线程分为两种类型</strong></p><ul><li><p>用户线程：</p><ul><li><p>主线程：</p><ul><li>程序启动时，操作系统会创建一个进程，与此同时会立即运行一个线程, 该线程通常被称为主线程。主线程的作用主要有两个，一个产生其他子线程，另一 个最后执行各种关闭操作，例如文件的关闭。</li><li>由main方法生成的线程叫主线程，所以任意一个java程序都有至少—个线程。</li></ul></li><li><p>子线程：</p><ul><li>程序中创建的其它线程。</li></ul></li></ul></li><li><p>守护线程(后台线程)：</p><ul><li>守护线程:<ul><li>在后台为其它线程的线程,它独立于程序，不会因程序的终止而结束。当进程中只剩下守护线程时,进程直接退出。</li><li>其中具有代表性的就是：垃圾回收线程（守护线程）。</li><li>一般守护线程是一个死循环，所有的用户线程只要结束，守护线程自动结束。</li></ul></li></ul></li></ul><p><strong>②、守护线程用在什么地方呢？</strong></p><ul><li>每天00:00的时候系统数据自动备份。这个需要使用到定时器，并且我们可以将定时器设置为守护线程。一直在那里看着，没到00:00的时候就备份一次。所有的用户线程，如果结束了，守护线程自动退出，没有必要进行数据备份了。</li></ul><p><strong>③、守护线程示例</strong></p><ul><li>一般守护线程是一个死循环，所有的用户线程只要结束，守护线程自动结束。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">BakThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BakThread</span>();<br>        t.setName(<span class="hljs-string">&quot;备份数据的线程&quot;</span>);<br>        t.setDaemon(<span class="hljs-literal">true</span>);<span class="hljs-comment">//将t设置成守护线程</span><br>        t.start();<br><br>        <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BakThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>          System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + (++i));<br>          <span class="hljs-keyword">try</span> &#123;<br>              Thread.sleep(<span class="hljs-number">1000</span>);<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>       &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//当主线程循环结束后，守护线程自动结束</span><br></code></pre></td></tr></table></figure><hr><h2 id="10、定时器-Timer"><a href="#10、定时器-Timer" class="headerlink" title="10、定时器 Timer"></a>10、定时器 Timer</h2><p><strong>①、定时器的作用：</strong><br>                间隔特定的时间，执行特定的程序。</p><ul><li>每周要进行银行账户的总账操作。<br>每天要进行数据的备份操作。</li><li>在实际的开发中，每隔多久执行一段特定的程序，这种需求是很常见的，那么在java中其实可以采用多种方式实现：<ul><li>可以使用sleep方法，睡眠，设置睡眠时间，没到这个时间点醒来，执行任务。这种方式是最原始的定时器。（比较low）</li><li>在java的类库中已经写好了一个定时器：java.util.Timer，可以直接拿来用。<br>不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持定时任务的。</li><li>在实际的开发中，目前使用较多的是Spring框架中提供的SpringTask框架，<br>这个框架只要进行简单的配置，就可以完成定时器的任务。</li></ul></li></ul><p><strong>②、定时器的创建</strong></p><ul><li><code>schedule(TimerTask task, Date firstTime,  long period)</code><br>从指定 <em>的时间开始</em> ，固定延迟时间，对指定的任务执行重复的操作  。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">//创建定时器对象</span><br>       <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br> <br>       <span class="hljs-comment">//timer.schedule(定时任务，第一次执行时间，间隔多久执行一次);</span><br>       <br>       <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>       <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2022-8-16 21:02:20&quot;</span>);<br>    <br>       <span class="hljs-comment">//TimerTask()是抽象类，采取匿名内部类的形式</span><br>       timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>               <br>               System.out.println(<span class="hljs-string">&quot;你好&quot;</span>);<br>           &#125;<br>       &#125;, date, <span class="hljs-number">1000</span> * <span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="11、Object类中的wait和notify方法"><a href="#11、Object类中的wait和notify方法" class="headerlink" title="11、Object类中的wait和notify方法"></a>11、Object类中的wait和notify方法</h2><ul><li><p>wait和notify方法不是线程对象的方法，是java中任何一个java对象都有的方法，因为这两个方式是Object类中自带的。</p><ul><li>wait方法和notify方法不是通过线程对象调用，</li><li>不是这样的：<code>t.wait()</code>，也不是这样的：<code>t.notify()</code>.. 都不对。</li></ul></li><li><p><strong><code>wait()</code>方法</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">Object</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">o</span><span class="hljs-operator">.</span><span class="hljs-variable">wait</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><ul><li><strong>作用</strong>：让正在o对象上活动的线程进入等待状态，无期限等待，直到被唤醒为止。<br><code>o.wait();</code>方法的调用，会让“当前线程（正在o对象上活动的线程）”进入等待状态。</li></ul><p></p></li><li><p><strong><code>notify()</code>方法</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">Object</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">o</span><span class="hljs-operator">.</span><span class="hljs-variable">notify</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>作用：</strong>唤醒正在o对象上等待的线程。</p></li><li><p>还有一个<code>notifyAll()</code>方法：这个方法是唤醒 o 对象上处于等待的所有线程。</p></li></ul></li></ul><p></p><hr><h2 id="12、生产者和消费者模式"><a href="#12、生产者和消费者模式" class="headerlink" title="12、生产者和消费者模式"></a>12、生产者和消费者模式</h2><ul><li><p>在一个系统中，存在生产者和消费者两种角色，他们通过内存缓冲区(如下仓库)进行通信，生产者生产消费者需要的资料，消费者把资料做成产品。</p></li><li><p><strong>生产消费者模式如下图：</strong></p><hr><p><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/8.12.1.5akarheqqdo0.webp" alt="8"></p></li></ul><hr><ul><li><strong>模拟这样一个需求;</strong><br>仓库我们采用List集合。<br>     List集合中假设只能存储1个元素。1个元素就表示仓库满了。<br>     如果List集合中元素个数是0，就表示仓库空了。<br>     保证List集合中永远都是最多存储1个元素。<br>     必须做到这种效果：生产1个消费1个。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-comment">//创建一个仓库对象，共享的</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//生产者线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(list));<br>        <span class="hljs-comment">//消费者线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(list));<br><br>        t1.setName(<span class="hljs-string">&quot;生产者线程&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;消费者线程&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br><br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//生产者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(List list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//死循环，一直生产</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (list) &#123;   <span class="hljs-comment">//给仓库对list上锁</span><br>                <span class="hljs-keyword">if</span> (list.size() &gt; <span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//仓库有一个元素了</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//当前线程进入等待状态，并且释放list集合的锁</span><br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>                list.add(o);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+o);<br>                <span class="hljs-comment">//唤醒消费者消费</span><br>                list.notifyAll();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//消费者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(List list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (list) &#123;<br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">0</span>);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+ o);<br>                <span class="hljs-comment">//唤醒生产者生产</span><br>                list.notify();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="Ⅹ、IO流"><a href="#Ⅹ、IO流" class="headerlink" title="Ⅹ、IO流"></a>Ⅹ、IO流</h1><h2 id="1、IO流简述"><a href="#1、IO流简述" class="headerlink" title="1、IO流简述"></a>1、IO流简述</h2><ul><li>I   : Input—输入流</li><li>O : Output       —输出流</li><li>通过IO可以完成硬盘文件的读和写。</li><li>java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</li><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/9.2.1.74p5pjwvrjk0.webp" alt="9"></li></ul><h2 id="2、IO流的分类？"><a href="#2、IO流的分类？" class="headerlink" title="2、IO流的分类？"></a>2、IO流的分类？</h2><h3 id="①、抽象父类"><a href="#①、抽象父类" class="headerlink" title="①、抽象父类"></a>①、抽象父类</h3><ul><li><p><strong>按操作数据单位不同分为：字节流(8 bit)，字符流(按字符)。</strong></p><ul><li><p>有的流是按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。这种流是万能的，什么类型的文件都可以读取。包括：文本文件，图片，声音文件，视频文件等….</p><ul><li>假设文件file1.txt，采用字节流的话是这样读的：a中国bc张三fe<br> 第一次读：一个字节，正好读到’a’<br>                     第二次读：一个字节，正好读到’中’字符的一半。<br>                     第三次读：一个字节，正好读到’中’字符的另外一半。</li></ul></li><li><p>有的流是按照字符的方式读取数据的，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件，连word文件都无法读取。</p><ul><li>假设文件file1.txt，采用字符流的话是这样读的：a中国bc张三fe<br> 第一次读：’a’字符（’a’字符在windows系统中占用1个字节。）<br>                    第二次读：’中’字符（’中’字符在windows系统中占用2个字节。）</li></ul></li></ul></li><li><p><strong>按数据流的流向不同分为：输入流，输出流。</strong></p><ul><li>以内存作为参照物：<ul><li>往内存中去，叫做输入(Input)。或者叫做读(Read)。</li><li>从内存中出来，叫做输出(Output)。或者叫做写(Write)。</li></ul></li></ul></li><li><p><strong>按流的角色的不同分为：节点流，处理流&#x2F;包装流。</strong></p></li></ul><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><ul><li>Java的IO流共涉及40多个类，实际上非常规则，都是从如上4个抽象基类派生的。</li><li>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</li><li><strong>注意</strong>：在java中只要“类名”以Stream结尾的都是字节流。以“Reader&#x2F;Writer”结尾的都是字符流。</li></ul><hr><h3 id="②、子类流的分类："><a href="#②、子类流的分类：" class="headerlink" title="②、子类流的分类："></a>②、子类流的分类：</h3><blockquote><p><strong>java.io包下需要掌握的流有16个</strong></p></blockquote><ul><li><p>文件专属：</p><ul><li><table><thead><tr><th align="left">访问文件</th><th></th></tr></thead><tbody><tr><td align="left">FileInputStream</td><td>文件字节输入流</td></tr><tr><td align="left">FileOutputStream</td><td>文件字节输出流</td></tr><tr><td align="left">FileReader</td><td>文件字符输入流</td></tr><tr><td align="left">FileWriter</td><td>文件字符输出流</td></tr></tbody></table><hr></li></ul></li><li><p>转换流：（将字节流转换成字符流）</p><ul><li><table><thead><tr><th>转换流</th></tr></thead><tbody><tr><td>InputStreamReader</td></tr><tr><td>OutputStreamWriter</td></tr></tbody></table><hr></li></ul></li><li><p>缓冲流专属：</p><ul><li><table><thead><tr><th>缓冲流</th><th></th></tr></thead><tbody><tr><td>BufferedInputStream</td><td>缓冲字节输入流</td></tr><tr><td>BufferedOutputStream</td><td>缓冲字节输出流</td></tr><tr><td>BufferedReader</td><td>缓冲字符输入流</td></tr><tr><td>BufferedWriter</td><td>缓冲字符输出流</td></tr></tbody></table><hr></li></ul></li><li><p>数据流专属：</p><ul><li><table><thead><tr><th>特殊流</th><th></th></tr></thead><tbody><tr><td>DataInputStream</td><td>数据字节输入流</td></tr><tr><td>DataOutputStream</td><td>数据字节输出流</td></tr></tbody></table><hr></li></ul></li><li><p>标准输出流：</p><ul><li><table><thead><tr><th>打印流</th></tr></thead><tbody><tr><td>PrintWriter</td></tr><tr><td>PrintStream</td></tr></tbody></table><hr></li></ul></li><li><p>对象专属流：</p><ul><li><table><thead><tr><th>对象流</th><th></th></tr></thead><tbody><tr><td>ObjectInputStream</td><td>对象字节输入流</td></tr><tr><td>ObjectOutputStream</td><td>对象字节输出流</td></tr></tbody></table></li></ul></li></ul><hr><h2 id="3、流的关闭"><a href="#3、流的关闭" class="headerlink" title="3、流的关闭"></a>3、流的关闭</h2><p><strong>1、所有的流都实现了：<code>java.io.Closeable</code>接口，都是可关闭的，都有<code>close()</code>方法。</strong></p><ul><li>流毕竟是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，不然会耗费(占用)很多资源。养成好习惯，用完流一定要关闭。</li></ul><p><strong>2、所有的输出流都实现了：java.io.Flushable接口，都是可刷新的，都有<code>flush()</code>方法。</strong></p><ul><li>养成一个好习惯，输出流在最终输出之后，一定要记得<code>flush(</code>)刷新一下。这个刷新表示将通道&#x2F;管道当中剩余未输出的数据强行输出完（清空管道！）</li><li>刷新的作用就是清空管道。</li><li>注意：如果没有<code>flush()</code>可能会导致丢失数据。</li></ul><hr><h2 id="4、各种流的示例方法"><a href="#4、各种流的示例方法" class="headerlink" title="4、各种流的示例方法"></a>4、各种流的示例方法</h2><ul><li>注意：IDEA默认的当前路径：工程Project的根下</li></ul><h3 id="①、访问文件流"><a href="#①、访问文件流" class="headerlink" title="①、访问文件流"></a>①、访问文件流</h3><ul><li><p><strong>使用FileInputStream的方法</strong></p><ul><li><p><strong><code>int read()</code>  从该输入流读取一个字节的数据。</strong></p></li><li><p><strong><code>int read(byte[] b)</code>  从该输入流读取最多 <code>b.length</code>个字节的数据为字节数组。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">ublic <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建字节流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            stream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(json_ajax\\test.txt<span class="hljs-string">&quot;);</span><br><span class="hljs-string">                                         </span><br><span class="hljs-string"> //1、读取的的字节本身</span><br><span class="hljs-string">            //int readData = stream.read();</span><br><span class="hljs-string">            //System.out.println(readData);   //97</span><br><span class="hljs-string"></span><br><span class="hljs-string">            //2、循环读</span><br><span class="hljs-string">            /*while (true) &#123;</span><br><span class="hljs-string">                int data = stream.read();</span><br><span class="hljs-string">                if (data == -1)break;</span><br><span class="hljs-string">                System.out.println(data);</span><br><span class="hljs-string">            &#125;*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">            //3、循环读升级版,但是一次只能读一个字节</span><br><span class="hljs-string">            /*int readData = 0;</span><br><span class="hljs-string">            while((readData = stream.read()) != -1)&#123;</span><br><span class="hljs-string">                System.out.println(readData);</span><br><span class="hljs-string">            &#125;*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">            //4、循环读最终版，一次读取多个字节</span><br><span class="hljs-string">            byte[] bytes = new byte[4];</span><br><span class="hljs-string">            int len = 0;</span><br><span class="hljs-string">            //len = stream.read(bytes))，读多少，转多少</span><br><span class="hljs-string">            while ((len = stream.read(bytes)) != -1)&#123;</span><br><span class="hljs-string"> //String s = new String(byte数组, 起始下标, 长度);//将字节数组转换成字符串</span><br><span class="hljs-string">                System.out.println(new String(bytes, 0,len));</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">             </span><br><span class="hljs-string">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="hljs-string">            e.printStackTrace();</span><br><span class="hljs-string">        &#125; catch (IOException e) &#123;</span><br><span class="hljs-string">            e.printStackTrace();</span><br><span class="hljs-string">        &#125; finally &#123;</span><br><span class="hljs-string">            //关闭流的前提：流不是空，避免空指针异常</span><br><span class="hljs-string">            if (stream != null) &#123;</span><br><span class="hljs-string">                try &#123;</span><br><span class="hljs-string">                    stream.close();</span><br><span class="hljs-string">                &#125; catch (IOException e) &#123;</span><br><span class="hljs-string">                    e.printStackTrace();</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//所以最终掌握上面第四种read()方法</span><br> <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<span class="hljs-comment">//准备一个数组，</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录读取的长度</span><br>    <span class="hljs-keyword">while</span> ((len = stream.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>,len));<span class="hljs-comment">//转成字符串</span><br>     &#125;<br><br></code></pre></td></tr></table></figure><hr><ul><li><p><strong><code>int available()</code>  返回流中剩余的没有读到的字节数量。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">stream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;json_ajax\\test.txt&quot;</span>);<br><span class="hljs-comment">//1、读取的一字节本身</span><br><span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> stream.read();<br>System.out.println(<span class="hljs-string">&quot;剩余几个字节没读&quot;</span> + stream.available());  <br><span class="hljs-comment">//作用，可以一次性读完流中的内容，不需要循环了</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[stream.available()];<br><br>注意：不适合大文件，因为<span class="hljs-type">byte</span>数组不能太大<br></code></pre></td></tr></table></figure><hr></li><li><p><strong><code>skip(long n)</code>：跳过 几个字节的数据不读。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">stream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;json_ajax\\test.txt&quot;</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">skip</span> <span class="hljs-operator">=</span> stream.skip(<span class="hljs-number">3</span>);<br><br>比如文本中数据  abcdefg<br>跳过<span class="hljs-number">3</span>个则剩下   defg<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><p><strong>使用FileOutputStream的方法（从内存到硬盘）</strong></p><ul><li><p><strong><code>write(byte[] b)</code>  将 <code>b.length</code>个字节写入此输出流。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将写的数据存到硬盘指定位置，会清空原文件内容</span><br><span class="hljs-comment">//stream = new FileOutputStream(&quot;json_java\\test1.txt&quot;);</span><br><span class="hljs-comment">//以追加的方式，在文件末尾写入，不会清空原文件内容</span><br>stream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;json_java\\test1.txt&quot;</span>,<span class="hljs-literal">true</span>);<br> <br><span class="hljs-comment">//开始写</span><br><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>&#125;;<br>stream.write(bytes);<br><span class="hljs-comment">//写完刷新</span><br>stream.flush();<br></code></pre></td></tr></table></figure><hr></li></ul></li><li><p><strong>文件复制：使用<code>FileInputStream</code>和<code>FileOutputStream</code>完成</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建输入流对象</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//创建输出流对象</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;json_ajax\\test.txt&quot;</span>);<br>    fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;json_ajax\\outTest.txt&quot;</span>);<br><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//一次拷贝一字节</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//边读边写</span><br>    <span class="hljs-keyword">while</span> ((len = fis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>          fos.write(bytes, <span class="hljs-number">0</span>, len);<br>    &#125;<br>fos.flush();<br>&#125;<br></code></pre></td></tr></table></figure><hr></li><li><p><strong>使用<code>FileReader</code>文件字符输入流，读取文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;json_ajax\\test.txt&quot;</span>);<br>        <span class="hljs-type">char</span>[] c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">4</span>];<span class="hljs-comment">//一次读取4个字符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = fr.read(c)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(c,<span class="hljs-number">0</span>, len));<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用<code>FileWriter</code>文件字符输出流，写文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;json_ajax\\test.txt&quot;</span>);<br>        <span class="hljs-type">char</span>[] c = &#123;<span class="hljs-string">&#x27;我&#x27;</span>,<span class="hljs-string">&#x27;是&#x27;</span>,<span class="hljs-string">&#x27;天&#x27;</span>,<span class="hljs-string">&#x27;商&#x27;</span>,<span class="hljs-string">&#x27;人&#x27;</span>&#125;;<br>        fw.write(c);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用<code>FileReader</code>和<code>FileWriter</code>进行边读边写，只能是普通文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;json_ajax\\test.txt&quot;</span>);<br>        fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;json_ajax\\test1.txt&quot;</span>);<br>        <br>        <span class="hljs-type">char</span>[] c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = fr.read(c)) != -<span class="hljs-number">1</span>) &#123;<br>        fw.write(c, <span class="hljs-number">0</span>, len);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="②、缓冲流"><a href="#②、缓冲流" class="headerlink" title="②、缓冲流"></a>②、缓冲流</h3><blockquote><p><strong>使用该流不需要自定义char数组或者byte数组，自带缓冲。</strong></p><p><strong>当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做︰节点流。</strong></p><p><strong>外部负责包装的这个流，叫做:包装流，还有一个名字叫做∶处理流。</strong></p></blockquote><ul><li><p>其他类似</p></li><li><p><strong><code>BufferedReader </code>缓冲字符输入流</strong></p><ul><li><strong><code>String readLine()</code> 读一行文字。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做︰节点流。</span><br>     <span class="hljs-comment">//外部负责包装的这个流，叫做:包装流，还有一个名字叫做∶处理流。</span><br>     <span class="hljs-comment">//像当前这个程序来说，FileReader就是一个节点流。BufferedReader就是包装流/处理流。</span><br><br>     <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span>  <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;json_ajax/test.txt&quot;</span>));<br>     <br>     <span class="hljs-comment">//String readLine() 读一行文字。</span><br>     <span class="hljs-comment">//String s = reader.readLine();</span><br>     <span class="hljs-comment">//System.out.println(s);</span><br>            <br>     <span class="hljs-comment">//循环读</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">while</span> ((s = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>           System.out.println(s);<br>     &#125;<br><br> <span class="hljs-comment">//只需要关外层的流,里面的节点流自动关闭</span><br>     reader.close();<br>&#125;<br></code></pre></td></tr></table></figure><hr></li></ul><h3 id="③、转换流"><a href="#③、转换流" class="headerlink" title="③、转换流"></a>③、转换流</h3><blockquote><p><strong>将字节流转换成字符流</strong></p><p><strong>InputStreamReader</strong></p><p><strong>OutputStreamWriter</strong></p></blockquote><ul><li><p><code>InputStreamReader</code></p><ul><li><p>由于BufferedReader只接收字符流，所以需要使用转换流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//字节流</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;json_ajax/test.txt&quot;</span>);<br><br>    <span class="hljs-comment">//通过转换流（InputStreamReader --&gt; 将字节流转成字符流 ）</span><br>    <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(file);<br><br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">buff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> ((line = buff.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(line);<br>    &#125;<br><br><span class="hljs-comment">//只需要关外层的流,里面的节点流自动关闭</span><br>    buff.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>其他类似</p></li></ul><hr><h3 id="④、数据流"><a href="#④、数据流" class="headerlink" title="④、数据流"></a>④、数据流</h3><blockquote><p><strong>java.io . DataOutputStream :数据专属的流。</strong></p><p><strong>这个流可以将数据连同数据的类型一并写入文件。</strong></p><p><strong>注意:这个文件不是普通文本文档。(这个文件使用记事本打不开。)</strong></p></blockquote><ul><li><p>DataInputStream:数据字节输入流。</p></li><li><p>DataOutputStream写的文件，只能使用DataInputStream去读。并且读的时候你需要提前知道写入的顺序。读的顺序需要和写的顺序一致。才可以正常取出数据。</p></li><li><p>DataOutputStream 写数据，可以理解为加密后的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span>                                       <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;json_ajax\\text.txt&quot;</span>));<br>    <span class="hljs-comment">//写数据</span><br>    <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>  <span class="hljs-number">100</span>;<br>    <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">300</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br>    <span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0f</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-comment">//把数据以及数据的类型一并写入到文件中</span><br>    dos.writeByte(b);<br>    dos.writeShort(s);<br>    dos.writeInt(i);<br>    dos.writeLong(l);<br>    dos.writeFloat(f);<br>    dos.writeBoolean(sex);<br>    dos.writeChar(c);<br>    <span class="hljs-comment">//写完刷新和关闭</span><br>dos.flush();<br>    dos.close();<br>&#125;<br></code></pre></td></tr></table></figure><hr></li></ul><h3 id="⑤、输出流"><a href="#⑤、输出流" class="headerlink" title="⑤、输出流"></a>⑤、输出流</h3><blockquote><p><strong>java.io .PrintStream :标准的字节输出流。默认输出到控制台。</strong></p></blockquote><ul><li><p>标准输出流不需要手动<code>close()</code>关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> System.out;<br>out.println(<span class="hljs-string">&quot;张三&quot;</span>);<br>    out.println(<span class="hljs-string">&quot;李四&quot;</span>);  <br>    <br>    <span class="hljs-comment">//标准输出流不在指向控制台，指向log文件</span><br>    <span class="hljs-type">PrintStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;log&quot;</span>));<br>    <span class="hljs-comment">//修改输出方向。</span><br>    System.setOut(stream);<br>    <br>System.out.println(<span class="hljs-string">&quot;s&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="5、File类"><a href="#5、File类" class="headerlink" title="5、File类"></a>5、File类</h2><blockquote><p><strong>1、FiLe类和四大家族没有关系，所以FiLe类不能完成文件的读和写。</strong></p><p><strong>2、File对象代表什么?</strong><br>                    <strong>文件和目录路径名的抽象表示形式。</strong><br>                    <strong>C: \Drivers这是一个File对象</strong><br>                    <strong>C: \Drivers\Lan\ReaLtek\Readme .txt也是File对象</strong><br>                    <strong>一个FiLe对象有可能对应的是目录，也可能是文件。</strong><br>                    <strong>FiLe只是一个路径名的抽象表示形式。</strong></p><p><strong>3、需要掌握File类中常用的方法</strong></p></blockquote><ul><li><strong>方法有很多，下面列举一些</strong></li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-built_in">File</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;java-8\\test.txt&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>boolean exists()</code> ：测试此抽象路径名表示的文件或目录是否存在。 </p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-variable">f</span><span class="hljs-operator">.</span><span class="hljs-variable">exists</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">b</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span><span class="hljs-variable">true</span><br></code></pre></td></tr></table></figure></li><li><p><code>createNewFile()</code>：  当该名称的文件不存在时，创建一个新的空文件。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">f</span><span class="hljs-operator">.</span><span class="hljs-variable">createNewFile</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure></li><li><p><code>mkdir()</code>  ：以目录的形式新建。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">f</span><span class="hljs-operator">.</span><span class="hljs-variable">mkdir</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure></li><li><p><code>mkdirs()</code>  ：以多重目录的形式新建。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-built_in">File</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;D:/a/b/c/d&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">f</span><span class="hljs-operator">.</span><span class="hljs-variable">mkdirs</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure></li><li><p><code>lastModified()</code>：返回最后一次修改时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-variable">f</span><span class="hljs-operator">.</span><span class="hljs-variable">lastModified</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><span class="hljs-operator">//</span><span class="hljs-number">1970</span>年到现在的总毫秒数<br><span class="hljs-operator">//</span>转换成日期<br><span class="hljs-built_in">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-built_in">Date</span><span class="hljs-punctuation">(</span><span class="hljs-variable">l</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">SimpleDateFormat</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;yyyy-MM-dd  HH:mm:ss&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-built_in">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-variable">sdf</span><span class="hljs-operator">.</span><span class="hljs-variable">format</span><span class="hljs-punctuation">(</span><span class="hljs-variable">date</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">format</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-operator">//</span><span class="hljs-number">2022</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">13</span> <span class="hljs-number">21</span><span class="hljs-operator">:</span><span class="hljs-number">31</span><span class="hljs-operator">:</span><span class="hljs-number">19</span><br></code></pre></td></tr></table></figure></li><li><p><code>listFiles()</code>：获取当前目录下所有的子文件，显示绝对路径。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">File</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> <span class="hljs-variable">files</span> <span class="hljs-operator">=</span> <span class="hljs-variable">f</span><span class="hljs-operator">.</span><span class="hljs-variable">listFiles</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">:</span> <span class="hljs-variable">files</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">file</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>list()</code>：获取当前目录下所有的子文件，显示相对路径。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">String</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-variable">f</span><span class="hljs-operator">.</span><span class="hljs-variable">list</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">:</span> <span class="hljs-variable">list</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">s</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>getPath()</code>：返回路径。</p></li><li><p><code>getParent()</code> ：返回父路径。</p></li><li><p><code>isDirectory()</code>： 判断是否为目录。</p></li><li><p><code>isFile()</code>  ：判断是否为普通文件。</p></li></ul><hr><h2 id="6、序列化和反序列化"><a href="#6、序列化和反序列化" class="headerlink" title="6、序列化和反序列化"></a>6、序列化和反序列化</h2><ul><li><p>序列化：Serialize</p><ul><li>java对象存储到文件中。将java对象的状态保存下来的过程。</li></ul></li><li><p>反序列化：DeSerialize</p><ul><li>将硬盘上的数据重新恢复到内存当中，恢复成java对象。</li></ul></li><li><p>不需要某个属性参与序列化，可以在属性前添加<code>transient</code>关键字.</p></li><li><p>注意：参与序列化和反序列化的类型要实现Serializable接口。</p></li><li><p>注意:通过源代码发现，serializabLe接口只是一个标志接口∶<br><code>public interface Serializable &#123;&#125;</code>这个接口当中什么代码都没有。<br>那么它起到一个什么作用呢?</p><ul><li>起到标识的作用，标志的作用，java虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇。java虚拟机看到这个接口之后，会为该类自动生成—个序列化版本号。</li></ul></li><li><p>序列号版本号作用：</p><ul><li>java语言中是采用什么机制来区分类的?<ul><li>第一：首先通过类名进行比对，如果类名不一样，肯定不是同一个类。</li><li>第二：如果类名一样，再怎么进行类的区别？靠序列化版本号进行区分。<ul><li>小鹏编写了一个类: <code>com.bjpowernode.java.bean.student</code><br>胡浪编写了一个芙: <code>com.bjpowernode.java.bean.Student</code></li><li>不同的人编写了同一个类，但”这两个类确实不是同一个类”。这个时候序列化版本就起上作用了。</li><li>对于java虚拟机来说，java虚拟机是可以区分开这两个类的因为这两个类都实现了Serializable接口，部有默认的序列化版本号，他们的序列化版本号不一样。所以区分开了。</li></ul></li></ul></li><li>自动生成序列化版本号缺点：<ul><li>这种自动生成的序列化版本号缺点是：一旦代码确定之后，不能进行后续的修改，因为只要修改，必然会重新编译，此时会生成全新的序列化版本号，这个时候java虚拟机会认为这是—个全新的类。（这样就不好了!)</li></ul></li><li>最终结论:<ul><li>凡是一个类实现了Serializable接口，建议给该类提供一个固定不变的序列化版本号。这样,以后这个类即使代码修改了,但是版本号不变，java虚拟机会认定这是同一个类。</li></ul></li></ul></li><li><p><strong>序列化使用<code>ObjectOutputStream</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建java对象</span><br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-comment">//序列化</span><br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;person&quot;</span>));<br>    oos.writeObject(person);<br>    <br>    oos.flush();<br>    oos.close();<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>反序列化使用<code>ObjectInputStream</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;person&quot;</span>));<br>        <span class="hljs-comment">//开始反序列化</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-comment">//反序列化回来是一个Person对象，会调用它当中的toString方法</span><br>        System.out.println(o); <span class="hljs-comment">// Person&#123;id=1, name=&#x27;张三&#x27;&#125;</span><br>        ois.close();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>transient</code>关键字</strong></p><ul><li><p>不需要某个属性参与序列化，可以在属性前添加此关键字.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String name;<span class="hljs-comment">//不需要name属性参加序列化</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr></li></ul><h2 id="7、Properties"><a href="#7、Properties" class="headerlink" title="7、Properties"></a>7、Properties</h2><p><strong>Properties:是一个Map集合，key和value都是String类型。</strong></p><p>java规范中有要求：属性配置文件建议以<code>.properties</code>结尾，但这不是必需的。</p><p>这种以<code>.properties</code>结尾的文件在java中被称为：属性配置文件。</p><p>其中Properties是专门存放属性配置文件内容的一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;java-8\\test.txt&quot;</span>);<br><br>        <span class="hljs-comment">//新建一个Map集合</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>        <span class="hljs-comment">//将文件中的数据加载到Map集合中</span><br>        pro.load(fis);<br><br>        <span class="hljs-comment">//取值就和Map遍历一样,也可以通过key取value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(username);<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="ⅩⅠ、反射机制"><a href="#ⅩⅠ、反射机制" class="headerlink" title="ⅩⅠ、反射机制"></a>ⅩⅠ、反射机制</h1><h2 id="1、反射机制简述"><a href="#1、反射机制简述" class="headerlink" title="1、反射机制简述"></a>1、反射机制简述</h2><ul><li><p>什么是反射机制？反射机制有什么用？</p><ul><li>反射机制：可以操作字节码文件</li><li>作用：可以让程序更加灵活。</li></ul></li><li><p>反射机制有什么用？</p><ul><li>通过java语言中的反射机制可以操作字节码文件。<br>优点类似于黑客。（可以读和修改字节码文件）<br>通过反射机制可以操作代码片段。（class文件）</li></ul></li><li><p>反射机制的相关类在哪个包下？</p><ul><li><code>java.lang.reflect.*;</code></li></ul></li><li><p>反射机制相关的重要的类有哪些？</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">java</span><span class="hljs-operator">.</span><span class="hljs-variable">lang</span><span class="hljs-operator">.</span><span class="hljs-variable">Class</span>：代表整个字节码，代表一个类型，代表整个类。<br><br><span class="hljs-variable">java</span><span class="hljs-operator">.</span><span class="hljs-variable">lang</span><span class="hljs-operator">.</span><span class="hljs-variable">reflect</span><span class="hljs-operator">.</span><span class="hljs-built_in">Method</span>：代表字节码中的方法字节码。代表类中的方法。<br><br><span class="hljs-variable">java</span><span class="hljs-operator">.</span><span class="hljs-variable">lang</span><span class="hljs-operator">.</span><span class="hljs-variable">reflect</span><span class="hljs-operator">.</span><span class="hljs-variable">Constructor</span>：代表字节码中的构造方法字节码。代表类中的构造方法<br><br><span class="hljs-variable">java</span><span class="hljs-operator">.</span><span class="hljs-variable">lang</span><span class="hljs-operator">.</span><span class="hljs-variable">reflect</span><span class="hljs-operator">.</span><span class="hljs-variable">Field</span>：代表字节码中的属性字节码。代表类中的成员变量<span class="hljs-punctuation">(</span>静态变量<span class="hljs-operator">+</span>实例变量<span class="hljs-punctuation">)</span>。<br></code></pre></td></tr></table></figure></li></ul><h2 id="2、获取Class的方式"><a href="#2、获取Class的方式" class="headerlink" title="2、获取Class的方式"></a>2、获取Class的方式</h2><p>拿到字节码文件一共三种方式：<br>                    第一种： <code>class c =  Class.forName(&quot;完整类名带包名&quot;)</code><br>                    第二种： <code>class c =  对象.getClass()</code><br>                    第三种： <code>class c  = 任何类型.class;</code></p><p>以上三种都是指向同一个字节码文件</p><ul><li><p>第一种：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法。</p><ul><li><p>应用场景：多用于配置文件，读取类全路径，加载类。</p></li><li><p><code>Class.forName()</code></p><ul><li>1、静态方法</li><li>2、字符串需要的是一个完整类名</li><li>3、完整类名必须带有包名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-comment">//表名aClass代表了String这个类的字节码文件：String.class</span><br>      <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>第二种：若已知具体的类，通过类的class 获取，该方式最为安全可靠，程序性能最高。</p><ul><li><p>应用场景：多用于参数传递，比如通过反射得到对应构造器对象。</p></li><li><p><code>getClass()</code></p><ul><li>java种任何一个对象都有一个方法。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> s.getClass();   <span class="hljs-comment">//x代表String.class字节码文件，x代表String类型</span><br>    System.out.println( c1 == x); <span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>  如上对象一样的内存图如下：都指向方法区中的字节码文件。</p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/image/javaSE/9.2.1.5d8w49706qw0.webp" alt="9"></li></ul></li></ul><hr><ul><li><p>第三种：</p><ul><li><p>应用场景：通过创建好的对象，获取Class对象.</p></li><li><p><code>引用.class</code></p><ul><li>java任何一种类型，包括基本数据类型，都有<code>引用.class</code>属性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> String.class; <span class="hljs-comment">//s 代表String类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Date.class;   <span class="hljs-comment">//d 代表Date类型</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="3、通过反射实例化对象"><a href="#3、通过反射实例化对象" class="headerlink" title="3、通过反射实例化对象"></a>3、通过反射实例化对象</h2><ul><li><p>获取到CLass ，能干什么?</p><ul><li>通过cLass 的<code>newInstance( )</code>方法来实例化对象。</li><li>注意: <code>newInstance()</code>方法内部实际上调用了无参数构造方法，必须保证无参构造存在才可以。</li></ul></li><li><p><strong>newInstance( )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-comment">//通过反射，获取Class，通过Class实例化对象</span><br>      <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.atguigu.pojo.Person&quot;</span>);<br><br>      <span class="hljs-comment">//会调用Person类的无参构造方法，完成对象的创建。</span><br>      <span class="hljs-comment">//newInstance() 调用的是无参构造，必须保证无参构造是存在的。</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c.newInstance();<br><br>      System.out.println(o);  <span class="hljs-comment">//Person&#123;id=null, name=&#x27;null&#x27;&#125;</span><br><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>验证反射机制的灵活性</strong></p><ul><li><p>java代码写一遍，再不改变java源代码的基础之上，可以做到不同对象的实例化。非常之灵活。(符合OCP开闭原则∶对扩展开放，对修改关闭。)</p></li><li><p>&#96;&#96;&#96;properties<br>#在配置文件种配置如下<br>bao&#x3D;com.atguigu.pojo.Person</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>```java<br>  public static void main(String[] args) throws Exception &#123;<br>       //这种方式代码就写死了。只能创建一个user类型的对象<br>       //User user = new User( );<br>       //以下代码是灵活的，代码不需要改动，可以修改配置文件，配置文件修改之后，可以创建出不同的实例对象。<br>      <br>      <br>      <br>      //通过流读取配置文件<br>       FileInputStream fis = new <br>           FileInputStream(&quot;json_ajax/c.Properties&quot;);<br>       //创建属性类对象Map<br>       Properties pro = new Properties();<br>       //加载<br>       pro.load(fis);<br>       //通过key得到value<br>       String key = pro.getProperty(&quot;bao&quot;);<br>  <br>       //通过反射，获取Class，通过Class实例化对象<br>       Class c = Class.forName(key);<br>  <br>       //会调用Person类的无参构造方法，完成对象的创建。<br>       //newInstance() 调用的是无参构造，必须保证无参构造是存在的。<br>       Object o = c.newInstance();<br>       System.out.println(o); <br>  &#125; <br>  //无参调用了<br>  //Person&#123;id=null, name=&#x27;null&#x27;&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>而工作过程中，也都是使用高级框架，这些高级框架底层实现原理：都采用了反射机制。<br>学会了反射机制有利于理解刨析框架底层的源代码。</p></li><li><p>如果只希望静态代码块执行，其他一律不执行，可以使用<code>Class.forName()</code>方法，这个方法会导致类加载是时候，静态代码块执行。</p></li></ul><hr><h2 id="4、文件路径问题"><a href="#4、文件路径问题" class="headerlink" title="4、文件路径问题"></a>4、文件路径问题</h2><blockquote><p><strong>得到文件的绝对路径</strong></p></blockquote><p><strong>①、研究一下文件路径的问题。</strong><br>                怎么获取一个文件的绝对路径。以下讲解的这种方式是通用的。<br>                但前提是：文件需要在类路径下。才能用这种方式。</p><ul><li><p>接下来说一种比较通用的一种路径。即使代码换位置了，或者项目在其他系统上，这样编写仍然是可以读到配置信息</p></li><li><p>注意：使用以下通用方式的前提是：这个文件必须在类路径下。</p></li><li><p>什么是类路径下?</p><ul><li>在src下的都是类路径下。【记住它】</li></ul></li><li><p>src是类的根路径。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  解释:</span><br><span class="hljs-comment">  Thread.currentThread():获取当前线程对象</span><br><span class="hljs-comment">  getContextCLassLoader()：是线程对象的方法，可以获取到当前线程的类加载器对象。</span><br><span class="hljs-comment">  getResource()：这是类加载器对象的方法，当前线程的类加载器默认从类路径下加载资源。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//获取一个文件的绝对路径，并将其加载到Properties中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Thread.currentThread().<br> getContextClassLoader().getResource(<span class="hljs-string">&quot;c.Properties&quot;</span>).getPath();<br> <br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pro.load(fis);<br><br>上述代码可以改进成如下代码：直接以流的形式返回<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> Thread.currentThread().<br>                getContextClassLoader().getResourceAsStream(<span class="hljs-string">&quot;c.Properties&quot;</span>);<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pro.load(stream);<br></code></pre></td></tr></table></figure><hr><h2 id="5、资源绑定器"><a href="#5、资源绑定器" class="headerlink" title="5、资源绑定器"></a>5、资源绑定器</h2><blockquote><p> <strong>作用：绑定配置文件，便于读取其中的内容</strong></p><p> <strong>IO + Properties，快速绑定属性资源文件</strong></p></blockquote><ul><li><p><code>java.util</code>包下提供了一个资源绑定器，使于获取属性性配置文件中的内容。<br>使用以下这种方式的时候，属性配置文件 <code>xxx. . properties</code>必须放到类路径下。</p></li><li><p>资源绑定器，只能绑定<code>xxx . properties</code>文件。并且这个文件必须在类路径下。</p></li><li><p>文件扩展名也必须是<code>properties</code>，并且在写路径的时候，路径后面的扩展名不能写。</p><ul><li>&#96;&#96;&#96;properties<br>#c. properties文件内容如下：<br>bao&#x3D;com.atguigu.pojo.Person<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>```java<br>  //通过绑定c. properties，可以得到其中的内容<br>  ResourceBundle c = ResourceBundle.getBundle(&quot;c&quot;);<br>  String name = c.getString(&quot;bao&quot;);<br>  System.out.println(name);//com.atguigu.pojo.Person<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="6、反射属性Field"><a href="#6、反射属性Field" class="headerlink" title="6、反射属性Field"></a>6、反射属性Field</h2><p>1、Class类中的方法</p><ul><li><p>Person类中的属性如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> String sex;<br></code></pre></td></tr></table></figure><hr></li><li><p>首先通过反射得到该字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(path);<br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><p><code>getFields()</code>：获取所有Public修饰的属性，包含本类以及父类的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Field[] fields = aClass.getFields();<span class="hljs-comment">//fields长度为1</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> fields[<span class="hljs-number">0</span>].getName();<span class="hljs-comment">//name = sex</span><br></code></pre></td></tr></table></figure></li><li><p><code>getDeclaredFields()</code>：返回一个 <code>Field</code>对象的数组，包含（私有、共有、保护） 所有属性字段。<br><code>getDeclaredField()</code>：通过名称可以返回一个对象，指定Public修饰的属性字段。 </p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Field</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> <span class="hljs-variable">fields</span> <span class="hljs-operator">=</span> <span class="hljs-variable">aClass</span><span class="hljs-operator">.</span><span class="hljs-variable">getDeclaredFields</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br> <br><span class="hljs-variable">for</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">:</span> <span class="hljs-variable">fields</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">field</span><span class="hljs-operator">.</span><span class="hljs-variable">getName</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">//</span>结果如下：<br><span class="hljs-variable">id</span><br><span class="hljs-variable">name</span><br><span class="hljs-variable">sex</span><br></code></pre></td></tr></table></figure></li><li><p><code>getType()</code>：以class形式返回类型。<br><code>getTypeName()</code>：返回 类 或者 字段类型 完整名。<br><code>getSimpleName()</code>：返回 类 或者 字段类型 简单名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Field[] fields = aClass.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> field.getType();<br>        System.out.println(type.getTypeName());<span class="hljs-comment">//获取类型的完整名</span><br>        System.out.println(type.getSimpleName());<span class="hljs-comment">//获取类型的简单名</span><br>&#125;<br><span class="hljs-comment">//结果如下：类型完整名简单名</span><br>java.lang.IntegerInteger<br>java.lang.StringString<br>java.lang.StringString<br><br></code></pre></td></tr></table></figure></li><li><p><code>getModifiers()</code>返回此类或接口的Java语言修饰符。以整数数字代号代表不同修饰符。 </p><p>[说明：默认修饰符：0，public：1，private：2，protect：4，static：8，final：16]</p><p><code>Modifier.toString()</code>：返回指定修饰符代号中的访问修饰符标志的字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Field[] fields = aClass.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> field.getModifiers();<span class="hljs-comment">//得到修饰符数字代号</span><br>       <br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Modifier.toString(i);    <span class="hljs-comment">//将数字转成修饰符名称 </span><br>        System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="7、通过反射机制访问对象属性"><a href="#7、通过反射机制访问对象属性" class="headerlink" title="7、通过反射机制访问对象属性"></a>7、通过反射机制访问对象属性</h2><p>1、通过反射机制访问一个java对象的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Person类中的属性：</span><br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span>  String sex;<br></code></pre></td></tr></table></figure><ul><li><p>给属性赋值set</p></li><li><p>获取属性的值get</p></li><li><p><code>setAccessible(true)</code>，爆破(打破封装)，使其可以访问private属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.atguigu.pojo.Person&quot;</span>);<br><br>        <span class="hljs-comment">//person对象 类似new person = new Person();</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> aClass.newInstance();<br><br>        <span class="hljs-comment">//获取name属性(根据属性名称获取Field)</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <br>        <span class="hljs-comment">//爆破，使其可以操作private属性的值</span><br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>    <br>        <span class="hljs-comment">//给obj对象(Person对象)的name赋值，类似 person.name = &quot;张三&quot;;</span><br>        name.set(obj,<span class="hljs-string">&quot;张三&quot;</span>);<br><br>        <span class="hljs-comment">//获取name属性的值</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> name.get(obj);<br>        System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="8、反射Method"><a href="#8、反射Method" class="headerlink" title="8、反射Method"></a>8、反射Method</h2><p>通过反射获取类中的方法</p><ul><li><p><code>getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：返回一个方法对象，获取Public修饰的方法。 </p></li><li><p><code>getMethods()</code>：返回一个数组，获取所有Public修饰的方法，包含本类以及父类的。</p></li><li><p><code>getDeclaredMethods()</code>：返回一个方法对象的数组，包括（public，protected，default（package）访问和私有方法），但不包括继承方法。</p></li><li><p><code>getDeclaredMethod(String name,  Class&lt;?&gt;... parameterTypes)</code>：返回一个方法对象，表示类或接口的指定声明的方法 。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span>  &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>       <span class="hljs-keyword">return</span> x + y;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.atguigu.array.MyException&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>    <br>    <span class="hljs-comment">//1、调用MyException类中Dog方法</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> aClass.getDeclaredMethod(<span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>    dog.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//爆破，使之可以操作私有方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> dog.invoke(obj, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>    System.out.println(invoke);<span class="hljs-comment">// 7</span><br>    <br>    <span class="hljs-comment">//2、获取类中所有的方法，不包括继承的，</span><br>    Method[] methods = aClass.getDeclaredMethods();<br>    <span class="hljs-comment">//遍历方法</span><br>   <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>         Class[] types = method.getParameterTypes();<span class="hljs-comment">//得到方法的参数类型</span><br>         <span class="hljs-keyword">for</span> (Class type : types) &#123;<br>              System.out.println(type.getTypeName());<br>          &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="9、反射构造器"><a href="#9、反射构造器" class="headerlink" title="9、反射构造器"></a>9、反射构造器</h2><p>通过反射获取类中的构造器</p><ul><li><code>getConstructors()</code>：返回对象的数组， 返回指定参数类型访问权限是<code>public</code>的构造器</li><li><code>getConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回指定参数类型访问权限是<code>public</code>的构造器</li><li>上述只能操作公共的构造函数，下面可以操作类中所有的构造函数。</li><li><code>getDeclaredConstructors()</code>：返回对象的数组， 对象包含了类的所有构造函数。</li><li><code>getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回指定的构造函数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.atguigu.pojo.Person&quot;</span>);<br>        <span class="hljs-comment">//调用无参构造方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> aClass.newInstance();<br><br>        <span class="hljs-comment">//返回类中所有的构造方法</span><br>        Constructor[] constructors = aClass.getDeclaredConstructors();<br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor.getName());<br>        &#125;<br><br>        <span class="hljs-comment">//获取有参构造方法</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> aClass.getDeclaredConstructor(Integer.class,String.class);<br>        <span class="hljs-comment">//c.setAccessible(true);</span><br>        <span class="hljs-comment">//调用有参构造</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c.newInstance(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>        System.out.println(o);<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="10、获取父类和父接口"><a href="#10、获取父类和父接口" class="headerlink" title="10、获取父类和父接口"></a>10、获取父类和父接口</h2><p>给定一个类，怎么获取这个类的父类，和已经实现了哪些接口？</p><ul><li><p><code>getSuperclass()</code>：获取父类</p></li><li><p><code>getInterfaces()</code>：获取父接口，返回一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>      <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><br>      <span class="hljs-comment">//获取父类</span><br>      <span class="hljs-type">Class</span> <span class="hljs-variable">superclass</span> <span class="hljs-operator">=</span> aClass.getSuperclass();<br>      System.out.println(superclass.getSimpleName());   <span class="hljs-comment">//Object</span><br><br>      <span class="hljs-comment">//获取实现的接口</span><br>      Class[] interfaces = aClass.getInterfaces();<br>      <span class="hljs-keyword">for</span> (Class c : interfaces) &#123;<br>          System.out.println(c.getSimpleName());<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="11、可变长度参数"><a href="#11、可变长度参数" class="headerlink" title="11、可变长度参数"></a>11、可变长度参数</h2><p>语法：</p><ul><li><code>类型...</code></li><li>一定是三个点</li></ul><p>注意：</p><ul><li><p>可变长度参数要求的参数个数是：0~N个。</p></li><li><p>可变长度参数在参数列表中必须在最后一个位置上，而且可变长度参数只能有一个。</p></li><li><p>可变长度参数可以当作一个数组来看待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>m(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br>    <span class="hljs-comment">//也可以传数组</span><br>    String[] s = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;;<br>        m(<span class="hljs-number">2</span>,s);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(<span class="hljs-type">int</span> i , String... args)</span>&#123; <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; args.length; j++) &#123;<span class="hljs-comment">//可看待为数组，进行遍历</span><br>        System.out.println(args[j]);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="12、类加载器与双亲委派机制"><a href="#12、类加载器与双亲委派机制" class="headerlink" title="12、类加载器与双亲委派机制"></a>12、类加载器与双亲委派机制</h2><p><strong>1、什么是类加载器？</strong></p><ul><li>专门负责加载类的命令&#x2F;工具。</li><li>ClassLoader</li></ul><p><strong>2、JDK中自带了3个类加载器</strong></p><ul><li>启动类加载器:rt.jar</li><li>扩展类加载器:ext&#x2F;*.jar</li><li>应用类加载器:classpath</li></ul><p></p><p><strong>3、假设有这样一段代码：</strong><br>                                String s &#x3D; “abc”;</p><ul><li><p>代码在开始执行之前，会将所需要类全部加载到 JVM 当中。通过类加载器加载，看到以上代码类加载器会找String.class文件，找到就加载，那么是怎么进行加载的呢？</p></li><li><p>首先通过“启动类加载器”加载。rt.jar中都是JDK最核心的类库。<br>注意：启动类加载器专门加载：C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar</p></li><li><p>如果通过“启动类加载器”加载不到的时候，会通过”扩展类加载器”加载。<br>注意：扩展类加载器专门加载：C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext*.jar</p></li><li><p>如果“扩展类加载器”没有加载到，那么会通过“应用类加载器”加载。<br>注意：应用类加载器专门加载：classpath中的类。</p></li></ul><p>​<strong>4、双亲委派机制</strong></p><ul><li>java中为了保证类加载的安全，使用了双亲委派机制。</li><li>优先从启动类加载器中加载，这个称为“父”，“父”无法加载到，再从扩展类加载器中加载，这个称为“母”。双亲委派。如果都加载不到，才会考虑从应用类加载器中加载。直到加载到为止。</li></ul><hr><hr><h1 id="ⅩⅡ、注解"><a href="#ⅩⅡ、注解" class="headerlink" title="ⅩⅡ、注解"></a>ⅩⅡ、注解</h1><blockquote><p><strong>注解，或者叫做注释类型，英文单词是：Annotation。</strong></p><p><strong>注解Annotation是一种引用数据类型。编译之后也是生成xxx.class文件。</strong></p></blockquote><p><strong>1、怎么自定义注解呢？语法格式？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] <span class="hljs-meta">@interface</span> 注解类型名&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、注解怎么使用，用在什么地方？</strong></p><ul><li><p>第一：注解使用时的语法格式是：</p><ul><li>@注解类型名</li></ul></li><li><p>第二：注解可以出现在类上、属性上、方法上、变量上，接口上，枚举上，等….，注解还可以出现在注解类型上。</p></li><li><p>默认情况下，注解可以出现在任何位置。</p></li><li><p>&#96;&#96;&#96;java<br>  &#x2F;&#x2F;如下自定义注解<br>  public @interface MyAnnotation {<br>  }</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>+ ```java<br>    @MyAnnotation//出现在类上<br>    public class Thread01 &#123;<br>        @MyAnnotation//出现在属性上<br>        private int no;<br>        <br>        @MyAnnotation//出现在构造方法上<br>        public Thread01(int no) &#123;&#125;<br>        <br>        @MyAnnotation//出现在静态方法上<br>        public static void m()&#123;&#125;<br>        <br>        @MyAnnotation//出现在普通方法上<br>        public void run() &#123;&#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>3、JDK内置了注解</strong></p><ul><li><p>​java.lang包下的注释类型：</p><ul><li><p>掌握：</p><ul><li><p>用 <strong>@Deprecated</strong> 注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存 在更好的选择。</p></li><li><pre><code class="mathematica">@Deprecated1、表示此方法已废弃、暂时可用，但以后此类或方法都不会再更新、后期可能会删除，建议后来人不要调用此方法。2、此注解可用于类上、方法上、属性上。3、Java 9 中注解增加了两个新元素：since 和 forRemoval。    since: 指定已注解的API元素已被弃用的版本。    forRemoval: 表示在将来的既定版本中会被删除，应该迁移 API。如：    @Deprecated(since = &quot;1.2&quot;, forRemoval = true)</code></pre></li></ul></li><li><p>掌握：</p><ul><li><strong>@Override</strong> ：表示一个方法声明打算重写超类中的另一个方法声明。</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">@</span><span class="hljs-variable">Override</span>这个注解只能注解方法。<br><span class="hljs-operator">@</span><span class="hljs-variable">Override</span>这个注解是给编译器参考的，和运行阶段没有关系。<br>凡是<span class="hljs-variable">java</span>中的方法带有这个注解的，编译器都会进行编译检查，如果这个方法不是重写父类的方法，编译器报错。<br></code></pre></td></tr></table></figure></li><li><p>不用掌握：</p><ul><li><strong>@SuppressWarnings</strong> ：指示应该在注释元素（以及包含在该注释元素中的<br>所有程序元素）中取消显示指定的编译器警告。</li></ul></li></ul></li></ul><p><strong>4、元注解</strong></p><ul><li><p>什么是元注解？</p><ul><li>用来标注“注解类型”的“注解”，称为元注解。</li></ul></li><li><p>常见的元注解有哪些？</p><ul><li><p><code>@Target</code></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">关于<span class="hljs-variable">Target</span>注解：<br>这是一个元注解，用来标注“注解类型”的“注解”<br>这个<span class="hljs-variable">Target</span>注解用来标注“被标注的注解”可以出现在哪些位置上。<br><br><span class="hljs-operator">@</span><span class="hljs-variable">Target</span><span class="hljs-punctuation">(</span><span class="hljs-variable">ElementType</span><span class="hljs-operator">.</span><span class="hljs-variable">METHOD</span><span class="hljs-punctuation">)</span>：表示“被标注的注解”只能出现在方法上。<br><br><span class="hljs-operator">@</span><span class="hljs-variable">Target</span><span class="hljs-punctuation">(</span><span class="hljs-variable">value</span><span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-variable">CONSTRUCTOR</span><span class="hljs-operator">,</span> <span class="hljs-variable">FIELD</span><span class="hljs-operator">,</span> <span class="hljs-type">LOCAL_VARIABLE</span><span class="hljs-operator">,</span> <span class="hljs-variable">METHOD</span><span class="hljs-operator">,</span> <span class="hljs-variable">PACKAGE</span><span class="hljs-operator">,</span> <span class="hljs-variable">MODULE</span><span class="hljs-operator">,</span> <span class="hljs-variable">PARAMETER</span><span class="hljs-operator">,</span> <span class="hljs-variable">TYPE</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>表示该注解可以出现在：<br>构造方法上<br>字段上<br>局部变量上<br>方法上<br>类上<span class="hljs-operator">...</span><br><br></code></pre></td></tr></table></figure></li><li><p><code>@Retention</code></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">这是一个元注解，用来标注“注解类型”的“注解”<br>这个<span class="hljs-variable">Retention</span>注解用来标注“被标注的注解”最终保存在哪里。<br><br><span class="hljs-operator">@</span><span class="hljs-variable">Retention</span><span class="hljs-punctuation">(</span><span class="hljs-variable">RetentionPolicy</span><span class="hljs-operator">.</span><span class="hljs-variable">SOURCE</span><span class="hljs-punctuation">)</span>：表示该注解只被保留在<span class="hljs-variable">java</span>源文件中。<br><br><span class="hljs-operator">@</span><span class="hljs-variable">Retention</span><span class="hljs-punctuation">(</span><span class="hljs-variable">RetentionPolicy</span><span class="hljs-operator">.</span><span class="hljs-variable">CLASS</span><span class="hljs-punctuation">)</span>：表示该注解被保存在<span class="hljs-variable">class</span>文件中。<br><br><span class="hljs-operator">@</span><span class="hljs-variable">Retention</span><span class="hljs-punctuation">(</span><span class="hljs-variable">RetentionPolicy</span><span class="hljs-operator">.</span><span class="hljs-variable">RUNTIME</span><span class="hljs-punctuation">)</span>：表示该注解被保存在<span class="hljs-variable">class</span>文件中，并且可以被反射机制所读取。<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><p><strong>5、注解中自定义属性</strong></p><ul><li><p>如果一个注解中有属性，那么必须给属性赋值(除非该属性使用了默认值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、自定义注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br><span class="hljs-comment">//自定义属性</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">v</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span>  <span class="hljs-number">20</span>;<span class="hljs-comment">//可以指定默认值</span><br>    <br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//2、</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、</span><br><span class="hljs-meta">@MyAnnotation(name = &quot;Person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>&#125;<br><br><span class="hljs-comment">//2、</span><br><span class="hljs-meta">@MyAnnotation( &quot;value省略了&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo-github博客搭建</title>
      <link href="/2022/11/03/%E5%9F%BA%E4%BA%8Ehexo-github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/11/03/%E5%9F%BA%E4%BA%8Ehexo-github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo零基础搭建个人博客"><a href="#Hexo零基础搭建个人博客" class="headerlink" title="Hexo零基础搭建个人博客"></a>Hexo零基础搭建个人博客</h1><blockquote><p>Hexo是一个基于 node.js的快速生成静态博客的开源框架,支持 Markdown和大多数 Octopress 插件,一个命令即可部署到 Github页面、 Giteee、 Heroku等,强大的APl,可无限扩展,拥有数百个主题和插件。</p></blockquote><ul><li><p>简单来说就是一个不用你写代码，就能搭建一套属于你自己的个人博客网站 应用（零基础小白也会）。</p></li><li><p>你可以在上面编写文章，做笔记，写日记，码代码。（一个属于你的世界！一个可供别人访问的个人世界）</p></li><li><p>另外Hero还提供了大量主题模版供用户下载。你的博客网站将可以时不时的换一种主题风格，赏心悦目，简直完美！</p></li></ul><hr><hr><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h2><h2 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h2><p>直接到官网上下载安装即可<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>Node自带npm</li></ul><hr><h2 id="3、命令窗口"><a href="#3、命令窗口" class="headerlink" title="3、命令窗口"></a>3、命令窗口</h2><ul><li><strong>命令窗口检查安装是否成功</strong><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/1.1.6me506cbxeg0.webp" alt="1"></li></ul></li></ul><hr><h2 id="4、安装hexo"><a href="#4、安装hexo" class="headerlink" title="4、安装hexo"></a>4、安装hexo</h2><ul><li><p><strong>① 安装命令：在cmd的命令行窗口</strong></p><ul><li><pre><code>npm install -g hexo-cli<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>+ **② 安装完成可输入hexo -v查看版本**<br><br>  + ![1](https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/1.2.1.47e71zlu7he0.webp)<br><br>+ **③ 创建一个文件夹，位置自定义，然后在该文件夹中打开git，输入如下两条命令**<br><br>  + ```<br>    hexo init<br>    npm install<br></code></pre></td></tr></table></figure></code></pre></li><li><p><strong>成功后文件夹中会出现如下文件</strong></p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/1.4.1.39xl57hjf1o0.webp" alt="1"></li></ul></li><li><p><strong>文件夹信息如下</strong></p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/1.4.2.6hcyqz19xao0.webp" alt="1"></li></ul></li></ul></li><li><p><strong>④ 启动服务站点</strong></p><ul><li><p>git命令中输入如下命令</p></li><li><p>&#96;&#96;&#96;<br>hexo s 或者 hexo server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>  + 访问http://localhost:4000/ 至此hero就搭建好了。可以在本地访问了<br><br>    + ![1](https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/1.4.3.24qwzmgrtkn4.webp)<br><br>---<br><br>---<br><br># 二、Github上建站访问<br><br>&gt; 可在github或者gitee上建站，gitee国内访问快一些，两者的建站基本一样。<br><br>## 1、新建仓库<br><br>+ 格式必须是：用户名+.github.io 只有这样，将来要部署到Gite e page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册Github的用户名。<br>  + ![2](https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/2.1.1.6lskpq8c7ag0.webp)<br><br>---<br><br>## 2、安装hexo上传插件<br><br>+ **安装命令：目标文件夹下git面板中输入如下**<br><br>  + ```<br>    npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="3、修改hexo配置文件指定仓库路径"><a href="#3、修改hexo配置文件指定仓库路径" class="headerlink" title="3、修改hexo配置文件指定仓库路径"></a>3、修改hexo配置文件指定仓库路径</h2><ul><li>可在文件夹中直接打开_config.yml文件，也可通过vim直接编辑</li><li>找到Deploymentdeploy:  修改如下<ul><li>type: git  </li><li>repo: 你的github仓库路径 （仓库的ssh key）</li><li>branch: main<ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/2.3.72uzo2hnyj00.webp" alt="2"></li></ul></li></ul></li><li>&#x3D;&#x3D;注意：&#x3D;&#x3D;在github上创建仓库，默认是main分支</li></ul><hr><h2 id="4、推送站点到github"><a href="#4、推送站点到github" class="headerlink" title="4、推送站点到github"></a>4、推送站点到github</h2><ul><li><p>推送命令: 博客文件夹下git面板</p><ul><li><pre><code>hexo d</code></pre></li><li><p>推送过程中需要输入你的github用户名和密码。但是在2021年8月14日开始github官方就加强安全访问。不能通过原有账号密码git访问，密码需要用官方的token或者采用ssh公私钥访问。否则会出现下图：鉴权失败（用户名密码错误）</p></li><li><p>也就是说需要在本机创建一个公钥，然后在github上添加该ssh公钥</p></li></ul></li><li><p>完成后可以看到仓库多了文件夹</p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/2.4.3ky04g5p4j60.webp" alt="2"></li></ul></li><li><p>扩展：</p><ul><li>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。</li><li><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写</li><li><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</li></ul></li></ul><hr><h2 id="5、尝试访问"><a href="#5、尝试访问" class="headerlink" title="5、尝试访问"></a>5、尝试访问</h2><ul><li><p>输入你的仓库名称,即可访问成功。</p></li><li><p><a href="https://cywbreeze.github.io/">https://cywbreeze.github.io/</a></p><ul><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/2.5.6zsedv7dx0c.webp" alt="2"></li></ul></li></ul><hr><hr><h1 id="三、更换主题"><a href="#三、更换主题" class="headerlink" title="三、更换主题"></a>三、更换主题</h1><ul><li><p>博客样式太死板，想换成属于自己的风格，没问题我们可以更换博客的主题，来达到我们想要的风格。到GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p></li><li><p>找一个喜欢的。按照各自的主题文档上面一步步操作即可。</p></li><li><p><strong>一般步骤</strong>：</p><ul><li>1、下载解压，一般使用git clone 进行克隆拉取</li><li>2、放到主题包themes文件夹下面</li><li>3、在hero配置文件_config.yml中修改为喜欢主题的名字</li><li>4、根据主题的要求进行配置，在根据自己的需求进行增加功能。</li><li>5、hexo server启动即可访问</li></ul></li><li><img src="https://cdn.staticaly.com/gh/cywbreeze/imageBed@main/blog/3.1.ippgg416hn4.webp" alt="3" style="zoom:50%;" /></li></ul><hr><h1 id="四、写作"><a href="#四、写作" class="headerlink" title="四、写作"></a>四、写作</h1><ul><li><p>可以参考hexo文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></li><li><p>一般来说都是使用在根目录下打开git bash</p></li><li><p>然后使用<code>hexo new 文件名</code> ，就会在&#x2F;source&#x2F;_post下生成一个Markdown文件，然后就进行编辑即可。</p></li><li><p>里面的图片可以使用图床进行存储，市面上有很多图床，不过我推荐自己用github做图床，毕竟谁也不知道图床的那些公司会不会倒闭，不然图片就永久消失了。所以稳妥起见，自己搭建一个图床。</p></li><li><p><strong>生成图片链接流程</strong></p><ul><li>1、在github创建一个仓库.</li><li>2、使用PicGo或者PicX，输入仓库的token，进行连接。建议使用PicX，前者有很多毛病。</li><li>3、将图片拖入PicX,会生成一个连接，复制链接放到markdown相应位置即可。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql快速入门</title>
      <link href="/2022/11/03/MySql%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/03/MySql%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="初识数据库"><a href="#初识数据库" class="headerlink" title="初识数据库"></a>初识数据库</h1><ul><li><p>DB ：数据库：存储数据的仓库，在硬盘上以文件的方式存在</p></li><li><p>DBMS：数据库管理系统：管理数据库中的数据，常见的DBMS例如mysql，oracle，sqlserver…</p></li><li><p>SQL：结构化查询语言，一门适用于所有DBMS，对DB进行操作的标准规划语言</p><ul><li>以上三者直接的关系<ul><li>DBMS ——执行——&gt; SQL ——操作——&gt; DB</li></ul></li></ul><p> </p></li><li><p>SQL语句的分类</p><ul><li><p>DQL：数据库查询语言， (凡是带有Select关键字的)</p></li><li><p>DML：数据库操纵语言， (凡是对表中数据进行增删改查 insert delete update)</p></li><li><p>DDL：数据库定义语言，（凡是带有drop,create,alter），主要操作表中的结构而不是数据</p></li><li><p>TCL：事务控制语言 ，commit提交事务，rollback回滚事务</p></li><li><p>DCL：数据控制语言，grant授权，revoke撤销权限</p></li></ul></li><li><p>数据库中最基本的单元是表：table，其中行表示字段，列表示记录，每一个字段都有字段名、数据类型、约束等属性。</p></li><li><p><strong>注意</strong>：数据库中的有一条命名规范：所有的标识符都是全部小写，单词和单词之间使用下划线进行衔接。</p></li></ul><h1 id="一、DOS窗口命令"><a href="#一、DOS窗口命令" class="headerlink" title="一、DOS窗口命令"></a>一、DOS窗口命令</h1><ul><li>不见“；”不执行，“；”表示结束</li></ul><ol><li>DOS窗口进入数据库 mysql -uroot -p密码</li><li>查看数据库：show databases；</li><li>创建数据库：create database 数据库名字；</li><li>使用某个数据库：use 数据库名字；</li><li>查看使用数据库中的表：show tables；</li><li>数据库初始化执行sql文件：source +sql文件路径（直接拖就行）</li><li>删除数据库：drop database 数据库名字；</li><li>查看表结构：desc+表名；</li><li>查看表中数据：select * from 表名；（当在DOS界面中显示MYSQL数据库中的表的信息时，可能会出现中</li><li>乱码问题，出现是原因是因为DOS窗口默认字符集为GBK格式，如果当前MYSQL设置的默认编码格式非GB格式，则可能会出现乱码。<br>解决方法：在输出信息前，执行以下语句：set names gbk;）</li><li>查询当前使用的哪个数据库：select database（）；也可直接再use一下需要的数据库；</li><li>查询mysql的版本号：select version（）；</li><li>结束一条语句：\c 命令</li><li>退出mysql：exit 命令</li><li>查看创建表的时候使用的sql语句：show create table 表名；</li></ol><h1 id="二、DQL-数据查询语言"><a href="#二、DQL-数据查询语言" class="headerlink" title="二、DQL 数据查询语言"></a>二、DQL 数据查询语言</h1><blockquote><p>注：以下都是基于老杜的Mysql课程中的数据库表进行操作</p></blockquote><h2 id="单表简单查询"><a href="#单表简单查询" class="headerlink" title="单表简单查询"></a>单表简单查询</h2><h3 id="1-简单的查询语句（DQL）"><a href="#1-简单的查询语句（DQL）" class="headerlink" title="1. 简单的查询语句（DQL）"></a>1. 简单的查询语句（DQL）</h3><h4 id="1-1、查询一个字段："><a href="#1-1、查询一个字段：" class="headerlink" title="1.1、查询一个字段："></a>1.1、查询一个字段：</h4><ul><li><p>select  字段名  from  表名；</p></li><li><p>SQL语句不区分大小写&#x3D;</p></li><li><p>查询两个或者多个字段：用逗号隔开</p><ul><li><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,dename <span class="hljs-keyword">from</span> dept;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>语法格式：select 字段名1，字段名2&#x3D;&#x3D;*12&#x3D;&#x3D;，字段名3 as ’表名‘ ，… from 表名；</p></li><li><p><strong>字段 2 表示字段可以进行数学运算；</strong></p></li><li><p>字段三表示可以重新为该字段命名，字符串用单引号 （as可以省略，用空格替换！）；</p></li></ul><h4 id="1-2、查询所有字段"><a href="#1-2、查询所有字段" class="headerlink" title="1.2、查询所有字段"></a>1.2、查询所有字段</h4><ul><li>select * from 表名</li><li><strong>注意</strong>：实际开发中不建议*，因为效率较低，可读性差</li></ul><h4 id="1-3、给查询的字段起别名"><a href="#1-3、给查询的字段起别名" class="headerlink" title="1.3、给查询的字段起别名"></a>1.3、给查询的字段起别名</h4><ul><li><p><strong>as</strong></p><ul><li>语法格式：select   字段   as  别名  form  表名；</li></ul></li><li><p>使用as关键字起别名，字符串用单引号（as可以省略）；</p></li><li><p><strong>注意</strong>：只是将显示的查询结果显示列名显示为deptoname，原表还是叫dname</p></li><li><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>deptno ，dname <span class="hljs-keyword">as</span> deptoname <br><span class="hljs-keyword">from</span> <br>dept;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="2-条件查询格式"><a href="#2-条件查询格式" class="headerlink" title="2. 条件查询格式"></a>2. 条件查询格式</h3><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>查询符合条件的数据</p><p>语法格式：select字段1，字段2…from表名where条件；</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt; 或 !&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">between … and …</td><td align="center">两个值之间</td></tr><tr><td align="center">is null</td><td align="center">为null（is not null不为空）</td></tr><tr><td align="center">and</td><td align="center">并且</td></tr><tr><td align="center">or</td><td align="center">或者</td></tr><tr><td align="center">in</td><td align="center">包含，相当于多个or（not in 不在这个范围中）</td></tr><tr><td align="center">not</td><td align="center">not可以取非，主要用在is或in中</td></tr><tr><td align="center">like</td><td align="center">like称为模糊查询，支持%或_匹配</td></tr></tbody></table><h5 id="between…and…"><a href="#between…and…" class="headerlink" title="between…and…"></a>between…and…</h5><ul><li><p>必须遵循左小右大（且是闭区间，包括了两端的值）</p></li><li><p>例1：查询薪资在1000到2000之间的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>ename,sal <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">where</span> <br>sal <span class="hljs-keyword">between</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2000</span>;<br></code></pre></td></tr></table></figure></li></ul><h5 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h5><ul><li><p>在数据库中null不能使用”&#x3D;”进行衡量，需要使用is null，因为数据库中null代表什么也没有，它不是一个值。 </p></li><li><p>例2：查询哪些员工的津贴为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>ename,sal <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">where</span>  <br>comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> ;<br></code></pre></td></tr></table></figure></li></ul><h5 id="and"><a href="#and" class="headerlink" title="and"></a>and</h5><ul><li><p>例3：查询工作岗位是manager并且工资大于2500的员工信息；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">where</span> <br>job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;manager&#x27;</span> <span class="hljs-keyword">and</span> sal<span class="hljs-operator">&gt;</span><span class="hljs-number">2500</span>;<br></code></pre></td></tr></table></figure></li></ul><h5 id="or"><a href="#or" class="headerlink" title="or"></a>or</h5><ul><li><p>例4：查询工作岗位是 manager 和 salesman 的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>ename <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">where</span> <br>job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;manager&#x27;</span> <span class="hljs-keyword">or</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;salesman&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h5 id="in-（not-in）"><a href="#in-（not-in）" class="headerlink" title="in （not in）"></a>in （not in）</h5><ul><li><p>例5：查询工作岗位是manager和salesman的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> <br>emp<br><span class="hljs-keyword">where</span> <br>job <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;manager&#x27;</span>,<span class="hljs-string">&#x27;salesman&#x27;</span>)；<br></code></pre></td></tr></table></figure></li></ul><p>​<strong>注意</strong>：in后面不是区间而是具体的值in（800，1000）意思是要么800要么1000</p><p>​not:  例如 is null,is not null,in,not in</p><h5 id="like"><a href="#like" class="headerlink" title="like"></a>like</h5><ul><li><p>模糊查询，支持%或下划线”__“匹配</p><ul><li><p>%匹配任意个字符</p></li><li><p>下划线，一个下划线只匹配一个字符</p></li><li><p>如果 _ 或 % 需要转化为普通字符就在前面加‘ \ ’ 起到转义的作用。</p></li></ul></li><li><p>例6：查询员工姓名中带”o“字母的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span><br>emp <br><span class="hljs-keyword">where</span><br>ename <span class="hljs-keyword">like</span> &quot;%o%&quot;;<br></code></pre></td></tr></table></figure></li><li><p>例7：查询员工姓名中第二个字母带”o“字母的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span><br>emp <br><span class="hljs-keyword">where</span> <br>ename <span class="hljs-keyword">like</span> &quot;_o%&quot;;<br></code></pre></td></tr></table></figure></li><li><p>问题1：and 和 or 同时出现时，有优先级问题吗？</p><ul><li><p>例8：查询工资大于2500，并且部门编号为10或20部门的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span><br>emp <br><span class="hljs-keyword">where</span>  <br>sal<span class="hljs-operator">&gt;</span><span class="hljs-number">2500</span> <span class="hljs-keyword">and</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">or</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><ul><li><p>分析以上语句的问题：and 优先级比 or 高，以上语句会先执行 and 后执行 or </p></li><li><p>所以以上语句含义是找出工资大于2500并且部门编号为10的员工，或者20部门的所有员工找出来。</p></li><li><p>正确做法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span><br>emp <br><span class="hljs-keyword">where</span><br>sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">2500</span> <span class="hljs-keyword">and</span> (deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">or</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h3 id="3-排序-升序和降序"><a href="#3-排序-升序和降序" class="headerlink" title="3. 排序(升序和降序)"></a>3. 排序(升序和降序)</h3><h4 id="orderby"><a href="#orderby" class="headerlink" title="orderby"></a>orderby</h4><ul><li><p><strong>默认指的是升序</strong></p></li><li><p>格式：<code>select  字段1，字段2，from  表名 order by 字段名  asc（升序） ；</code></p></li></ul><p>​      <code>select 字段1，字段2，from  表名 order by 字段名   desc（降序） ；</code></p><ul><li><p>例1：查询所有员工薪资，进行降序排序？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>ename,sal <br><span class="hljs-keyword">from</span><br>emp <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br>sal <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><ul><li>如果按照某个字段排序，而该字段又相等，那么再在后面的字段加上，第二个字段名 asc&#x2F;desc；（order by后面的，越靠前的字段越能起主导作用）</li></ul></li><li><p>例2：查询员工名字和薪资，要求薪资升序排序，如果薪资一样的话，在按照名字升序排列 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>ename,sal<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br>sal <span class="hljs-keyword">asc</span>, ename <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li><li><p>例3：找出工资在1250到3000之间的员工信息，要求按照薪资降序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">where</span> <br>sal <span class="hljs-keyword">between</span> <span class="hljs-number">1250</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br>sal <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="4-数据处理函数"><a href="#4-数据处理函数" class="headerlink" title="4. 数据处理函数"></a>4. 数据处理函数</h3><ul><li><p>（又称单行处理函数）</p></li><li><p>单行处理函数的特点：一个输入对应一个输出。</p></li><li><p>和单行处理函数相对的是：多行处理函数。</p></li></ul><table><thead><tr><th align="center">符号</th><th>说明</th></tr></thead><tbody><tr><td align="center">lower</td><td>转换小写</td></tr><tr><td align="center">upper</td><td>转换大写</td></tr><tr><td align="center">substr</td><td>取子串(substr(被截取的字符串，起始下标，截取的长度))</td></tr><tr><td align="center">length</td><td>取长度</td></tr><tr><td align="center">round</td><td>四舍五入</td></tr><tr><td align="center">rand ( )</td><td>生成随机数</td></tr><tr><td align="center">Ifnull</td><td>可以将 null 转化为具体的值</td></tr><tr><td align="center">concat</td><td>字符串的拼接</td></tr><tr><td align="center">case..when..then..when..then..else..end</td><td>当某某什么时候怎么做，什么时候怎么做，否则怎么做</td></tr><tr><td align="center">trim</td><td>去空格（去除前后的空格）</td></tr><tr><td align="center">str_to_date</td><td>将字符转换为日期</td></tr><tr><td align="center">date_format</td><td>格式化日期</td></tr><tr><td align="center">format</td><td>设置千分位</td></tr></tbody></table><h5 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h5><ul><li><p>例1：将员工姓名转换成小写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br><span class="hljs-built_in">lower</span>(ename)<br><span class="hljs-keyword">from</span> <br>emp;<br></code></pre></td></tr></table></figure></li></ul><h5 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h5><ul><li><p>例2：将员工姓名转换成大写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br><span class="hljs-built_in">upper</span>(ename)<br><span class="hljs-keyword">from</span> <br>emp;<br></code></pre></td></tr></table></figure></li></ul><h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><ul><li><p>格式：substr(被截取的字符串，起始下标，截取的长度)</p></li><li><p>注意：起始下标从1开始</p></li><li><p>例3：找出员工名字第一个字母是A的员工信息</p><ul><li><p>第一种方式：模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span><br>emp <br><span class="hljs-keyword">where</span> <br>ename <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;A%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>第二种方式：单行处理函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span><br>emp <br><span class="hljs-keyword">where</span> <br>substr(ename,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="length"><a href="#length" class="headerlink" title="length"></a>length</h5><ul><li><p>例4：计算并显示员工姓名的长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>length(ename) <span class="hljs-keyword">as</span> ename <br><span class="hljs-keyword">from</span> <br>emp;<br></code></pre></td></tr></table></figure></li></ul><h5 id="round"><a href="#round" class="headerlink" title="round"></a>round</h5><ul><li><p>格式： selectround(字段名，保留几位小数)from表名；</p></li><li><p>注意：默认保留整数，如果是-1，则向上取整，以此类推</p></li><li><p>例5：显示员工薪资，保留整数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>round(sal,<span class="hljs-number">0</span>) <br><span class="hljs-keyword">from</span><br>emp ;<br></code></pre></td></tr></table></figure></li></ul><h5 id="rand"><a href="#rand" class="headerlink" title="rand"></a>rand</h5><ul><li><p>例6：生成100以内的随机数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>round(rand( )<span class="hljs-operator">*</span><span class="hljs-number">100</span>,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">from</span><br>emp;<br></code></pre></td></tr></table></figure></li></ul><h5 id="ifnull"><a href="#ifnull" class="headerlink" title="ifnull"></a>ifnull</h5><ul><li><p>ifnull是空处理函数。专门处理空的。</p></li><li><p>语法格式：</p><ul><li><p>ifnull(数据，被当做哪个值) </p></li><li><p><code>ifnull（sid，0）</code>；如果sid为null，那么将其当作0来处理；</p></li></ul></li><li><p>注意：在所有数据库当中，只要有null参与的数学运算，最终结果就是null.</p></li><li><p>例7：计算每个员工的年薪（年薪&#x3D;（月薪+月补助）*  12）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>(sal<span class="hljs-operator">+</span>ifnull(comm,<span class="hljs-number">0</span>))<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> salmouth <br><span class="hljs-keyword">from</span> <br>emp;<br></code></pre></td></tr></table></figure></li></ul><h5 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h5><ul><li><p>例8：将员工编号和员工姓名进行拼接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>concat(empno,ename) <br><span class="hljs-keyword">from</span> <br>emp;<br></code></pre></td></tr></table></figure></li></ul><h5 id="case-when-then-when-then-else-end"><a href="#case-when-then-when-then-else-end" class="headerlink" title="case..when..then..when..then..else..end"></a>case..when..then..when..then..else..end</h5><ul><li><p>例9：当员工的工作岗位是MANAGER的时候，工资上调10%，当工作岗位是SALESMAN的时候，工资上调50%,其它正常。</p></li><li><p>注意：不修改数据库，只是将查询结果显示为工资上调</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>ename,job,sal <span class="hljs-keyword">as</span> oldsal,<br>(<span class="hljs-keyword">case</span> job <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;manager&#x27;</span> <span class="hljs-keyword">then</span> sal<span class="hljs-operator">*</span><span class="hljs-number">1.1</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;salesman&#x27;</span> <br><span class="hljs-keyword">then</span> sal<span class="hljs-operator">*</span><span class="hljs-number">1.5</span> <span class="hljs-keyword">else</span> sal <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> newsal<br><span class="hljs-keyword">from</span> <br>emp;<br></code></pre></td></tr></table></figure><h5 id="format"><a href="#format" class="headerlink" title="format"></a>format</h5><ul><li><p>格式化数字：format(数字, ‘格式’)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,format(sal, <span class="hljs-string">&#x27;$999,999&#x27;</span>) <span class="hljs-keyword">as</span> sal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure></li></ul><h5 id="str-to-date"><a href="#str-to-date" class="headerlink" title="str_to_date"></a>str_to_date</h5><ul><li><p>将字符串varchar类型转换成date类型数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql的日期格式：<br><span class="hljs-operator">%</span>Y年<br><span class="hljs-operator">%</span>m  月<br><span class="hljs-operator">%</span>d  日<br><span class="hljs-operator">%</span>h时<br><span class="hljs-operator">%</span>i分<br><span class="hljs-operator">%</span>s秒<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_user <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,str_to_date(<span class="hljs-string">&#x27;1998-11-27&#x27;</span>,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p>通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，需要通过该函数将字符串转换成date。</p></li><li><p>好消息？</p><ul><li><p>如果你提供的日期字符串是这个格式，str_to_date函数就不需要了！！！</p><ul><li>%Y-%m-%d</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into t_user(id,name,birth) values(2, &#x27;lisi&#x27;, &#x27;1990-10-01&#x27;);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="date-format"><a href="#date-format" class="headerlink" title="date_format"></a>date_format</h5><ul><li><p>将date类型转换成具有一定格式的varchar字符串类型。</p></li><li><p>date_format函数怎么用？</p><ul><li><p>date_format(日期类型数据, ‘日期格式’)</p></li><li><p>这个函数通常使用在查询日期方面。设置展示的日期格式。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,name,date_format(birth,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">as</span> birth <span class="hljs-keyword">from</span> t_user<br></code></pre></td></tr></table></figure></li></ul><p>注意：SQL语句实际上是进行了默认的日期格式化，<br>        自动将数据库中的date类型转换成varchar类型。<br>        并且采用的格式是mysql默认的日期格式：’%Y-%m-%d’  。</p><ul><li><p>java中的日期格式？<br>yyyy-MM-dd HH-mm-ss SSS</p></li><li><p>date和datetime两个类型的区别？</p><ul><li>date是短日期：只包括年月日信息。</li><li>datetime是长日期：包括年月日时分秒信息。</li></ul></li><li><p>mysql短日期默认格式：%Y-%m-%d</p><p>mysql长日期默认格式：%Y-%m-%d   %h:%i:%s</p></li><li><p>在mysql当中怎么获取系统当前时间？</p><ul><li>now() 函数，并且获取的时间带有：时分秒信息！！！！是datetime类型的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into t_user(id,name,birth,create_time) values(2,&#x27;lisi&#x27;,&#x27;1991-10-01&#x27;,now());<br></code></pre></td></tr></table></figure><hr><h3 id="5-分组函数"><a href="#5-分组函数" class="headerlink" title="5. 分组函数"></a>5. 分组函数</h3><blockquote><p>(又称多行处理函数）</p></blockquote><blockquote><p>多行处理函数的特点：多个输入对应一个输出（输入多行，最终输出一行）。</p></blockquote><blockquote><p>所有的分组函数都是对某一组函数进行操作的 </p></blockquote><p>注意：</p><ol><li>分组函数使用的时候必须先分组，然后才能用。</li><li>如果没有对数据进行分组，整张表默认为一组。</li><li>分组函数自动忽略null，统计不上并且分组函数不能写在where语句后面，分组函数即使没有group by也自己成为一组，where的优先级高于group by，所以where不执行完，分组函数执行不了。</li></ol><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>count</td><td>取得记录数</td></tr><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>取平均</td></tr><tr><td>max</td><td>取最大的数</td></tr><tr><td>min</td><td>取最小的数</td></tr></tbody></table><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>​<code>select count(*) from 表名；</code> &#x2F;&#x2F;统计的是总行数（只有有一行数据则count++）。</p><p>​因为每一行记录不可能都为null，一行数据中有一列不为null，则这行数据就是有效的。</p><p>​<code>select count（字段名）from 表名；</code> &#x2F;&#x2F;统计的是当前字段不为null的数据条数。</p><h5 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h5><p>​<code>select sum（字段名） from 表名；</code></p><h5 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h5><p>​<code>select avg（字段名） from 表名；</code></p><h5 id="max"><a href="#max" class="headerlink" title="max"></a>max</h5><p>​<code>select max（字段名） from 表名；</code></p><h5 id="min"><a href="#min" class="headerlink" title="min"></a>min</h5><p>​<code>select min（字段名） from 表名；</code></p><hr><h3 id="6-分组查询（非常重要：五颗星-）"><a href="#6-分组查询（非常重要：五颗星-）" class="headerlink" title="6. 分组查询（非常重要：五颗星*****）"></a>6. 分组查询（非常重要：五颗星*****）</h3><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>1.什么是分组查询？<br>        在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组的数据进行操作。<br>        这个时候我们需要使用分组查询，怎么进行分组查询呢？<br>            select<br>                …<br>            from<br>                …<br>            group by<br>                …</p><p>​计算每个部门的工资和？<br>​计算每个工作岗位的平均薪资？<br>​找出每个工作岗位的最高薪资？<br>​….</p><ul><li><p>例1：找出每个工作岗位的工资和？</p><ul><li><p>实现思路：按照工作岗位分组，然后对工资求和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>job,<span class="hljs-built_in">sum</span>(sal) <br> <span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>job<br></code></pre></td></tr></table></figure><ul><li><p>以上这个语句的执行顺序？</p><ul><li>先从emp表中查询数据。</li><li>根据job字段进行分组。</li><li>然后对每一组的数据进行sum(sal)</li></ul></li></ul></li></ul></li><li><p>例2：找出每个部门的最高薪资？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>deptno,<span class="hljs-built_in">max</span>(sal) <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>deptno<br></code></pre></td></tr></table></figure></li><li><p>例3：找出每个部门不同岗位的最高薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>job,<span class="hljs-built_in">max</span>(sal),deptno <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>deptno,job<br></code></pre></td></tr></table></figure></li><li><p>注意：如果一个sql语句后面有group by则查询的字段字段只能有分组字段，和分组函数。</p></li><li><p>如果添加ename字段，在mysql中没意义，但在oracle中会报错</p></li></ul><h4 id="having"><a href="#having" class="headerlink" title="having"></a>having</h4><blockquote><p><strong>使用 having 可以对分完组之后的数据进一步的过滤</strong></p></blockquote><ul><li><p>注意：having不能单独使用，having不能代替where，having必须和group by联合使用。</p></li><li><p>例1：找出每个部门最高薪资，要求显示最高薪资大于3000的？</p><ul><li><p>第一步：找出每个部门最高薪资，按照部门编号分组，求每一组最大值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>deptno,<span class="hljs-built_in">max</span>(sal) <br><span class="hljs-keyword">from</span> <br>emp  <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>deptno <br><span class="hljs-keyword">having</span> <br><span class="hljs-built_in">max</span>(sal) <span class="hljs-operator">&gt;</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><ul><li><p>以上可以进行优化，可以先将大于3000的都找出来，然后进行分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>deptno,<span class="hljs-built_in">max</span>(sal) <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">where</span> <br>sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">3000</span> <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>deptno<br></code></pre></td></tr></table></figure></li></ul></li><li><p>优化策略：where 和 having 优先选择where，where完成不了的，在使用having。</p></li></ul></li><li><p>例2.找出每个部门的平均薪资，要求显示平均薪资高于2500的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>deptno,<span class="hljs-built_in">avg</span>(sal) <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>deptno <br><span class="hljs-keyword">having</span> <br><span class="hljs-built_in">avg</span>(sal) <span class="hljs-operator">&gt;</span> <span class="hljs-number">2500</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="7-distinct去重记录"><a href="#7-distinct去重记录" class="headerlink" title="7.distinct去重记录"></a>7.distinct去重记录</h3><blockquote><p><strong>把查询结果去除重复记录，只需要关键字distinct</strong></p></blockquote><ul><li><p>例1:去除工作岗位和部门中的重复记录(使得字段1和字段2联合起来去重。)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br><span class="hljs-keyword">distinct</span> job，deptno<br><span class="hljs-keyword">from</span><br>emp;<br></code></pre></td></tr></table></figure></li><li><p>注意：原表数据不会被修改，只是查询结果去重</p><ul><li><p>distinct必须出现在所有字段的最前面。</p><ul><li>不可以：<code>select 字段1，distinct 字段2 from 表名；</code></li></ul></li><li><p>count（diatinct 字段），先为字段去重，再统计数据条数</p></li></ul></li></ul><h3 id="8-总结以上DQL查询关键字的顺序"><a href="#8-总结以上DQL查询关键字的顺序" class="headerlink" title="8. 总结以上DQL查询关键字的顺序"></a>8. 总结以上DQL查询关键字的顺序</h3><ul><li><p>select…from…where… group by…having…order by …</p><p>注意：以上关键字顺序不能颠倒，需要记忆</p><ul><li><p>执行顺序——&gt;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span><span class="hljs-keyword">from</span><br>  <span class="hljs-number">2.</span><span class="hljs-keyword">where</span><br>  <span class="hljs-number">3.</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>  <span class="hljs-number">4.</span><span class="hljs-keyword">having</span><br>  <span class="hljs-number">5.</span><span class="hljs-keyword">select</span><br>  <span class="hljs-number">6.</span><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br></code></pre></td></tr></table></figure><p>  注意：order by 排序总是在最后执行</p></li><li><p>总结：从某张表中查询数据，<br>先经过where条件筛选出有价值的数据。<br>        对这些有价值的数据进行分组。<br>        分组之后可以使用having继续筛选。<br>        select查询出来。<br>        最后排序输出！</p></li></ul><p>综合例子：找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除MANAGER岗位之外，要求按照平均薪资降序排。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>job,<span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">where</span><br>job <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;manager&#x27;</span> <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>job <br><span class="hljs-keyword">having</span> <br><span class="hljs-built_in">avg</span>(sal) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1500</span> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br>avgsal <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h2><h3 id="1-什么是连接查询："><a href="#1-什么是连接查询：" class="headerlink" title="1. 什么是连接查询："></a>1. 什么是连接查询：</h3><p>从一张表中单独查询，称为单表查询。</p><p>emp表和dept表联合起来查询数据，从emp表中取员工名字，从dept表中取部门名字。</p><p>这种跨表查询，多张表联合起来查询数据，被称为连接查询。</p><h3 id="2-连接查询的分类"><a href="#2-连接查询的分类" class="headerlink" title="2. 连接查询的分类"></a>2. 连接查询的分类</h3><ul><li><h6 id="根据语法的年代分类："><a href="#根据语法的年代分类：" class="headerlink" title="根据语法的年代分类："></a>根据语法的年代分类：</h6><ul><li><p><strong>SQL92</strong>：1992年出现的语法（太古老，不用）</p></li><li><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select<br>...<br>from<br>a,b<br>where<br>a和b的连接条件,筛选条件<br></code></pre></td></tr></table></figure></li><li><p><strong>SQL99</strong>：1999年出现的语法</p><ul><li>inner内连接，outer外连接，可以省略，带着的话可读性好</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select<br>...<br>from<br>a<br>(inner)(outer)join<br>b<br>on<br>a和b的连接条件<br>where<br>筛选条件<br></code></pre></td></tr></table></figure><p>  <strong>我们在这里重点学习SQL99。</strong></p></li></ul></li><li><h6 id="根据表连接的方式分类"><a href="#根据表连接的方式分类" class="headerlink" title="根据表连接的方式分类"></a>根据表连接的方式分类</h6><p>​内连接：</p><p>​等值连接</p><p>​非等值连接</p><p>​自连接</p><p>​外连接：</p><p>​左外连接（左连接）</p><p>​右外连接（右连接）</p><p>​全连接（很少用，了解）</p></li></ul><hr><h3 id="3-笛卡尔积现象："><a href="#3-笛卡尔积现象：" class="headerlink" title="3. 笛卡尔积现象："></a>3. 笛卡尔积现象：</h3><p>3.1、在表的连接查询方面的一种现象：当两张表进行查询的的时候，没有任何条件限制，最终的查询结果条数是两张表的乘积。–&gt;这种现象被称为：笛卡尔积现象。（笛卡尔发现的，这是一个数学现象。）</p><p>3.2、怎么避免笛卡尔积现象？</p><p>​连接时加条件，满足这个条件的记录被筛选出来！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>ename,dname <br><span class="hljs-keyword">from</span> <br>emp, dept<br><span class="hljs-keyword">where</span><br>emp.deptno <span class="hljs-operator">=</span> dept.deptno;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>优化<br><span class="hljs-keyword">select</span> <br>emp.ename,dept.dname <br><span class="hljs-keyword">from</span> <br>emp, dept<br><span class="hljs-keyword">where</span><br>emp.deptno <span class="hljs-operator">=</span> dept.deptno;<br></code></pre></td></tr></table></figure><ul><li><p>注意:表起别名。很重要。效率问题，可读性好。</p></li><li><p>思考：最终查询的结果条数是14条，但是匹配的过程中，匹配的次数减少了吗？</p><ul><li>还是56次，只不过进行了四选一。次数没有减少。</li></ul></li><li><p>注意：通过笛卡尔积现象得出，表的连接次数越多效率越低，尽量避免表的连接次数。</p></li></ul><hr><h3 id="4-内连接"><a href="#4-内连接" class="headerlink" title="4. 内连接"></a>4. 内连接</h3><p>内连接的特点：完成能够匹配上这个条件的数据查询出来。</p><p>（A和B连接，AB两张表没有主次关系。平等的。）</p><h4 id="1-等值连接"><a href="#1-等值连接" class="headerlink" title="(1). 等值连接"></a>(1). 等值连接</h4><blockquote><p><strong>利⽤⼀张表中某列的值和另⼀张表中某列的值相等的关系,把俩张表连接起来,把多余的数据过滤掉</strong></p></blockquote><ul><li><p>例1：查询每个员工的部门名称，显示员工名和部门名</p><ul><li><p>SQL92语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>e.ename,d.dname <br><span class="hljs-keyword">from</span><br>emp e,dept d<br><span class="hljs-keyword">where</span><br>e.deptno <span class="hljs-operator">=</span> d.deptno<br></code></pre></td></tr></table></figure><ul><li>SQL92的缺点：结构不清晰，表的连接条件，和后期进一步筛选的条件，都放到where后面。</li></ul></li><li><p>SQL99语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>e.ename,d.dname <br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">join</span><br>dept d<br><span class="hljs-keyword">on</span><br>e.deptno <span class="hljs-operator">=</span> d.deptno<br></code></pre></td></tr></table></figure><ul><li>&#x3D;&#x3D;SQL99优点&#x3D;&#x3D;：表连接的条件是独立的，连接之后，如果还需要进一步筛选，再往后继续添加where。</li></ul></li></ul></li></ul><h4 id="2-非等值连接"><a href="#2-非等值连接" class="headerlink" title="(2). 非等值连接"></a>(2). 非等值连接</h4><blockquote><p><strong>条件不是一个等量关系，称为非等值连接。</strong></p></blockquote><blockquote><p><strong>连接两张表，但并非使用等号实现，也可以用非等号例如 &gt; &lt;&gt; 等连接起来</strong></p></blockquote><ul><li><p>例2：找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>e.ename,e.sal,s.grade<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>salgrade s<br><span class="hljs-keyword">on</span><br>e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span>  s.hisal<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-自连接"><a href="#3-自连接" class="headerlink" title="(3). 自连接"></a>(3). 自连接</h4><blockquote><p><strong>使用自连接可以将自身表的一个镜像当作另一个表来对待，从而能够得到一些特殊的数据。</strong></p></blockquote><blockquote><p><strong>技巧：一张表看成两张表。</strong></p></blockquote><ul><li><p>例3：查询员工的上级领导，要求显示员工名和对应的领导名？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename,m.ename<br><span class="hljs-keyword">from</span><br>empe<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>empm<br><span class="hljs-keyword">on</span><br>e.mgr <span class="hljs-operator">=</span> m.empno<span class="hljs-operator">/</span><span class="hljs-operator">/</span>员工的领导编号 <span class="hljs-operator">=</span> 领导的员工编号<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="5-外连接"><a href="#5-外连接" class="headerlink" title="5. 外连接"></a>5. 外连接</h3><blockquote><p>语法格式：left | right（outer）join … on …</p></blockquote><blockquote><p>outer可省略，带着只为可读性好一些。两张表外连接的意思</p></blockquote><ul><li><p>左外连接（左连接）：表示左边是主表。<br>右外连接（右连接）：表示右边是主表。</p></li><li><p>带有 right 的是右外连接，又叫做右连接。<br>带有 left   的是左外连接，又叫做左连接。</p></li><li><p>任何一个右连接都有左连接的写法。<br>任何一个左连接都有右连接的写法。</p></li><li><p>思考：外连接的查询结果条数一定是 &gt;&#x3D; 内连接的查询结果条数？</p><ul><li>正确。</li></ul></li></ul><h4 id="1-左外连接（左连接）"><a href="#1-左外连接（左连接）" class="headerlink" title="(1). 左外连接（左连接）"></a>(1). 左外连接（左连接）</h4><ul><li><p>举例：查询每个员工的上级领导，要求显示所有员工的名字和领导名？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>e.ename <span class="hljs-string">&#x27;员工名&#x27;</span>,m.ename <span class="hljs-string">&#x27;领导名&#x27;</span><br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">outer</span> 可以省略<br>emp m<br><span class="hljs-keyword">on</span><br>e.mgr<span class="hljs-operator">=</span>m.empno<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-右外连接（右连接）"><a href="#2-右外连接（右连接）" class="headerlink" title="(2). 右外连接（右连接）"></a>(2). 右外连接（右连接）</h4><ul><li><p>举例：查询员工所对应的部门名字，要求部门表的信息全显示出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>e.ename,d.dname<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span>   <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">outer</span>可以省略，显示是为了可读性更好<br>dept d<br><span class="hljs-keyword">on</span><br>e.deptno<span class="hljs-operator">=</span>d.deptno<br></code></pre></td></tr></table></figure></li><li><p>right代表什么：</p><ul><li>表示将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。在外连接当中，两张表连接，产生了主次关系。</li></ul></li></ul><hr><h3 id="6-内连接和外连接的区别"><a href="#6-内连接和外连接的区别" class="headerlink" title="6. 内连接和外连接的区别"></a>6. 内连接和外连接的区别</h3><ul><li>内连接：<ul><li>假设有AB两张表，使用内连接，凡是A表B表能够匹配上的记录查询出来，这就是内连接，AB两张表并没有主次之分，两张表是平等的。</li></ul></li><li>外连接：<ul><li>假设AB两张表，使用外连接，AB两张表中的一张是主表，一张是副表，主要查询主表中的数据，捎带查询副表，当副表中的数据并没和主表中的数据匹配上，副表自动模拟出NULL与之相匹配（主表数据无条件查询）</li></ul></li></ul><hr><h3 id="7-多表连接查询"><a href="#7-多表连接查询" class="headerlink" title="7.多表连接查询"></a>7.多表连接查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法：<br><span class="hljs-keyword">select</span><br>...<br><span class="hljs-keyword">from</span><br>a<br><span class="hljs-keyword">join</span><br>b<br><span class="hljs-keyword">on</span><br>a和b的连接条件<br><span class="hljs-keyword">join</span><br>c<br><span class="hljs-keyword">on</span><br>a和c的连接条件<br>jion<br>d<br><span class="hljs-keyword">on</span><br>a和d的连接条件<br></code></pre></td></tr></table></figure><ul><li><p>注意：一条SQL中内连接和外连接可以混合。都可以出现！</p></li><li><p>例1：找出每个员工的部门名称以及工资等级，要求显示员工名、部门名、薪资、薪资等级？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>e.ename <span class="hljs-string">&#x27;员工名&#x27;</span>,d.dname <span class="hljs-string">&#x27;部门名&#x27;</span>,e.sal <span class="hljs-string">&#x27;薪资&#x27;</span>, s.grade <span class="hljs-string">&#x27;薪资等级&#x27;</span><br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">join</span><br>dept d<br><span class="hljs-keyword">on</span><br>e.deptno <span class="hljs-operator">=</span> d.deptno<br><span class="hljs-keyword">join</span><br>salgrade s<br><span class="hljs-keyword">on</span><br>e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal<br></code></pre></td></tr></table></figure></li><li><p>例2：找出每个员工的部门名称以及工资等级，还有上级领导，要求显示员工名、领导名、部门名、薪资、薪资等级？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename <span class="hljs-string">&#x27;员工名&#x27;</span>,m.ename <span class="hljs-string">&#x27;领导名&#x27;</span>,d.dname <span class="hljs-string">&#x27;部门名&#x27;</span>,e.sal <span class="hljs-string">&#x27;薪资&#x27;</span>,s.grade <span class="hljs-string">&#x27;薪资等级&#x27;</span><br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>emp m<br><span class="hljs-keyword">on</span><br>e.mgr <span class="hljs-operator">=</span> m.empno<br><span class="hljs-keyword">join</span><br>dept d<br><span class="hljs-keyword">on</span><br>e.deptno <span class="hljs-operator">=</span> d.deptno<br><span class="hljs-keyword">join</span><br>salgrade s<br><span class="hljs-keyword">on</span><br>e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><blockquote><p><strong>定义：select语句中嵌套select语句，被嵌套的select语句称为子查询。</strong></p></blockquote><ul><li><p>子查询可以出现在:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>..(<span class="hljs-keyword">select</span>).<br><span class="hljs-keyword">from</span><br>..(<span class="hljs-keyword">select</span>).<br><span class="hljs-keyword">where</span><br>..(<span class="hljs-keyword">select</span>).<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-where后面嵌套子查询"><a href="#1-where后面嵌套子查询" class="headerlink" title="1.where后面嵌套子查询"></a>1.where后面嵌套子查询</h3><p>案例：找出比最低工资高的员工姓名和工资？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select<br>ename,sal<br>from <br>emp<br>where<br>sal &gt; <br>(select<br>min(sal)<br> from <br>emp);<br></code></pre></td></tr></table></figure><h3 id="2-from后面嵌套子查询"><a href="#2-from后面嵌套子查询" class="headerlink" title="2.from后面嵌套子查询*"></a>2.from后面嵌套子查询*</h3><blockquote><p>注意：from后面的子查询，可以将子查询的查询结果当做一张临时表。（技巧）</p></blockquote><ul><li><p>案例：找出每个岗位的平均工资的薪资等级。</p><ul><li><p>第一步：找出每个岗位的平均工资（按照岗位分组求平均值）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>job,round(<span class="hljs-built_in">avg</span>(sal),<span class="hljs-number">0</span>) avgsal <br><span class="hljs-keyword">from</span> <br>emp <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>job<br></code></pre></td></tr></table></figure></li><li><p>第二步：克服心理障碍，把以上的查询结果就当做一张真实存在的表 t 。然后将 t 表与 薪资表 s 连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>t.job,t.avgsal,s.grade<br><span class="hljs-keyword">from</span><br>(<span class="hljs-keyword">select</span> job,round(<span class="hljs-built_in">avg</span>(sal),<span class="hljs-number">0</span>) avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job) t<br><span class="hljs-keyword">join</span><br>salgrade s<br><span class="hljs-keyword">on</span><br>t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>t.avgsal <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-select-后面嵌套子查询"><a href="#3-select-后面嵌套子查询" class="headerlink" title="3. select 后面嵌套子查询"></a>3. select 后面嵌套子查询</h3><p>(不需要掌握，了解即可)</p><ul><li>案例：找出每个员工的部门名称，要求显示员工名，部门名？</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename,(<span class="hljs-keyword">select</span> d.dname <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">where</span> e.deptno <span class="hljs-operator">=</span> d.deptno) dname<br><span class="hljs-keyword">from</span><br>emp e<br></code></pre></td></tr></table></figure><hr><h2 id="union-合并查询结果集"><a href="#union-合并查询结果集" class="headerlink" title="union 合并查询结果集"></a>union 合并查询结果集</h2><blockquote><p><strong>可将查询结果集相加</strong></p></blockquote><ul><li><p>案例：查询工作岗位是MANAGER和SALESMAN的员工？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">写法一：<br><span class="hljs-keyword">select</span><br>ename,job<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">where</span><br>job <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;manager&#x27;</span>,<span class="hljs-string">&#x27;salesman&#x27;</span>)<br><br>写法二：<br><span class="hljs-keyword">select</span> ename,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span><span class="hljs-string">&#x27;manager&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> ename,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span><span class="hljs-string">&#x27;salesman&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>union的效率要高一些。对于表连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍翻。。。</p></li><li><p>但是union可以减少匹配的次数。在减少匹配次数的情况下，还可以完成两个结果集的拼接。</p></li></ul><p>​a 连接 b 连接 c<br>​a 10条记录<br>​b 10条记录<br>​c 10条记录<br>​匹配次数是：1000</p><p>​a 连接 b一个结果：10 * 10 –&gt; 100次<br>​a 连接 c一个结果：10 * 10 –&gt; 100次<br>​使用union的话是：100次 + 100次 &#x3D; 200次。（union把乘法变成了加法运算）</p><ul><li><p><strong>union在使用的时候有注意事项吗？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>错误的：<span class="hljs-keyword">union</span>在进行结果集合并的时候，要求两个结果集的列数相同。<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> MYSQL可以，oracle语法严格 ，不可以，报错。要求：结果集合并时列和列的数据类型也要一致。<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="limit-分页-非常重要"><a href="#limit-分页-非常重要" class="headerlink" title="limit 分页(非常重要)"></a>limit 分页(非常重要)</h2><ul><li><p><strong>5.1、limit作用：将查询结果集的一部分取出来。通常使用在分页查询当中。</strong></p><ul><li>百度默认：一页显示10条记录。<br>分页的作用是为了提高用户的体验，因为一次全部都查出来，用户体验差。<br>可以一页一页翻页看。</li></ul></li><li><p>5.2、limit怎么用呢？</p><ul><li>案例：按照薪资降序，取出排名在前5名的员工？</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">---&gt;完整用法：limit  startIndex, length;</span><br>startIndex是起始下标，length是长度。<br>起始下标从<span class="hljs-number">0</span>开始。<br><span class="hljs-keyword">select</span> <br>ename,sal<br><span class="hljs-keyword">from</span> <br>emp<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>sal <span class="hljs-keyword">desc</span><br>limit <span class="hljs-number">0</span>,<span class="hljs-number">5</span>；<br><br><span class="hljs-comment">---&gt;缺省用法：limit 5; 这是取前5.</span><br><span class="hljs-keyword">select</span> <br>ename,sal<br><span class="hljs-keyword">from</span> <br>emp<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>sal <span class="hljs-keyword">desc</span><br>limit <span class="hljs-number">5</span>；<br></code></pre></td></tr></table></figure><ul><li>注意：limit 是在order by 之后执行！！！！</li></ul></li><li><p>5.3、分页</p><ul><li><p><strong>记公式：</strong></p><ul><li><em><em>（当前页数-1）</em> 页的大小 &#x3D; 当前页起始下标</em>*</li><li>*<em>limit  (pageNo-1)<em>pageSize , pageSize</em></em></li></ul></li><li><p>每页显示3条记录<br>第1页：limit 0,3[0 1 2]<br>                    第2页：limit 3,3[3 4 5]<br>                    第3页：limit 6,3[6 7 8]<br>                    第4页：limit 9,3[9 10 11]</p></li><li><p>每页显示pageSize条记录</p></li><li><p>第pageNo页：limit (pageNo - 1) * pageSize , pageSize</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">public <span class="hljs-keyword">static</span> void main(String[] args)&#123;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 用户提交过来一个页码，以及每页显示的记录条数<br><span class="hljs-type">int</span> pageNo <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>第<span class="hljs-number">5</span>页<br><span class="hljs-type">int</span> pageSize <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>每页显示<span class="hljs-number">10</span>条<br><br><span class="hljs-type">int</span> startIndex <span class="hljs-operator">=</span> (pageNo <span class="hljs-operator">-</span> <span class="hljs-number">1</span>) <span class="hljs-operator">*</span> pageSize;<br>String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select ...limit &quot; <span class="hljs-operator">+</span> startIndex <span class="hljs-operator">+</span> &quot;, &quot; <span class="hljs-operator">+</span> pageSize;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="DQL语句大总结"><a href="#DQL语句大总结" class="headerlink" title="DQL语句大总结"></a>DQL语句大总结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>...<br><span class="hljs-keyword">from</span><br>...<br><span class="hljs-keyword">where</span><br>...<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>...<br><span class="hljs-keyword">having</span><br>...<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>...<br>limit<br>...<br></code></pre></td></tr></table></figure><ul><li><strong>执行顺序？</strong><br>1.from<br>            2.where<br>            3.group by<br>            4.having<br>            5.select<br>            6.order by<br>            7.limit..</li></ul><hr><h1 id="三、DDL-数据操作语言"><a href="#三、DDL-数据操作语言" class="headerlink" title="三、DDL 数据操作语言"></a>三、DDL 数据操作语言</h1><h2 id="表的的创建"><a href="#表的的创建" class="headerlink" title="表的的创建"></a>表的的创建</h2><ol><li><p>建表的语法格式：(建表属于DDL语句，DDL包括：create drop alter)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>    字段名<span class="hljs-number">1</span> 数据类型, <br>    字段名<span class="hljs-number">2</span> 数据类型, <br>    字段名<span class="hljs-number">3</span> 数据类型<br>);<br></code></pre></td></tr></table></figure></li></ol><p>​表名：建议以t_ 或者 tbl_开始，可读性强。见名知意。<br>​字段名：见名知意。<br>​表名和字段名都属于标识符。</p><ol start="2"><li><p>关于mysql中的数据类型？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs markdown">varchar(最长255)<br><span class="hljs-code">可变长度的字符串0</span><br><span class="hljs-code">比较智能，节省空间。</span><br><span class="hljs-code">会根据实际的数据长度动态分配空间。</span><br><span class="hljs-code">优点：节省空间</span><br><span class="hljs-code">缺点：需要动态分配空间，速度慢。</span><br><span class="hljs-code"></span><br><span class="hljs-code">char(最长255)</span><br><span class="hljs-code">定长字符串</span><br><span class="hljs-code">不管实际的数据长度是多少。</span><br><span class="hljs-code">分配固定长度的空间去存储数据。</span><br><span class="hljs-code">使用不恰当的时候，可能会导致空间的浪费。</span><br><span class="hljs-code"></span><br><span class="hljs-code">优点：不需要动态分配空间，速度快。</span><br><span class="hljs-code">缺点：使用不当可能会导致空间的浪费。</span><br><span class="hljs-code"></span><br>varchar和char我们应该怎么选择？<br><span class="hljs-code">性别字段你选什么？因为性别是固定长度的字符串，所以选择 char。</span><br><span class="hljs-code">姓名字段你选什么？每一个人的名字长度不同，所以选择 varchar。</span><br><span class="hljs-code"></span><br>int(最长11)<br><span class="hljs-code">数字中的整数型。等同于 java 的 int。</span><br><span class="hljs-code"></span><br>bigint<br><span class="hljs-code">数字中的长整型。等同于 java 中的 long。</span><br><span class="hljs-code"></span><br>float<br><span class="hljs-code">单精度浮点型数据</span><br><span class="hljs-code"></span><br>double<br><span class="hljs-code">双精度浮点型数据</span><br><span class="hljs-code"></span><br>date<br><span class="hljs-code">短日期类型</span><br><span class="hljs-code"></span><br>datetime<br><span class="hljs-code">长日期类型</span><br><span class="hljs-code"></span><br>clob<br><span class="hljs-code">字符大对象</span><br><span class="hljs-code">最多可以存储4G的字符串。</span><br><span class="hljs-code">比如：存储一篇文章，存储一个说明。</span><br><span class="hljs-code">超过255个字符的都要采用 CLOB 字符大对象来存储。</span><br><span class="hljs-code">Character Large OBject:CLOB</span><br><span class="hljs-code"></span><br><span class="hljs-code">blob</span><br><span class="hljs-code">二进制大对象</span><br><span class="hljs-code">Binary Large OBject</span><br><span class="hljs-code">专门用来存储图片、声音、视频等流媒体数据。</span><br><span class="hljs-code">往 BLOB 类型的字段上插入数据的时候，例如插入一个图片、视频等，</span><br><span class="hljs-code">你需要使用IO流才行。</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><p>char 和 varchar 如何选择？</p><ul><li><p>char 适用于数长度不会发生改变的时候，是定长的，例如：性别，生日</p></li><li><p>varchar 当一个字段数据长度不确定，例如：简介、姓名、等都是采用varchar</p></li><li><p>char是直接开辟一定长度的空间，varchar是根据存储数据的长度动态的开辟空间！</p></li></ul></li></ul><p>3.创建一个学生表？</p><p>​学号、姓名、年龄、性别、邮箱地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br><span class="hljs-keyword">no</span>  <span class="hljs-type">int</span>,<br>    name  <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>),<br>    sex   <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    age  <span class="hljs-type">int</span>(<span class="hljs-number">3</span>) ,<br>    email <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>)<br></code></pre></td></tr></table></figure><h2 id="复制表："><a href="#复制表：" class="headerlink" title="复制表："></a>复制表：</h2><p><strong>快速创建表？【了解内容】</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp2 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">as</span> 可以省略<br>原理：<br>将一个查询结果当做一张表新建！！！！！<br>这个可以完成表的快速复制！！！！<br>表创建出来，同时表中的数据也存在了！！！<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> mytable <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> empno,ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="删除表："><a href="#删除表：" class="headerlink" title="删除表："></a>删除表：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名；（通用）<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名 if <span class="hljs-keyword">exists</span> 表名；<span class="hljs-operator">/</span><span class="hljs-operator">/</span>Oracle不支持这种写法。<br></code></pre></td></tr></table></figure><p>使用delete删除表，就像是我们把表中的数据擦干净，但是表的结构还在，可以通过rollback回滚过来数据！</p><p>我们如果需要删除大表的话，就需要truncate 来删除，会清空所有数据(保留表的数据结构)，且执行速度很快，并且永久删除，数据不可恢复！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">truncate table name <br></code></pre></td></tr></table></figure><p>删除表常用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table if exist 表名 //（如果存在某个表删除该表）<br></code></pre></td></tr></table></figure><hr><h1 id="四、DML-数据库定义语言"><a href="#四、DML-数据库定义语言" class="headerlink" title="四、DML 数据库定义语言"></a>四、DML 数据库定义语言</h1><ul><li><p><strong>增删改查有一个术语：CRUD操作</strong></p><ul><li><p>Create(增加)</p></li><li><p>Retrieve(查询)</p></li><li><p>Update(修改)</p></li><li><p>Delete(删除)</p></li></ul></li></ul><h2 id="insert：在表中插入数据"><a href="#insert：在表中插入数据" class="headerlink" title="insert：在表中插入数据"></a>insert：在表中插入数据</h2><blockquote><p><strong>语法格式：insert into 表名(字段名1,字段名2,字段名3…)   values(值1,值2,值3)；</strong></p></blockquote><p>注意：字段名和值要一一对应。什么是一一对应？<br>                    数量要对应。数据类型要对应。</p><p>注意：insert语句但凡是执行成功了，那么必然会多一条记录。<br>                    没有给其它字段指定值的话，默认值是NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span>语句中的“字段名”可以省略吗？可以<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_student <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>); <span class="hljs-operator">/</span><span class="hljs-operator">/</span>错误的<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 注意：前面的字段名省略的话，等于都写上了！所以值也要都写上！<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_student <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;lisi@123.com&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="update：修改表中数据"><a href="#update：修改表中数据" class="headerlink" title="update：修改表中数据"></a>update：修改表中数据</h2><blockquote><p><strong>语法格式：update 表名 set 字段名1 &#x3D; 值1 ，字段名2 &#x3D; 值2 …where 条件 ；</strong></p></blockquote><ul><li><p>注意：没有条件限制整张表的数据会全部更新 ；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_user <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>  #就<span class="hljs-number">1</span>个<span class="hljs-keyword">set</span>！<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="delete-删除表中数据"><a href="#delete-删除表中数据" class="headerlink" title="delete:删除表中数据"></a>delete:删除表中数据</h2><blockquote><p><strong>语法格式：delete from 表名 where 条件 ；</strong></p></blockquote><ul><li><p>注意：没有条件表中数据全部清空！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">70</span>   #删除部门号为<span class="hljs-number">70</span>的数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> dept  #清空表中数据<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="快速删除表中的数据？truncate"><a href="#快速删除表中的数据？truncate" class="headerlink" title="快速删除表中的数据？truncate"></a>快速删除表中的数据？truncate</h2><p><strong>【truncate比较重要，必须掌握】</strong></p><ul><li><p>删除dept_bak表中的数据</p><ul><li>delete from dept_bak;  &#x2F;&#x2F;这种删除数据的方式比较慢。</li></ul></li><li><p>delete语句删除数据的原理？（delete属于DML语句！！！）<br>表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放！！！<br>                这种删除缺点是：删除效率比较低。<br>                这种删除优点是：支持回滚，后悔了可以再恢复数据！！！</p></li><li><p>truncate语句删除数据的原理？<br>这种删除效率比较高，表被一次截断，物理删除。<br>                这种删除缺点：不支持回滚。<br>                这种删除优点：快速。</p></li></ul><p><strong>用法：truncate table dept_bak; （这种操作属于DDL操作。）</strong></p><p>大表非常大，上亿条记录？？？？<br>                删除的时候，使用delete，也许需要执行1个小时才能删除完！效率较低。<br>                可以选择使用truncate删除表中的数据。只需要不到1秒钟的时间就删除结束。效率较高。<br>                但是使用truncate之前，必须仔细询问客户是否真的要删除，并警告删除之后不可恢复！</p><p>truncate是删除表中的数据，表还在！</p><p>删除表操作？<br>                drop table 表名; &#x2F;&#x2F; 这不是删除表中的数据，这是把表删除。</p><hr><h1 id="五、约束"><a href="#五、约束" class="headerlink" title="五、约束"></a>五、约束</h1><ul><li><p>什么是约束？</p><ul><li><p>约束对应的英语单词：constraint<br>在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中数据的<br> 完整性、有效性！！！</p></li><li><p>约束的作用就是为了保证：表中的数据有效！！</p></li></ul></li><li><p>约束包括哪些？</p><pre><code>+ 非空约束：  not null+ 唯一性约束: unique+ 主键约束:   primary key （简称PK）+ 外键约束：foreign key（简称FK）+ 检查约束：check（mysql不支持，oracle支持）</code></pre></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">我们这里重点学习四个约束：<br><span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">unique</span><br><span class="hljs-keyword">primary</span> key<br><span class="hljs-keyword">foreign</span> key<br></code></pre></td></tr></table></figure><h2 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束: not null"></a>非空约束: not null</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable(<br>   id  <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>),<br>   username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    #添加非空约束<br>   PASSWORD <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)<br>);<br></code></pre></td></tr></table></figure><ul><li>非空约束not null约束的字段不能为NULL。</li></ul><h2 id="唯一性约束-unique"><a href="#唯一性约束-unique" class="headerlink" title="唯一性约束: unique"></a>唯一性约束: unique</h2><blockquote><p><strong>唯一性约束unique约束的字段不能重复，但是可以为NULL。</strong></p></blockquote><ul><li><p>列级约束：name具有唯一性，email具有唯一性。各自唯一。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> t_vip;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_vip(<br>id <span class="hljs-type">int</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">unique</span>,   <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 约束直接添加到列后面的，叫做列级约束。<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br></code></pre></td></tr></table></figure></li><li><p>表级约束:name和email两个字段联合起来唯一！！！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_vip(<br>id <span class="hljs-type">int</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br><span class="hljs-keyword">unique</span>(name,email)  <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 约束没有添加在列的后面，这种约束被称为表级约束。<br>);<br></code></pre></td></tr></table></figure></li><li><p>在mysql当中，如果一个字段同时被not null和unique约束的话，<br>该字段自动变成&#x3D;&#x3D;主键&#x3D;&#x3D;字段。（注意：oracle中不一样！）</p></li></ul><hr><h2 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束: primary key ***"></a>主键约束: primary key ***</h2><blockquote><p><strong>简称 PK</strong></p></blockquote><blockquote><p><strong>必须记住：一张表的主键约束只有一个 ；最好与别的字段不相关，仅仅代表唯一标识 ！</strong></p></blockquote><ul><li><p>主键约束的相关术语？</p><ul><li><p>主键约束：就是一种约束。</p><pre><code>+ 主键字段：该字段上添加了主键约束，这样的字段叫做：主键字段        +  主键值：主键字段中的每一个值都叫做：主键值。</code></pre></li></ul></li><li><p>什么是主键？有啥用？</p><ul><li><p>主键值是每一行记录的唯一标识。</p></li><li><p>主键值是每一行记录的身份证号！！！</p></li></ul></li><li><p>主键的特征：<br>not null + unique（主键值不能是NULL，同时也不能重复！）<br>primary key 具有表级约束以及列级约束</p></li><li><p>表级约束主要是给多个字段联合起来添加约束？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> t_vip;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_vip(<br>id <span class="hljs-type">int</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br><span class="hljs-keyword">primary</span> key(id,name)<span class="hljs-operator">/</span><span class="hljs-operator">/</span> id和name联合起来做主键：复合主键！！！！<br>);<br></code></pre></td></tr></table></figure><ul><li><p>在实际开发中不建议使用：复合主键。建议使用单一主键！</p></li><li><p>因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到。</p></li><li><p>复合主键比较复杂，不建议使用！！！</p></li></ul></li><li><p>主键值建议使用：</p><ul><li>int、bigint、char等类型</li><li>不建议使用：varchar来做主键。主键值一般都是数字，一般都是定长的！</li></ul></li><li><p>主键除了：单一主键和复合主键之外，还可以这样进行分类？</p><ul><li>自然主键：主键值是一个自然数，和业务没关系。</li><li>业务主键：主键值和业务紧密关联，例如拿银行卡账号做主键值。这就是业务主键！</li></ul></li><li><p>在实际开发中使用业务主键多，还是使用自然主键多一些？</p><ul><li>自然主键使用比较多，因为主键只要做到不重复就行，不需要有意义。</li><li>业务主键不好，因为主键一旦和业务挂钩，那么当业务发生变动的时候，可能会影响到主键值，所以业务主键不建议使用。尽量使用自然主键。</li></ul></li><li><p>在mysql当中，有一种机制，可以帮助我们自动维护一个主键值？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> t_vip;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_vip(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment, <span class="hljs-operator">/</span><span class="hljs-operator">/</span>auto_increment表示自增，从<span class="hljs-number">1</span>开始，以<span class="hljs-number">1</span>递增！<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="外键约束-foreign-key"><a href="#外键约束-foreign-key" class="headerlink" title="外键约束: foreign key***"></a>外键约束: foreign key<em>**</em>*</h2><p><strong>简称FK</strong></p><ul><li><p>外键约束涉及到的相关术语：</p><ul><li>外键约束：一种约束（foreign key）</li><li>外键字段：该字段上添加了外键约束</li><li>外键值：外键字段当中的每一个值。</li></ul></li><li><p>业务背景：请设计数据库表，来描述“班级和学生”的信息？</p><ul><li><p>第一种方案：班级和学生存储在一张表中</p><p>分析以上方案的缺点：<br>    数据冗余，空间浪费！！！！<br>    这个设计是比较失败的！</p></li><li><p>第二种方案：班级一张表、学生一张表？？</p><p>​那么需要一个外键约束，来使两张表关联起来</p></li></ul></li><li><p>注意：<br>t_class是父表<br>        t_student是子表<br>​            删除表的顺序？<br>​                          先删子，再删父。</p></li></ul><p>​              创建表的顺序？<br>​                         先创建父，再创建子。</p><p>​              删除数据的顺序？<br>​                        先删子，再删父。</p><p>​             插入数据的顺序？<br>​                       先插入父，再插入子。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_class(<br>classno <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    classname <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br><span class="hljs-keyword">no</span> <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>    cno <span class="hljs-type">int</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>cno 引用t_class表中的 classno 作为外键 <br>    <span class="hljs-keyword">foreign</span> key(cno) <span class="hljs-keyword">references</span> t_class(classno)<br>);<br></code></pre></td></tr></table></figure><ul><li><p>思考：子表中的外键引用的父表中的某个字段，被引用的这个字段必须是主键吗?</p><ul><li>不一定是主键，但至少具有unique约束。</li></ul></li><li><p>测试：外键可以为NULL吗？</p><ul><li>外键值可以为NULL。</li></ul></li></ul><hr><h1 id="六、存储引擎"><a href="#六、存储引擎" class="headerlink" title="六、存储引擎"></a>六、存储引擎</h1><p><strong>什么是存储引擎，有什么用呢？</strong><br>                存储引擎是MySQL中特有的一个术语，其它数据库中没有。（Oracle中有，但是不叫这个名字）<br>                存储引擎这个名字高端大气上档次。<br>                实际上存储引擎是一个表存储&#x2F;组织数据的方式。<br>                不同的存储引擎，表存储数据的方式不同。</p><p>存储引擎只存在mysql中，（Oracle中有对应机制，但是不叫存储引擎）。</p><p>完整的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable(<br>   id  <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>   username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>   PASSWORD <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)<br>)ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-keyword">Default</span> CAHRSET<span class="hljs-operator">=</span>UTF8;<br></code></pre></td></tr></table></figure><p>注意：在MYSQL当中，凡是标识符可以使用飘号括起来，最好别用，不通用！</p><p>​        在建表的时候可以在最后小括号的”)”的右边使用：<br>​ENGINE来指定存储引擎。<br>​CHARSET来指定这张表的字符编码方式。<br>​&#x3D;&#x3D;结论&#x3D;&#x3D;：<br>​mysql默认的存储引擎是：InnoDB<br>​mysql默认的字符编码方式是：utf8</p><h2 id="1-常见的存储引擎"><a href="#1-常见的存储引擎" class="headerlink" title="1.常见的存储引擎"></a>1.常见的存储引擎</h2><p>显示全部存储引擎的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> engines<br></code></pre></td></tr></table></figure><p>版本不同，支持的情况不同</p><p>常见的存储引擎：</p><ul><li><strong>MyISAM 存储引擎</strong></li><li><strong>InnoDB 存储引擎</strong></li><li><strong>MEMORY 存储引擎</strong></li></ul><h3 id="MyISAM-存储引擎"><a href="#MyISAM-存储引擎" class="headerlink" title="MyISAM 存储引擎"></a>MyISAM 存储引擎</h3><p>它管理的表具有以下<strong>特征</strong>：<br>使用三个文件表示每个表：</p><ul><li><p>格式文件 — 存储表结构的定义（mytable.frm）</p></li><li><p>数据文件 — 存储表行的内容（mytable.MYD）</p></li><li><p>索引文件 — 存储表上索引（mytable.MYI）：索引是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</p><p>可被转换为压缩、只读表来节省空间</p></li></ul><p><strong>提示一下：</strong><br>               对于一张表来说，只要是主键，或者加有unique约束的字段上会自动创建索引。</p><p>MyISAM存储引擎<strong>特点</strong>：<br>                可被转换为压缩、只读表来节省空间<br>                这是这种存储引擎的优势！！！！</p><p>MyISAM不支持事务机制，安全性低。</p><h3 id="InnoDB-存储引擎"><a href="#InnoDB-存储引擎" class="headerlink" title="InnoDB 存储引擎"></a>InnoDB 存储引擎</h3><p>这是mysql默认的存储引擎，同时也是一个重量级的存储引擎。<br>        InnoDB支持事务，支持数据库崩溃后自动恢复机制。<br>        InnoDB存储引擎最<strong>主要的特点</strong>是：非常安全。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">它管理的表具有下列主要特征：<br><span class="hljs-code">– 每个 InnoDB 表在数据库目录中以.frm 格式文件表示</span><br><span class="hljs-code">– InnoDB 表空间 tablespace 被用于存储表的内容（表空间是一个逻辑名称。表空间存储数据+索引。）</span><br><span class="hljs-code"></span><br><span class="hljs-code">– 提供一组用来记录事务性活动的日志文件</span><br><span class="hljs-code">– 用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</span><br><span class="hljs-code">– 提供全 ACID 兼容</span><br><span class="hljs-code">– 在 MySQL 服务器崩溃后提供自动恢复</span><br><span class="hljs-code">– 多版本（MVCC）和行级锁定</span><br><span class="hljs-code">– 支持外键及引用的完整性，包括级联删除和更新</span><br><span class="hljs-code"></span><br><span class="hljs-section"># InnoDB最大的特点就是支持事务：</span><br><span class="hljs-code">以保证数据的安全。效率不是很高，并且也不能压缩，不能转换为只读，</span><br><span class="hljs-code">不能很好的节省存储空间。</span><br></code></pre></td></tr></table></figure><h3 id="MEMORY-存储引擎"><a href="#MEMORY-存储引擎" class="headerlink" title="MEMORY 存储引擎"></a>MEMORY 存储引擎</h3><p>使用 MEMORY 存储引擎的表，其数据<strong>存储在内存中</strong>，且行的长度固定，<br>        这两个特点使得 MEMORY 存储引擎非常快。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">MEMORY 存储引擎管理的表具有下列特征：<br><span class="hljs-code">– 在数据库目录内，每个表均以.frm 格式的文件表示。</span><br><span class="hljs-code">– 表数据及索引被存储在内存中。（目的就是快，查询快！）</span><br><span class="hljs-code">– 表级锁机制。</span><br><span class="hljs-code">– 不能包含 TEXT 或 BLOB 字段。</span><br><span class="hljs-code"></span><br>MEMORY 存储引擎以前被称为HEAP 引擎。<br><br>MEMORY引擎优点：查询效率是最高的。不需要和硬盘交互。<br>MEMORY引擎缺点：不安全，关机之后数据消失。因为数据和索引都是在内存当中。<br></code></pre></td></tr></table></figure><hr><hr><h1 id="七、事务"><a href="#七、事务" class="headerlink" title="七、事务** **"></a>七、事务** **</h1><h2 id="1、什么是事务？"><a href="#1、什么是事务？" class="headerlink" title="1、什么是事务？"></a>1、什么是事务？</h2><ul><li>&#96;&#96;&#96;markdown<br>一个事务其实就是一个完整的业务逻辑。<br>是一个最小的工作单元。不可再分。<br>什么是一个完整的业务逻辑？<br>假设转账，从A账户向B账户中转账10000.<br>将A账户的钱减去10000（update语句）<br>将B账户的钱加上10000（update语句）<br>这就是一个完整的业务逻辑。<br><br>以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。<br>这两个update语句要求必须同时成功或者同时失败，这样才能保证钱是正确的。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>**只有DML语句才会有事务这一说，其它语句和事务无关！！！**<br><br>+ ```markdown<br>  insert<br>  delete<br>  update<br>  只有以上的三个语句和事务有关系，其它都没有关系。<br>  因为只有以上的三个语句是数据库表中数据进行增、删、改的。<br>  只要你的操作一旦涉及到数据的增、删、改，那么就一定要考虑安全问题。<br>  <br>  数据安全第一位！！！<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="2、事务的原理"><a href="#2、事务的原理" class="headerlink" title="2、事务的原理"></a>2、事务的原理</h2><ul><li><p>InnoDB存储引擎：提供一组用来记录事务性活动的日志文件</p><ul><li><p>&#96;&#96;&#96;markdown<br>事务开启了：-satrt transaction<br>insert<br>insert<br>insert<br>delete<br>update<br>update<br>update<br>事务结束了！</p><p>在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。<br>在事务的执行过程中，我们可以提交事务，也可以回滚事务。</p><p>提交事务？-cmmit<br>清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中。<br>提交事务标志着，事务的结束。并且是一种全部成功的结束。<br>回滚事务？-rollback<br>将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件<br>回滚事务标志着，事务的结束。并且是一种全部失败的结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>+ 怎么提交事务，怎么回滚事务？<br>  提交事务：commit; 语句<br>  回滚事务：rollback; 语句（回滚永远都是只能回滚到上一次的提交点！）<br><br>  + ```markdown<br>    事务对应的英语单词是：transaction<br>    <br>    测试一下，在mysql当中默认的事务行为是怎样的？<br>    mysql默认情况下是支持自动提交事务的。（自动提交）<br>    什么是自动提交？<br>    每执行一条DML语句，则提交一次！<br>    <br>    这种自动提交实际上是不符合我们的开发习惯，因为一个业务<br>    通常是需要多条DML语句共同执行才能完成的，为了保证数据<br>    的安全，必须要求同时成功之后再提交，所以不能执行一条<br>    就提交一条。<br>    <br>    怎么将mysql的自动提交机制关闭掉呢？<br>    先执行这个命令：start transaction;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3、事务的特性：ACID"><a href="#3、事务的特性：ACID" class="headerlink" title="3、事务的特性：ACID"></a>3、事务的特性：ACID</h2><ul><li><p>A：原子性（atomicity）：事务是最小的工作单元，不可再分。</p></li><li><p>C：一致性（consistency）：事务必须保证多条DML语句同时成功或同时失败。</p></li><li><p>I ：隔离性（isolation）：事务A与事务B之间具有隔离。</p></li><li><p>D：持久性（durability）：最终的数据必须持久化的保存到硬盘文件中，事务才算成功的结束</p></li></ul><h2 id="4、事务的隔离性"><a href="#4、事务的隔离性" class="headerlink" title="4、事务的隔离性"></a>4、事务的隔离性</h2><p><strong>将事务A与事务B分别比作教室A，B，然而它们之间的墙就是隔离性，墙越厚隔离级别越高！（这种墙分为四个级别）</strong></p><p>oracle数据库默认的隔离级别是：read committed</p><p>mysql中默认的事务隔离级别就是：repeatable read</p><ul><li>事务和事务之间的隔离级别有4个级别</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs markdown">第一级别-&gt;读未提交：read uncommitted（最低的隔离级别）《没有提交就读到了》<br><span class="hljs-code">什么是读未提交？</span><br><span class="hljs-code">事务A可以读取到事务B未提交的数据。</span><br><span class="hljs-code">-----这种隔离级别存在的问题就是：脏读现象！(Dirty Read)</span><br><span class="hljs-code">我们称读到了脏数据。</span><br><span class="hljs-code">这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步！</span><br><span class="hljs-code"></span><br>第二级别-&gt;读已提交：read committed《提交之后才能读到》<br><span class="hljs-code">什么是读已提交？</span><br><span class="hljs-code">事务A只能读取到事务B提交之后的数据。</span><br><span class="hljs-code">这种隔离级别解决了什么问题？</span><br><span class="hljs-code">解决了脏读的现象。</span><br><span class="hljs-code">-------这种隔离级别存在什么问题：不可重复读取数据。</span><br><span class="hljs-code">什么是不可重复读取数据呢？</span><br><span class="hljs-code">在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次</span><br><span class="hljs-code">再读取的时候，读到的数据是4条，3不等于4，称为不可重复读取。</span><br><span class="hljs-code">这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。</span><br><span class="hljs-code"></span><br>第三级别-&gt;可重复读：repeatable read《提交之后也读不到，永远读取的都是刚开启事务时的数据》<br><span class="hljs-code">什么是可重复读取？</span><br><span class="hljs-code">事务A开启之后，不管是多久，每一次在事务A中读取到的数据</span><br><span class="hljs-code">都是一致的。即使事务B将数据已经修改，并且提交了，事务A</span><br><span class="hljs-code">读取到的数据还是没有发生改变，这就是可重复读。</span><br><span class="hljs-code">可重复读解决了什么问题？</span><br><span class="hljs-code">解决了不可重复读取数据。</span><br><span class="hljs-code">-------可重复读存在的问题是什么？：可以会出现幻影读。</span><br><span class="hljs-code">每一次读取到的数据都是幻象。不够真实！</span><br><span class="hljs-code">早晨9点开始开启了事务，只要事务不结束，到晚上9点，读到的数据还是那样！</span><br><span class="hljs-code">读到的是假象。不够绝对的真实。</span><br><span class="hljs-code"></span><br>第四级别-&gt;序列化/串行化：serializable（最高的隔离级别）<br><span class="hljs-code">这是最高隔离级别，效率最低。解决了所有的问题。</span><br><span class="hljs-code">这种隔离级别表示事务排队，不能并发！</span><br><span class="hljs-code">synchronized，线程同步（事务同步）</span><br><span class="hljs-code">每一次读取到的数据都是最真实的，并且效率是最低的。</span><br></code></pre></td></tr></table></figure><hr><h2 id="5、验证各种隔离级别"><a href="#5、验证各种隔离级别" class="headerlink" title="5、验证各种隔离级别"></a>5、验证各种隔离级别</h2><p>查看隔离级别：select  @@tx_isolation</p><table><thead><tr><th align="center">@@tx_isolation</th></tr></thead><tbody><tr><td align="center">REPEATABLE-READ</td></tr></tbody></table><p>mysql默认的隔离级别</p><h3 id="读未提交（read-uncommitted）："><a href="#读未提交（read-uncommitted）：" class="headerlink" title="读未提交（read uncommitted）："></a>读未提交（read uncommitted）：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#执行如下命令，设置全局的事务隔离级别为读未提交<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> transaction isolation level read uncommitted;<br></code></pre></td></tr></table></figure><h3 id="读已提交（read-committed）："><a href="#读已提交（read-committed）：" class="headerlink" title="读已提交（read committed）："></a>读已提交（read committed）：</h3><blockquote><p>测试 读已提交（read committed）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#执行如下命令，设置全局的事务隔离级别为读已提交<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> transaction isolation level read committed;<br></code></pre></td></tr></table></figure><h3 id="可重复读（repeatable-read）："><a href="#可重复读（repeatable-read）：" class="headerlink" title="可重复读（repeatable read）："></a>可重复读（repeatable read）：</h3><blockquote><p>测试：可重复读（repeatable read）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#执行如下命令，设置全局的事务隔离级别为可重复读<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> transaction isolation level repeatable read;<br></code></pre></td></tr></table></figure><h3 id="序列化读-x2F-串行化读（serializable）："><a href="#序列化读-x2F-串行化读（serializable）：" class="headerlink" title="序列化读&#x2F;串行化读（serializable）："></a>序列化读&#x2F;串行化读（serializable）：</h3><blockquote><p>测试 序列化读&#x2F;串行化读（serializable）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#执行如下命令，设置全局的事务隔离级别为可重复读<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> transaction isolation level serializable;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="八、索引"><a href="#八、索引" class="headerlink" title="八、索引 *"></a>八、索引 *</h1><h2 id="1、索引的概述"><a href="#1、索引的概述" class="headerlink" title="1、索引的概述"></a>1、索引的概述</h2><blockquote><p><strong>索引相当于一本书的目录，通过目录可以快速找到对应的资源。</strong></p></blockquote><p>索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。</p><p>作用：提高检索效率，缩小扫描范围。</p><p>一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。<br>        索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">对于一本字典来说，查找某个汉字有两种方式：<br><span class="hljs-code">第一种方式：一页一页挨着找，直到找到为止，这种查找方式属于全字典扫描。</span><br><span class="hljs-code">效率比较低。</span><br><span class="hljs-code">第二种方式：先通过目录（索引）去定位一个大概的位置，然后直接定位到这个</span><br><span class="hljs-code">位置，做局域性扫描，缩小扫描的范围，快速的查找。这种查找方式属于通过</span><br><span class="hljs-code">索引检索，效率较高。</span><br><span class="hljs-code"></span><br>MySQL在查询方面主要就是两种方式：<br><span class="hljs-code">第一种方式：全表扫描</span><br><span class="hljs-code">第二种方式：根据索引检索。</span><br></code></pre></td></tr></table></figure><ul><li><p>注意：<br>在实际中，汉语字典前面的目录是排序的，按照a b c d e f….排序，<br>        为什么排序呢？因为只有排序了才会有区间查找这一说！（缩小扫描范围<br>        其实就是扫描某个区间罢了！）</p></li><li><p>在mysql数据库当中索引也是需要排序的，并且这个所以索引的排序和TreeSet 的数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！</p></li><li><p>在mysql当中索引是一个B-Tree数据结构。</p></li><li><p>遵循左小又大原则存放。采用中序遍历方式遍历取数据。</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">提醒1：<br><span class="hljs-code">在任何数据库当中主键上都会自动添加索引对象，id字段上自动有索引，</span><br><span class="hljs-code">因为id是PK。另外在mysql当中，一个字段上如果有unique约束的话，也会自动</span><br><span class="hljs-code">创建索引对象。</span><br><span class="hljs-code"></span><br>提醒2：<br><span class="hljs-code">在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有</span><br><span class="hljs-code">一个硬盘的物理存储编号。</span><br><span class="hljs-code"></span><br>提醒3：<br><span class="hljs-code">在mysql当中，索引是一个单独的对象，不同的存储引擎以不同的形式存在，</span><br><span class="hljs-code">在MyISAM存储引擎中，索引存储在一个.MYI文件中。</span><br><span class="hljs-code">在InnoDB存储引擎中,索引存储在一个逻辑名称叫做tablespace的当中。</span><br><span class="hljs-code">在MEMORY存储引擎当中索引被存储在内存当中。</span><br><span class="hljs-code">不管索引存储在哪里，索引在mysql当中都是一个树的形式存在。（自平衡二叉树：B-Tree）</span><br></code></pre></td></tr></table></figure><hr><h2 id="2、什么时候给字段添加索引"><a href="#2、什么时候给字段添加索引" class="headerlink" title="2、什么时候给字段添加索引"></a>2、什么时候给字段添加索引</h2><p>条件1：数据量庞大（到底有多么庞大算庞大，这个需要测试，因为每一个硬件环境不同）<br>        条件2：该字段经常出现在where的后面，以条件的形式存在，也就是说这个字段总是被扫描。<br>        条件3：该字段很少的DML(insert delete update)操作。（因为DML之后，索引需要重新排序。）</p><p>注意：索引虽然提高效率但是依旧不能随意添加，因为索引也是数据库中的对象，也是需要数据库不断的维护的，有维护成本，表中数据经常修改就不适合，因为一旦修改索引需要重新排序，进行维护。</p><hr><h2 id="3、怎么创建索引对象"><a href="#3、怎么创建索引对象" class="headerlink" title="3、怎么创建索引对象"></a>3、怎么创建索引对象</h2><p><strong>语法格式：create  index  索引名称  on  表名 （字段名）。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index emp_ename_index <span class="hljs-keyword">on</span> emp(ename)<br></code></pre></td></tr></table></figure><hr><h2 id="4、怎么删除索引对象"><a href="#4、怎么删除索引对象" class="headerlink" title="4、怎么删除索引对象"></a>4、怎么删除索引对象</h2><p><strong>语法格式：drop  index  索引名称  on  表名；</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index emp_ename_index <span class="hljs-keyword">on</span> emp;<br></code></pre></td></tr></table></figure><hr><h2 id="5、sql语句的执行计划"><a href="#5、sql语句的执行计划" class="headerlink" title="5、sql语句的执行计划"></a>5、sql语句的执行计划</h2><blockquote><p><strong>主键和具有unique约束的字段自动添加索引，根据主键查询效率较高，尽量根据主键检索。</strong></p></blockquote><p>在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索？</p><p>explain+sql语句可以解释该语句。（执行计划）可以通过此命令判断sql是否走了索引！</p><hr><h2 id="6、索引分类"><a href="#6、索引分类" class="headerlink" title="6、索引分类"></a>6、索引分类</h2><ul><li>单一索引：给单个字段添加索引</li><li>复合索引：给多个字段联合起来添加一个索引</li><li>主键索引：主键上会自动添加索引</li><li>唯一索引：有unique约束的字段上会自动添加索引</li></ul><p>注意：唯一性比较弱的字段上添加索引用处不大。</p><hr><h2 id="7、索引什么时候失效"><a href="#7、索引什么时候失效" class="headerlink" title="7、索引什么时候失效 ?"></a>7、索引什么时候失效 ?</h2><p>1、<strong>模糊查询</strong>，这个时候索引失效,因为以 % 开始，无法使用索引！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span> ;<br>#尽量避免模糊查询的时候以“<span class="hljs-operator">%</span>”开始。<br>#这是一种优化的手段策略。<br></code></pre></td></tr></table></figure><p>2、<strong>使用or</strong>的时候会索引失效,因为如果or两端的字段存在一个字段不具备索引,具备索引的字段也会失效！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-operator">=</span><span class="hljs-string">&#x27;zhangsan&#x27;</span> <span class="hljs-keyword">or</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Java&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>3、使用<strong>复合索引</strong>，没有使用左侧的列去查找，索引失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index emp_job_sal_index <span class="hljs-keyword">on</span> emp(job,sal) # 为job和sal两个字段添加复合索引<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;manager&#x27;</span> ; #会走索引，因为使用job列去查了<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-operator">=</span> <span class="hljs-number">1800</span> ; #不会走索引，因为没有使用左侧的job列！<br></code></pre></td></tr></table></figure><p>4、where当中的索引<strong>列参加了运算</strong>，索引失效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1800</span> ;<br></code></pre></td></tr></table></figure><p>5、在where当中索引<strong>列使用了函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-built_in">lower</span>(ename) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;smith&#x27;</span>  ;<br></code></pre></td></tr></table></figure><hr><h1 id="九、视图（view）"><a href="#九、视图（view）" class="headerlink" title="九、视图（view）"></a>九、视图（view）</h1><h2 id="1-视图的概念"><a href="#1-视图的概念" class="headerlink" title="1.视图的概念"></a>1.视图的概念</h2><p>站在不同的角度看到数据。（同一张表的数据，通过不同的角度去看待。）</p><p>我们以后面向视图开发的时候，使用视图的时候可以像使用table一样。<br>        可以对视图进行增删改查等操作。</p><p>视图不是在内存当中，视图对象也是<strong>存储在硬盘上</strong>的，不会消失。</p><h2 id="2-创建-x2F-删除视图的sql"><a href="#2-创建-x2F-删除视图的sql" class="headerlink" title="2.创建&#x2F;删除视图的sql"></a>2.创建&#x2F;删除视图的sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#创建视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> myview <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp；<br><br>#删除视图<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> myview;<br></code></pre></td></tr></table></figure><p>注意：只有DQL语句才能以视图对象的方式创建出来；</p><p>​create view view_name as 这里的语句必须是DQL语句;</p><h2 id="3-对视图进行CRUD操作"><a href="#3-对视图进行CRUD操作" class="headerlink" title="3.对视图进行CRUD操作"></a>3.对视图进行CRUD操作</h2><blockquote><p> <strong>对视图进行增删改查，会影响到原表数据。</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp_bak <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> myview <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp_bak ;<br><br><span class="hljs-keyword">update</span> myview <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;sqx&#x27;</span>,<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> empno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;7369&#x27;</span>; #通过视图修改原表数据<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> myview <span class="hljs-keyword">where</span> empno <span class="hljs-operator">=</span> <span class="hljs-number">7369</span> ;  #通过视图删除原表数据<br></code></pre></td></tr></table></figure><p>注意：视图对象时保存在硬盘上的，而非保存在内存当中，所以不会消失！</p><h2 id="4-视图的作用"><a href="#4-视图的作用" class="headerlink" title="4.视图的作用"></a>4.视图的作用</h2><ul><li><p>思考：假设有一条复杂的SQL语句，而且这条SQL语句需要在不同的地方反复使用，每一次使用都写一遍，很长很麻烦,怎么办？</p><ul><li>答：可以把复杂的SQL以视图的形式展示出来，我们需要执行复杂的SQL时，只需查询该SQL所映射的视图即可！并且这种方式很容易后期的维护，我们只需改动原SQL，重新创建视图即可！</li></ul></li><li><p>视图可以隐藏表的实现细节，保密级别较高的系统，数据库只对你提供相关的视图java程序员只能对视图进行CRUD。（并不会提高视图的检索效率）</p></li></ul><h1 id="十-数据库设计三范式（重点）"><a href="#十-数据库设计三范式（重点）" class="headerlink" title="十.数据库设计三范式（重点）"></a>十.数据库设计三范式（重点）</h1><p>设计表的依据，教你怎么进行数据库表的设计。</p><p>按照这个三范式设计的表不会出现数据冗余。</p><h2 id="1、三范式都是那些"><a href="#1、三范式都是那些" class="headerlink" title="1、三范式都是那些"></a>1、三范式都是那些</h2><ul><li>第一范式:要求任何一张表必须有主键，每一个字段原子性不可再分。【核心】</li><li>第二范式:建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖。</li><li>第三范式:建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖。</li><li>声明：三范式是面试官经常问的，所以一定要熟记在心!</li></ul><p>设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</p><hr><h2 id="2、第一范式"><a href="#2、第一范式" class="headerlink" title="2、第一范式"></a>2、第一范式</h2><p>最核心，最重要的范式，所有表的设计都需要满足。<br>必须有主键，并且每一个字段都是原子性不可再分。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">学生编号    学生姓名 联系方式</span><br><span class="hljs-section">------------------------------------------</span><br>1001张三zs@gmail.com,1359999999<br>1002李四ls@gmail.com,13699999999<br>1001王五ww@163.net,13488888888<br><br>以上是学生表，满足第一范式吗？<br><span class="hljs-code">不满足，第一：没有主键。第二：联系方式可以分为邮箱地址和电话</span><br><span class="hljs-code"></span><br><span class="hljs-section">学生编号(pk) 学生姓名邮箱地址  联系电话</span><br><span class="hljs-section">----------------------------------------------------</span><br>1001张三zs@gmail.com1359999999<br>1002李四ls@gmail.com13699999999<br>1003王五ww@163.net13488888888<br></code></pre></td></tr></table></figure><hr><h2 id="3、第二范式"><a href="#3、第二范式" class="headerlink" title="3、第二范式"></a>3、第二范式</h2><p>建立在第一范式的基础之上，<br>        要求所有非主键字段必须完全依赖主键，不要产生部分依赖。 通俗的来讲就是一张表只表达一层含义（只描述一件事情）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">学生编号    学生姓名    教师编号       教师姓名</span><br><span class="hljs-section">----------------------------------------------------</span><br>1001张三001王老师<br>1002李四002赵老师<br>1003王五001王老师<br>1001张三002赵老师<br><br>这张表描述了学生和老师的关系：（1个学生可能有多个老师，1个老师有多个学生）<br><span class="hljs-code">这是非常典型的：多对多关系！</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 分析以上的表是否满足第一范式？</span><br><span class="hljs-code">不满足第一范式。</span><br><span class="hljs-code"></span><br>怎么满足第一范式呢？修改<br><br><span class="hljs-section">学生编号+教师编号(pk)学生姓名        教师姓名</span><br><span class="hljs-section">----------------------------------------------------</span><br>1001001张三王老师<br>1002002李四赵老师<br>1003001王五王老师<br>1001002张三赵老师<br><br>学生编号 教师编号，两个字段联合做主键，复合主键（PK: 学生编号+教师编号）<br><br>经过修改之后，以上的表满足了第一范式。但是满足第二范式吗？<br><span class="hljs-code">不满足，“张三”依赖1001，“王老师”依赖001，显然产生了部分依赖。</span><br><span class="hljs-code">产生部分依赖有什么缺点？</span><br><span class="hljs-code">数据冗余了。空间浪费了。“张三”重复了，“王老师”重复了。</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 为了让以上的表满足第二范式，你需要这样设计：</span><br><span class="hljs-code">使用三张表来表示多对多的关系！！！！</span><br><span class="hljs-code"></span><br>学生表<br><span class="hljs-section">学生编号(pk) 学生名字</span><br><span class="hljs-section">------------------------------------</span><br>1001张三<br>1002李四<br>1003王五<br><span class="hljs-code"></span><br><span class="hljs-code">教师表</span><br><span class="hljs-code">教师编号(pk)教师姓名</span><br><span class="hljs-code">--------------------------------------</span><br><span class="hljs-code">001王老师</span><br><span class="hljs-code">002赵老师</span><br><span class="hljs-code"></span><br>学生教师关系表<br><span class="hljs-section">id(pk) 学生编号(fk)  教师编号(fk)</span><br><span class="hljs-section">------------------------------------------------------</span><br>11001001<br>21002002<br>31003001<br>41001002<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 背口诀：</span><br><span class="hljs-code">多对多怎么设计？</span><br><span class="hljs-code">多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</span><br></code></pre></td></tr></table></figure><h2 id="4、第三范式"><a href="#4、第三范式" class="headerlink" title="4、第三范式"></a>4、第三范式</h2><p>第三范式建立在第二范式的基础之上<br>       要求所有非主键字典必须直接依赖主键，不要产生传递依赖。表中的每一列和主键都是直接依赖关系，而不是间接依赖</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">学生编号（PK）  学生姓名   班级编号      班级名称</span><br><span class="hljs-section">---------------------------------------------------------</span><br><span class="hljs-code">1001张三01一年一班</span><br><span class="hljs-code">1002李四02一年二班</span><br><span class="hljs-code">1003王五03一年三班</span><br><span class="hljs-code">1004赵六03一年三班</span><br><span class="hljs-code"></span><br>以上表的设计是描述：班级和学生的关系。<br><span class="hljs-code">很显然是1对多关系！</span><br><span class="hljs-code">一个教室中有多个学生。</span><br><span class="hljs-code"></span><br>分析以上表是否满足第一范式？<br><span class="hljs-code">满足第一范式，有主键。</span><br><span class="hljs-code"></span><br>分析以上表是否满足第二范式？<br><span class="hljs-code">满足第二范式，因为主键不是复合主键，没有产生部分依赖。主键是单一主键。</span><br><span class="hljs-code"></span><br>分析以上表是否满足第三范式？<br><span class="hljs-code">第三范式要求：不要产生传递依赖！</span><br><span class="hljs-code">一年一班依赖01，01依赖1001，产生了传递依赖。</span><br><span class="hljs-code">不符合第三范式的要求。产生了数据的冗余。</span><br><span class="hljs-code"></span><br>那么应该怎么设计一对多呢？<br><br>班级表：一<br><span class="hljs-section">班级编号(pk)   班级名称</span><br><span class="hljs-section">----------------------------------------</span><br>01一年一班<br>02一年二班<br>03一年三班<br><br>学生表：多<br><br><span class="hljs-section">学生编号（PK） 学生姓名     班级编号(fk)</span><br><span class="hljs-section">-------------------------------------------</span><br>1001   张三01<br>1002   李四02<br>1003   王五03<br><br><br><br><span class="hljs-section"># 背口诀：</span><br><span class="hljs-code">一对多，两张表，多的表加外键！！！！！！！！！！！！</span><br></code></pre></td></tr></table></figure><h2 id="5、必备口诀"><a href="#5、必备口诀" class="headerlink" title="5、必备口诀"></a>5、必备口诀</h2><ul><li><p><strong>多对多</strong>：三张表，关系表两个外键。</p></li><li><p><strong>一对多</strong>：两张表，多的表加外键。</p></li><li><p><strong>一对一</strong>：外键唯一。</p></li><li><p>提醒：实际的开发中，以满足客户需求为主，有时候会拿冗余换执行速度。</p></li></ul><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">数据库设计三范式是理论上的。<br>实践和理论有的时候有偏差。<br><br>最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。<br><br>因为在sql当中，表和表之间连接次数越多，效率越低。（笛卡尔积）<br><br>有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，<br>并且对于开发人员来说，sql语句的编写难度也会降低。<br><br>面试的时候把这句话说上：他就不会认为你是初级程序员了！<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8_新特性</title>
      <link href="/2022/11/03/java8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/11/03/java8-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="总纲"><a href="#总纲" class="headerlink" title="总纲"></a>总纲</h1><ul><li><p>速度更快</p></li><li><p>代码更少（增加了新的语法：Lambda表达式）</p></li><li><p>强大的Stream API</p></li><li><p><strong>Date Time API</strong> − 加强对日期与时间的处理</p></li><li><p>便于并行</p></li><li><p>最大化减少空指针的异常： <strong>Optional类</strong></p></li><li><p>Nashorn 引擎，允许在JVM上运行JS应用</p></li></ul><h2 id="Ⅰ、Lambda-表达式"><a href="#Ⅰ、Lambda-表达式" class="headerlink" title="Ⅰ、Lambda 表达式"></a>Ⅰ、Lambda 表达式</h2><blockquote><p><strong>Lambda 是一个匿名函数，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中），我们可以把Lambda表达式理解为一段可以传递的代码（将代码像数据一样进行传递）。使用 Lambda 表达式可以使代码变的更加简洁紧凑。</strong></p></blockquote><p><strong>1.举例：</strong></p><ul><li>Comparator<Integer> com2 &#x3D; (o1,o2) -&gt; o1.compareTo(o2)</li></ul><p><strong>2.格式：</strong></p><p>​-&gt; ： Lambda操作符 或 箭头操作符</p><p>​-&gt;左边：Lambda形参列表 （其实就是接口中抽象方法的形参列表）</p><p>​-&gt;右边： Lambda体 （其实就是重写抽象方法的方法体）</p><p><strong>3.Lambda的使用（分六种情况）</strong></p><ul><li>总结<ul><li>-&gt;左边：Lambda 形参列表的参数类型可以省略； 如果Lambda参数列表只有一个参数，其一对 ( ) 可以省略；若Lambda 需要两个或以上的参数，多条执行语句，则不需要省略。</li><li>-&gt;右边：Lambda体使用一对{ }包裹；如果Lambda体只有一条语句，则可以省略 { } 以及 return 关键字。</li></ul></li></ul><p><strong>4.Lambda表达式的本质：作为接口的实例</strong></p><ul><li><p>语法格式一： 无参，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-comment">//普通写法</span><br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run &#123;<br>                System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>            &#125;<br>       &#125;;<br>       r1.run();<br>    <br>   <span class="hljs-comment">//Lambda 表达式写法</span><br>       <span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>       r2.run();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>语法格式二：Lambda 需要一个参数，但是没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//普通写法</span><br>    Consumer&lt;String&gt; con = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;;<br>    con.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br><br><span class="hljs-comment">//Lambda 表达式写法 </span><br><span class="hljs-comment">//大括号&#123;&#125;可以省略</span><br>    Consumer&lt;String&gt; con1 =  (String s) -&gt;  &#123;System.out.println(s);&#125;;<br>    con1.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“&#x3D;&#x3D;类型推断&#x3D;&#x3D;”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest2</span><span class="hljs-params">()</span>&#123;、<br>    Consumer&lt;String&gt; con1 =  (String s) -&gt;  &#123;System.out.println(s);&#125;;<br>    con1.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-comment">//省略String</span><br>    Consumer&lt;String&gt; con2 =  (s) -&gt;  &#123;System.out.println(s);&#125;;<br>    con2.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>语法格式四：Lambda 若只需要&#x3D;&#x3D;一个参数&#x3D;&#x3D;时，参数的小括号可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest3</span><span class="hljs-params">()</span>&#123;<br><br>    Consumer&lt;String&gt; con =  (s) -&gt;  &#123;System.out.println(s);&#125;;<br>    con.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-comment">//省略括号</span><br>    Consumer&lt;String&gt; con1 =  s -&gt;  &#123;System.out.println(s);&#125;;<br>    con1.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>语法格式五：Lambda  若只需要两个或以上的参数，多条执行语句，并且可以又返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest4</span><span class="hljs-params">()</span>&#123;<br>    Comparator&lt;Integer&gt; com1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>            System.out.println(o1);<br>            System.out.println(o2);<br>            <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//Lambda 表达式如下</span><br>    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; &#123;<br>        System.out.println(o1);<br>        System.out.println(o2);<br>        <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>    &#125;;<br>   <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>语法格式六：当Lambda 体只有&#x3D;&#x3D;一条语句&#x3D;&#x3D;时，return与大括号若有，都可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest5</span><span class="hljs-params">()</span>&#123;<br>    Comparator&lt;Integer&gt; com1 = (o1,o2) -&gt; &#123;<br>        <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>    &#125;;<br><br>    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; o1.compareTo(o2);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Ⅱ、函数式接口"><a href="#Ⅱ、函数式接口" class="headerlink" title="Ⅱ、函数式接口"></a>Ⅱ、函数式接口</h2><ul><li><p>如果一个接口中只申明了一个抽象方法，则此接口称为函数式接口</p></li><li><p>函数式接口可以被隐式转换为 lambda 表达式。</p></li><li><p>Lambda 表达式和方法引用（实际上也可认为是Lambda表达式）上。在接口上使用 <code>@FunctionalInterface 注解</code>，这样可以检查他是否是一个函数式接口</p></li><li><p>如定义了一个函数式接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">GreetingService</span> <br>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayMessage</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>那么就可以使用Lambda表达式来表示该接口的一个实现(注：JAVA 8 之前一般是用匿名类实现的)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GreetingService</span> <span class="hljs-variable">greetService1</span> <span class="hljs-operator">=</span> <br>     message -&gt; System.out.println(<span class="hljs-string">&quot;Hello &quot;</span> + message);<br></code></pre></td></tr></table></figure></li></ul><ol><li><p><strong>java内置的核心函数式接口</strong></p><ul><li>消费型接口 Consumer<T>  void accept（T  t）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest5</span><span class="hljs-params">()</span>&#123;<br>    happy(<span class="hljs-number">500</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Double&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Double aDouble)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello world:&quot;</span> + aDouble);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//函数式接口如下</span><br>    happy(<span class="hljs-number">500</span>,money -&gt;  System.out.println(<span class="hljs-string">&quot;hello world:&quot;</span> + money));<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">happy</span><span class="hljs-params">(<span class="hljs-type">double</span> money,Consumer&lt;Double&gt; con)</span>&#123;<br>    con.accept(money);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="Ⅲ、方法引用"><a href="#Ⅲ、方法引用" class="headerlink" title="Ⅲ、方法引用"></a>Ⅲ、方法引用</h2><ul><li><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用。</p></li><li><p>方法引用通过方法的名字来指向一个方法。</p></li><li><p>方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p></li><li><p>方法引用使用一对冒号 <strong>::</strong> 将类（或对象）与方法名隔开。</p></li><li><p>如下三种使用情况：</p><ul><li><p>对象 :: 实例方法名</p></li><li><p>类::静态方法名</p></li><li><p>类::实例方法名</p></li><li><p>1.使用情境： 当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p></li><li><p>2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例，所以方法引用，也是函数式接口的实例。</p></li><li><p>3.使用格式： 类（或对象）::  方法名</p></li><li><p>4.方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的形参列表和返回值类型相同！！！</p></li></ul></li></ul><p>情况一：对象 <strong>::</strong> 实例方法</p><ul><li><p>Consumer中的void accept（T t）</p></li><li><p>PrintStream中的void println（T t）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest5</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//Lambda 表达式</span><br>   Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);<br>   con1.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-comment">//方法引用</span><br>    <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> System.out;<br>    Consumer&lt;String&gt; con2 = ps::println;<br>    con2.accept(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>情况二：类 <strong>::</strong> 静态方法</p><ul><li><p>Comparator中的int  compare(T t1, T t2)</p></li><li><p>Integer中的int compare(T t1, T t2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest6</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//Lambda表达式    </span><br>   Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);<br>   System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br><span class="hljs-comment">//方法引用</span><br>   Comparator&lt;Integer&gt; com2 =  Integer::compare;   <br>   System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>情况一：类 <strong>::</strong> 实例方法（有难度）</p><ul><li><p>Comparator中的int  compare(T t1, T t2)</p></li><li><p>String中的int  t1.compareTo( t2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambdaTest5</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//Lambda表达式</span><br>   Comparator&lt;String&gt; com1 = (t1,t2) -&gt; t1.compareTo(t2);<br>   System.out.println(com1.compare(<span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;21&quot;</span>));<br><span class="hljs-comment">//方法引用</span><br>   Comparator&lt;String&gt; com2 =  String::compareTo;<br>   System.out.println(com2.compare(<span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;21&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Ⅳ、Stream-API"><a href="#Ⅳ、Stream-API" class="headerlink" title="Ⅳ、Stream API"></a>Ⅳ、Stream API</h2><ul><li><p>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。</p></li><li><p>Stream API 对集合数据进行操作，就类似与用 SQL 语句执行的数据库查询</p></li><li><p>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p></li><li><p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p></li><li><p>stream 和 Collection集合的区别：Collection是一种静态的内存数据结构，而Stream是有关计算的，或者说前者面向内存的，后者面向CPU,通过CPU实现计算。</p></li><li><p>集合讲的是数据，Stream讲的是计算！</p></li><li><p><strong>注意</strong></p><ul><li>Stream并不会存储元素，而是按需计算。</li><li>Stream不会改变源对象，相反，它们回返回一个持有结果的新Stream。</li><li>Stream操作是延迟执行的，这意味着他们会等到需要结果的时候才执行。</li></ul></li><li><p>Stream 执行流程</p><ul><li>Stream的实例化    </li><li>一系列的中间操作（过滤、映射…..）</li><li>终止操作</li></ul></li><li><p><strong>说明</strong>：</p><ul><li>一个中间操作链，对数据源进行处理</li><li>一旦执行终止操作，就执行中间操作链，并产生结果，之后，不会再被使用</li></ul></li></ul><h3 id="Stream-的中间操作"><a href="#Stream-的中间操作" class="headerlink" title="Stream 的中间操作"></a>Stream 的中间操作</h3><p>​多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否者中间操作不会执行任何的处理！ 而在终止操作时一次性全部处理，称为“惰性求值”。</p><h4 id="1-筛选与切片"><a href="#1-筛选与切片" class="headerlink" title="1-筛选与切片"></a>1-筛选与切片</h4><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。</p><p>1.filter(Predicate p) —接收Lambda，从流中排除某些元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt;strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br><span class="hljs-comment">// 获取空字符串的数量</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> strings.stream().filter(string -&gt; string.isEmpty()).count();<br></code></pre></td></tr></table></figure><p>2.distinct( )—筛选，通过流所生成的元素的hashCode( )和equals( )去除重复的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt;strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>,  <span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br><span class="hljs-comment">// 去除重复的元素</span><br>strings.stream().distinct().foreach(System.out::println);<br></code></pre></td></tr></table></figure><p>3.limit(long maxSize)—截断流，使其元素不超过给定数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br><span class="hljs-comment">// 获取前三个元素</span><br>strings.stream().limit(<span class="hljs-number">3</span>).foreach(System.out::println);<br></code></pre></td></tr></table></figure><p>4.skip(long n)—跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流，与limit(n)互补</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br><span class="hljs-comment">// 获取除了前三个剩下的元素</span><br>strings.stream().skip(<span class="hljs-number">3</span>).foreach(System.out::println);<br></code></pre></td></tr></table></figure><hr><h4 id="2-映射"><a href="#2-映射" class="headerlink" title="2-映射"></a>2-映射</h4><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><ul><li><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br><span class="hljs-comment">// 获取对应的平方数</span><br>List&lt;Integer&gt; squaresList = numbers.stream().<br>                      map( i -&gt; i*i).distinct().foreach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="3-排序"><a href="#3-排序" class="headerlink" title="3-排序"></a>3-排序</h4><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：</p><ul><li>&#96;&#96;&#96;java<br>Random random &#x3D; new Random();<br>random.ints().limit(10).sorted().forEach(System.out::println);</li></ul><pre><code>---## Ⅴ、Optional类+ Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。+ Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。+ Optional 类的引入很好的解决空指针异常。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
